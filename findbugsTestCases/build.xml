<!--
    FindBugs Test Cases Ant build script.
    Based on original FindBugs Ant Script by Mike Fagan.
    Rewritten 1/5/2005 by David Hovemeyer, 2/6/2006 by Brian Cole.
-->

<project name="findbugsTestCases" default="build">

    <property file="build.properties" />
    <!--
            The local.properties properties file contains the location of findbugs.home

            This value is likely to be different for each checkout of the plugin,
            so the local.properties file is not managed by cvs

    -->
    <property file="local.properties" />
    <condition property="javacExecutableDefined">
        <isset property="javac.executable"/>
    </condition>
    <property name="java.executable" value="" />
    <property name="fb-ant.jar" value="${findbugs.home}/lib/findbugs-ant.jar" />
    <property name="fb-baseline-ant.jar" value="${findbugs-baseline.home}/lib/findbugs-ant.jar" />
    <property name="history.dir" value="history"/>
    <property name="enabledExtraVisitors" value="+CheckExpectedWarnings,+InefficientMemberAccess,+EmptyZipFileEntry"/>
    <property name="maxHeap" value="-Xmx900m"/>


    <path id="build.classpath">
        <pathelement location="${findbugs.home}/lib/annotations.jar" />
        <pathelement location="${findbugs.home}/lib/spotbugs.jar" />
        <pathelement location="${findbugs.home}/lib/jsr305.jar"/>
        <pathelement location="${junit.home}/junit.jar"/>
        <fileset dir="lib">
            <include name="*.jar"/>
        </fileset>
    </path>

    <target name="defineTasks">
        <taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask" classpath="${fb-ant.jar}" />
        <taskdef name="filterBugs" classname="edu.umd.cs.findbugs.anttask.FilterBugsTask" classpath="${fb-ant.jar}"/>
        <taskdef name="printBugs" classname="edu.umd.cs.findbugs.anttask.ConvertXmlToTextTask" classpath="${fb-ant.jar}"/>
    </target>

    <target name="build" depends="clean,runfindbugs,runEffort" />

    <target name="init">
        <echo>findbugs.home is ${findbugs.home}</echo>
        <!-- true to recompile FB core (if spotbugs.jar is not there) -->
        <condition property="fb.recompile" >
          <not><available file="${fb-ant.jar}" /></not>
        </condition>
    </target>

    <target name="fbcompile" if="fb.recompile" >
        <echo message="Building Findbugs core libraries"/>
        <ant dir="${findbugs.home}" inheritall="false" target="build" />
    </target>

    <target name="errorprone0" depends="clean" if="javac.executable">
        <mkdir dir="build/classes"/>
        <javac destdir="build/classes" source="1.8" target="1.8" debug="on" includeantruntime="false"
             fork="yes"
             executable="${javac.executable}"
             compiler="com.google.errorprone.ErrorProneAntCompilerAdapter">
            <src path="src/java"/>
            <src path="src/fakeAnnotations"/>
            <src path="src/fakeLibraries"/>
            <classpath>
                <path refid="build.classpath"/>
            </classpath>
            <compilerarg value="-Xlint:none"/>
        </javac>
    </target>

    <target name="errorprone1" depends="clean" unless="javac.executable">
        <mkdir dir="build/classes"/>
        <javac destdir="build/classes" source="1.8" target="1.8" debug="on" includeantruntime="false"
               compiler="com.google.errorprone.ErrorProneAntCompilerAdapter">
            <src path="src/java"/>
            <src path="src/fakeAnnotations"/>
            <src path="src/fakeLibraries"/>
            <classpath>
                <path refid="build.classpath"/>
            </classpath>
            <compilerarg value="-Xlint:none"/>
        </javac>
    </target>
    <target name="errorprone" depends="errorprone0,errorprone1"/>

    <target name="classes0" if="javac.executable">
  <echo message="Compiling with ${javac.executable}"/>
        <mkdir dir="build/classes"/>
        <echo>Compiling with 1.9, 'javac.executable' should be specified in local.properties</echo>
        <javac destdir="build/classes" source="1.9" target="1.9" debug="on" encoding="UTF-8" includeantruntime="false"
          failonerror="false"
            fork="yes"
            executable="${javac.executable}"
        >
            <src path="src/fakeAnnotations"/>
            <src path="src/fakeLibraries"/>
            <src path="src/java"/>
            <exclude name="jsr305/validation/*.java"/>
            <classpath>
                <path refid="build.classpath"/>
            </classpath>
            <compilerarg value="-Xlint:none"/>
        </javac>
      <echo message="Compiling with ant default javac and 1.8 target"/>
          <javac destdir="build/classes" source="1.8" target="1.8" debug="on" encoding="UTF-8" includeantruntime="false"
          >
            <src path="src/fakeAnnotations"/>
            <src path="src/fakeLibraries"/>
              <src path="src/java"/>
              <include name="jsr305/validation/*.java"/>
              <classpath>
                  <path refid="build.classpath"/>
              </classpath>
              <compilerarg value="-Xlint:none"/>
          </javac>
        <mkdir dir="build/classes-jdk7"/>
      <echo message="Compiling with ant default javac and 1.7 target"/>
        <javac destdir="build/classes-jdk7" source="1.7" target="1.7" debug="on" encoding="UTF-8" includeantruntime="false"
        >
            <src path="src/java"/>
            <exclude name="sfBugsNew/*jdk8.java"/>
            <src path="src/fakeAnnotations"/>
            <src path="src/fakeLibraries"/>
            <classpath>
                <path refid="build.classpath"/>
            </classpath>
            <compilerarg value="-Xlint:none"/>
        </javac>
    </target>

    <target name="classes1" unless="javac.executable">
    <echo message="Compiling with ${ant.java.version}"/>
        <mkdir dir="build/classes"/>
        <mkdir dir="build/classes-jdk7"/>
        <javac destdir="build/classes" debug="on" encoding="UTF-8" includeantruntime="false"
        >
            <src path="src/java"/>
            <exclude name="sfBugsNew/*jdk8.java"/>
            <src path="src/fakeAnnotations"/>
            <src path="src/fakeLibraries"/>
            <classpath>
                <path refid="build.classpath"/>
            </classpath>
            <compilerarg value="-Xlint:none"/>
        </javac>
    </target>
    <target name="classes" depends="init,fbcompile,classes0,classes1"/>

    <target name="jarFile" depends ="classes">
        <delete quiet="true">
            <fileset dir="build/all.jar"/>
        </delete>
        <jar destfile="build/all.jar">
            <fileset dir="build/classes"/>
        </jar>
    </target>

    <target name="clean">
        <delete dir="build/classes"/>
        <delete dir="build/classes-jdk7"/>
        <mkdir dir="build/classes" />
        <mkdir dir="build/classes-jdk7" />
        <delete file="build/all.jar"/>
        <delete failonerror="false">
            <fileset dir="build" includes="*.xml"/>
        </delete>
    </target>

    <target name="runfindbugs" depends="classes">
        <echo>Home is ${fb-ant.jar}</echo>
        <parallel threadsPerProcessor="1">
            <antcall target="historyNormal"/>
            <!-- run findbugs effort=default, then merge or copy results -->
            <!-- run findbugs effort=max, then merge or copy results -->
        </parallel>
    </target>

    <target name="runBaseline" depends="classes" if="findbugs-baseline.home">
        <echo>Home is ${findbugs-baseline.home}</echo>
        <echo>fb-ant jar is ${fb-baseline-ant.jar}</echo>
        <taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask" classpath="${fb-baseline-ant.jar}"/>
        <findbugs home="${findbugs-baseline.home}"  jvmargs="-ea ${maxHeap}"
             jvm="${java.executable}"
             output="xml:withMessages" timestampNow="true" reportLevel="low" chooseVisitors="${enabledExtraVisitors}" outputFile="build/baseline.xml">
            <sourcePath path="${basedir}/src/java" />
            <auxclasspath refid="build.classpath"/>
            <class location="${basedir}/build/classes" />
        </findbugs>
    </target>

    <target name="runEffort" depends="defineTasks">
        <echo>Test expected warnings with *min* effort</echo>
        <findbugs home="${findbugs.home}"  jvmargs="-ea ${maxHeap}"
             jvm="${java.executable}"
             output="xml:withMessages" timestampNow="true" reportLevel="low" effort="min"
             chooseVisitors="${enabledExtraVisitors}" outputFile="build/minEffort.xml">
            <sourcePath path="${basedir}/src/java" />
            <auxclasspath refid="build.classpath"/>
            <class location="${basedir}/build/classes" />
        </findbugs>

        <filterBugs home="${findbugs.home}"
             priority="1"
             bugPattern="FB"
             inputFile="build/minEffort.xml"
             outputFile="build/unexpectedMin.xml">
         </filterBugs>


        <echo>Test expected warnings with *less* effort</echo>
        <findbugs home="${findbugs.home}"  jvmargs="-ea ${maxHeap}"
             jvm="${java.executable}"
             output="xml:withMessages" timestampNow="true" reportLevel="low" effort="less"
             chooseVisitors="${enabledExtraVisitors}" outputFile="build/lessEffort.xml">
            <sourcePath path="${basedir}/src/java" />
            <auxclasspath refid="build.classpath"/>
            <class location="${basedir}/build/classes" />
        </findbugs>

        <filterBugs home="${findbugs.home}"
             priority="1"
             bugPattern="FB"
             inputFile="build/lessEffort.xml"
             outputFile="build/unexpectedLess.xml">
         </filterBugs>

        <echo>Test expected warnings with *more* effort</echo>
        <findbugs home="${findbugs.home}"  jvmargs="-ea ${maxHeap}"
             jvm="${java.executable}"
             output="xml:withMessages" timestampNow="true" reportLevel="low" effort="more"
             chooseVisitors="${enabledExtraVisitors}" outputFile="build/moreEffort.xml">
            <sourcePath path="${basedir}/src/java" />
            <auxclasspath refid="build.classpath"/>
            <class location="${basedir}/build/classes" />
        </findbugs>

        <filterBugs home="${findbugs.home}"
             priority="1"
             bugPattern="FB"
             inputFile="build/moreEffort.xml"
             outputFile="build/unexpectedMore.xml">
         </filterBugs>

         <printBugs home="${findbugs.home}"
             errorProperty="bugsReported"
             inputFile="build/unexpectedMore.xml"
             format="text">
         </printBugs>

        <echo>Test expected warnings with *max* effort</echo>
        <findbugs home="${findbugs.home}"  jvmargs="-ea ${maxHeap}"
             jvm="${java.executable}"
             output="xml:withMessages" timestampNow="true" reportLevel="low" effort="max"
             chooseVisitors="${enabledExtraVisitors}" outputFile="build/maxEffort.xml">
            <sourcePath path="${basedir}/src/java" />
            <auxclasspath refid="build.classpath"/>
            <class location="${basedir}/build/classes" />
        </findbugs>

        <filterBugs home="${findbugs.home}"
             priority="1"
             bugPattern="FB"
             inputFile="build/maxEffort.xml"
             outputFile="build/unexpectedMax.xml">
         </filterBugs>

         <printBugs home="${findbugs.home}"
             errorProperty="bugsReported"
             inputFile="build/unexpectedMax.xml"
             format="text">
         </printBugs>

        <fail message="Unexpected bug warning(s) found, check the 'printBugs' output!">
            <condition>
                <isset property="bugsReported"/>
            </condition>
        </fail>
    </target>


    <target name="runNormal" depends="defineTasks">
        <echo>Test expected warnings with ${ant.java.version} javac bytecode</echo>
        <findbugs home="${findbugs.home}"  jvmargs="-ea ${maxHeap} -Dfindbugs.sf.comment=false"
               output="xml:withMessages" timestampNow="true" reportLevel="low"
               jvm="${java.executable}"
               chooseVisitors="${enabledExtraVisitors}" outputFile="build/normal.xml">
            <sourcePath path="${basedir}/src/java" />
            <auxclasspath refid="build.classpath"/>
            <class location="${basedir}/build/classes" />
        </findbugs>

        <filterBugs home="${findbugs.home}"
            priority="1"
            bugPattern="FB"
            inputFile="build/normal.xml"
            outputFile="build/unexpected.xml">
        </filterBugs>
        <printBugs home="${findbugs.home}"
            errorProperty="bugsReported"
            inputFile="build/unexpected.xml"
            format="text">
        </printBugs>


        <echo>Test expected warnings with 1.7 javac bytecode</echo>
        <findbugs home="${findbugs.home}"  jvmargs="-ea ${maxHeap} -Dfindbugs.sf.comment=false"
               output="xml:withMessages" timestampNow="true" reportLevel="low"
               noClassOk="true"
               jvm="${java.executable}"
               chooseVisitors="${enabledExtraVisitors}" outputFile="build/normal-jdk7.xml">
            <sourcePath path="${basedir}/src/java" />
            <auxclasspath refid="build.classpath"/>
            <class location="${basedir}/build/classes-jdk7" />
        </findbugs>

        <filterBugs home="${findbugs.home}"
            priority="1"
            bugPattern="FB"
            inputFile="build/normal-jdk7.xml"
            outputFile="build/unexpected-jdk7.xml">
        </filterBugs>

        <printBugs home="${findbugs.home}"
            errorProperty="bugsReported"
            inputFile="build/unexpected-jdk7.xml"
            format="text">
        </printBugs>

        <echo>Test expected warnings with ${ant.java.version} javac bytecode and source</echo>
        <findbugs home="${findbugs.home}"  jvmargs="-ea ${maxHeap} -Dfindbugs.sf.comment=true"
               jvm="${java.executable}"
               output="xml:withMessages" timestampNow="true" reportLevel="low"
               chooseVisitors="${enabledExtraVisitors}" outputFile="build/analyzeSource.xml">
            <sourcePath path="${basedir}/src/java" />
            <auxclasspath refid="build.classpath"/>
            <class location="${basedir}/build/classes" />
        </findbugs>

        <filterBugs home="${findbugs.home}"
            priority="1"
            bugPattern="FB"
            inputFile="build/analyzeSource.xml"
            outputFile="build/unexpectedWithSource.xml">
        </filterBugs>

        <printBugs home="${findbugs.home}"
            errorProperty="bugsReported"
            inputFile="build/unexpectedWithSource.xml"
            format="text">
        </printBugs>

        <echo>Test expected warnings with 1.8 ecj bytecode</echo>
        <findbugs home="${findbugs.home}"  jvmargs="-ea ${maxHeap}"
               jvm="${java.executable}"
               output="xml:withMessages" timestampNow="true" reportLevel="low"
               chooseVisitors="${enabledExtraVisitors}" outputFile="build/normalEclipse.xml"
            noClassOk="true">
            <sourcePath path="${basedir}/src/java" />
            <auxclasspath refid="build.classpath"/>
            <class location="${basedir}/classesEclipse" />
        </findbugs>

        <filterBugs home="${findbugs.home}"
            priority="1"
            bugPattern="FB"
            inputFile="build/normalEclipse.xml"
            outputFile="build/unexpectedEclipse.xml">
        </filterBugs>

        <printBugs home="${findbugs.home}"
            errorProperty="bugsReported"
            inputFile="build/unexpectedEclipse.xml"
            format="text">
        </printBugs>

        <fail message="Unexpected bug warning(s) found, check the 'printBugs' output!">
            <condition>
                <isset property="bugsReported"/>
            </condition>
        </fail>
    </target>


    <target name="historyNormal" depends="mergeNormal,copyNormal"/>

    <target name="mergeNormal" depends="runNormal,existence" if="exists.normal">
        <exec dir="." executable="${findbugs.home}/bin/computeBugHistory">
            <arg value="-output" />
            <arg file="${history.dir}/normal.xml" />
            <arg file="${history.dir}/normal.xml" />
            <arg file="build/normal.xml" />
        </exec>
    </target>


    <target name="existence">
        <available property="exists.normal" file="${history.dir}/normal.xml"/>
    </target>

    <target name="copyNormal" depends="runNormal,existence" unless="exists.normal">
        <copy file="build/normal.xml" todir="${history.dir}"/>
    </target>

</project>
