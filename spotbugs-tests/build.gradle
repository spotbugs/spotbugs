apply from: "${rootDir}/gradle/checkstyle.gradle"
apply from: "${rootDir}/gradle/jacoco.gradle"

dependencies {
  implementation(project(':spotbugs')) {
    transitive = true
  }
  // These annotations are repackaged to spotbugs.jar, to keep backward compatibility for Ant task.
  // If they're not repackaged, Ant task will report 'java.lang.ClassNotFoundException: edu.umd.cs.findbugs.annotations.CleanupObligation'
  api project(':spotbugs-annotations')
  implementation project(':spotbugsTestCases')
  implementation project(':test-harness')
  implementation project(':test-harness-jupiter')

  implementation 'jakarta.annotation:jakarta.annotation-api:3.0.0'
  implementation 'org.junit.jupiter:junit-jupiter-engine:5.13.4'
  implementation 'org.junit.jupiter:junit-jupiter-params:5.13.4'
  implementation 'org.hamcrest:hamcrest:3.0'
  implementation 'org.mockito:mockito-junit-jupiter:5.20.0'
  implementation 'org.apache.ant:ant:1.10.15'
  implementation libs.log4j.core
  implementation libs.log4j.slf4j2.impl
  implementation 'com.google.errorprone:error_prone_annotations:2.42.0'
  implementation files(project(':spotbugs').sourceSets.gui.output)
  testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

java {
  withSourcesJar()
}


tasks.named('compileJava', JavaCompile).configure {
  options.release = 11
}

tasks.named('jacocoTestReport', JacocoReport).configure {
  additionalSourceDirs.setFrom files(project(':spotbugs').sourceSets.main.java.srcDirs)
  additionalClassDirs.setFrom files(project(':spotbugs').sourceSets.main.output.classesDirs)
  executionData.setFrom files(layout.buildDirectory.file('jacoco/test.exec'))
}

test {
  dependsOn ':spotbugsTestCases:build'
  useJUnitPlatform()
}

spotbugs {
  ignoreFailures = true
}
