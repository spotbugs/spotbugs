apply from: "$rootDir/gradle/checkstyle.gradle"
apply from: "$rootDir/gradle/jacoco.gradle"

dependencies {
  implementation(project(':spotbugs')) {
    transitive = true
  }
  // These annotations are repackaged to spotbugs.jar, to keep backward compatibility for Ant task.
  // If they're not repackaged, Ant task will report 'java.lang.ClassNotFoundException: edu.umd.cs.findbugs.annotations.CleanupObligation'
  api project(':spotbugs-annotations')
  implementation project(':spotbugsTestCases')
  implementation project(':test-harness')

  implementation 'org.junit.vintage:junit-vintage-engine:5.10.0'
  implementation 'org.hamcrest:hamcrest-core:2.2'
  implementation 'org.apache.ant:ant:1.10.14'
  implementation libs.log4j.core
  implementation libs.log4j.slf4j2.impl
  implementation 'com.google.errorprone:error_prone_annotations:2.22.0'
  implementation files(project(":spotbugs").sourceSets.gui.output)
}

java {
  withSourcesJar()
}


tasks.named('compileJava', JavaCompile).configure {
  options.release = 11
}

artifacts {
  archives sourcesJar
}

tasks.named('jacocoTestReport', JacocoReport).configure {
  dependsOn('unstableTest')
  additionalSourceDirs.setFrom files(project(':spotbugs').sourceSets.main.java.srcDirs)
  additionalClassDirs.setFrom files(project(':spotbugs').sourceSets.main.output.classesDirs)
  executionData.setFrom files("$buildDir/jacoco/unstableTest.exec", "$buildDir/jacoco/test.exec")
}

// Tests below fail if executed with other tests
// So we run them before all other tests are executed
task unstableTest(type: Test) {
  filter {
    includeTestsMatching "PlaceholderTest"
    includeTestsMatching "MutableClassesTest"
  }
  testLogging {
    events "passed", "skipped", "failed"
  }
}

test {
  dependsOn ':spotbugsTestCases:build', 'unstableTest'
  filter {
    excludeTestsMatching "PlaceholderTest"
    excludeTestsMatching "MutableClassesTest"
  }
}


spotbugs {
  ignoreFailures = true
}
