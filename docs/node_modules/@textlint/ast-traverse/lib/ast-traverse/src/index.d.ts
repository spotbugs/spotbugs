import { TxtNode, TxtParentNode } from "@textlint/ast-node-types";
export declare class TxtElement {
    node: TxtNode | null;
    constructor(node: TxtNode | null);
}
declare const VisitorOption: {
    Break: {};
    Skip: {};
};
declare class Controller {
    private __worklist;
    private __leavelist;
    private __current;
    private __willStartTraverse();
    private __execute(callback, element);
    /**
     * Gets parent nodes of current node.
     * The parent nodes are returned in order from the closest parent to the outer ones.
     * Current node is {@link current}.
     * @returns {Array}
     * @public
     */
    parents(): TxtNode[];
    /**
     * Gets current node during traverse.
     * @returns {TxtNode|null}
     * @public
     */
    current(): TxtNode | null;
    /**
     * Traverse AST with visitor
     * @param {TxtParentNode} root
     * @param {Visitor} visitor
     */
    traverse(root: TxtParentNode, visitor: Visitor): void;
}
export interface Visitor {
    enter?(node: TxtNode, parent?: TxtParentNode): any | void;
    leave?(node: TxtNode, parent?: TxtParentNode): any | void;
}
declare function traverse(root: TxtParentNode, visitor: Visitor): void;
export { Controller, traverse, VisitorOption };
