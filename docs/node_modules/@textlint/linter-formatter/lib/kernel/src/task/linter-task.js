// LICENSE : MIT
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var textlint_core_task_1 = require("./textlint-core-task");
var rule_context_1 = require("../core/rule-context");
var filter_rule_context_1 = require("../core/filter-rule-context");
var debug = require("debug")("textlint:TextLintCoreTask");
var TextLintCoreTask = /** @class */ (function (_super) {
    __extends(TextLintCoreTask, _super);
    function TextLintCoreTask(_a) {
        var config = _a.config, configBaseDir = _a.configBaseDir, ruleDescriptors = _a.ruleDescriptors, filterRuleDescriptors = _a.filterRuleDescriptors, sourceCode = _a.sourceCode;
        var _this = _super.call(this) || this;
        _this.config = config;
        _this.configBaseDir = configBaseDir;
        _this.ruleDescriptors = ruleDescriptors;
        _this.filterRuleDescriptors = filterRuleDescriptors;
        _this.sourceCode = sourceCode;
        _this._setupRules();
        return _this;
    }
    TextLintCoreTask.prototype.start = function () {
        this.startTraverser(this.sourceCode);
    };
    TextLintCoreTask.prototype._setupRules = function () {
        var _this = this;
        // rule
        var sourceCode = this.sourceCode;
        var report = this.createReporter(sourceCode);
        var ignoreReport = this.createShouldIgnore();
        // setup "rules" field
        // filter duplicated rules for improving experience
        // see https://github.com/textlint/textlint/issues/219
        debug("rules", this.ruleDescriptors);
        this.ruleDescriptors.lintableDescriptors.forEach(function (ruleDescriptor) {
            var ruleOptions = ruleDescriptor.normalizedOptions;
            var ruleContext = rule_context_1.createFreezedRuleContext({
                ruleId: ruleDescriptor.id,
                ruleOptions: ruleOptions,
                sourceCode: sourceCode,
                report: report,
                configBaseDir: _this.configBaseDir
            });
            _this.tryToAddListenRule(ruleDescriptor.linter, ruleContext, ruleOptions);
        });
        // setup "filters" field
        debug("filterRules", this.filterRuleDescriptors);
        this.filterRuleDescriptors.descriptors.forEach(function (filterDescriptor) {
            var ruleContext = filter_rule_context_1.createFreezedFilterRuleContext({
                ruleId: filterDescriptor.id,
                sourceCode: sourceCode,
                ignoreReport: ignoreReport,
                configBaseDir: _this.configBaseDir
            });
            _this.tryToAddListenRule(filterDescriptor.filter, ruleContext, filterDescriptor.normalizedOptions);
        });
    };
    return TextLintCoreTask;
}(textlint_core_task_1.default));
exports.default = TextLintCoreTask;
//# sourceMappingURL=linter-task.js.map