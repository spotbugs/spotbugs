{"version":3,"sources":["../src/textlint-feature-flag.js"],"names":["throwWithoutExperimental","throwIfTesting","MapLike","require","assert","flagMap","resetFlags","clear","setFeature","flagName","status","set","isFeatureEnabled","loose","has","Error","get","process","env","NODE_ENV","Array","isArray","argv","indexOf","coreFlags","experimental","runningCLI","runningTester","message"],"mappings":"AAAA;AACA;;;;;;;;QAkFgBA,wB,GAAAA,wB;QASAC,c,GAAAA,c;AA1FhB,IAAMC,UAAUC,QAAQ,UAAR,EAAoBD,OAApC;AACA,IAAME,SAASD,QAAQ,QAAR,CAAf;AACA,IAAME,UAAU,IAAIH,OAAJ,EAAhB;AACA;;;AAGO,IAAMI,kCAAa,SAAbA,UAAa,GAAM;AAC5BD,YAAQE,KAAR;AACH,CAFM;AAGP;;;;;AAKO,IAAMC,kCAAa,SAAbA,UAAa,CAACC,QAAD,EAAWC,MAAX,EAAsB;AAC5CL,YAAQM,GAAR,CAAYF,QAAZ,EAAsBC,MAAtB;AACH,CAFM;AAGP;;;;;;AAMO,IAAME,8CAAmB,SAAnBA,gBAAmB,CAACH,QAAD,EAAsC;AAAA,mFAAP,EAAO;AAAA,0BAAzBI,KAAyB;AAAA,QAAzBA,KAAyB,8BAAjB,KAAiB;;AAClE,QAAI,CAACR,QAAQS,GAAR,CAAYL,QAAZ,CAAL,EAA4B;AACxB,YAAII,KAAJ,EAAW;AACP;AACA,mBAAO,KAAP;AACH,SAHD,MAGO;AACH,kBAAM,IAAIE,KAAJ,oCAA2CN,QAA3C,sBAAN;AACH;AACJ;AACD,QAAMC,SAASL,QAAQW,GAAR,CAAYP,QAAZ,CAAf;AACA,QAAIQ,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACvCf,sBAAcM,MAAd,yCAAcA,MAAd,2CAA4DA,MAA5D;AACH;AACD,WAAOA,MAAP;AACH,CAdM;;AAgBP;AACA;AACA,IAAIO,WAAWG,MAAMC,OAAN,CAAcJ,QAAQK,IAAtB,CAAX,IAA0CL,QAAQK,IAAR,CAAaC,OAAb,CAAqB,gBAArB,MAA2C,CAAC,CAA1F,EAA6F;AACzFf,eAAW,mBAAX,EAAgC,IAAhC;AACH;AACD;;;;AAIO,IAAMgB,gCAAY;AACrB;AACA,QAAIC,YAAJ,GAAmB;AACf,eAAOb,iBAAiB,mBAAjB,EAAsC;AACzCC,mBAAO;AADkC,SAAtC,CAAP;AAGH,KANoB;AAOrB,QAAIY,YAAJ,CAAiBf,MAAjB,EAAyB;AACrBF,mBAAW,mBAAX,EAAgCE,MAAhC;AACH,KAToB;AAUrB;AACA,QAAIgB,UAAJ,GAAiB;AACb,eAAOd,iBAAiB,iBAAjB,EAAoC;AACvCC,mBAAO;AADgC,SAApC,CAAP;AAGH,KAfoB;AAgBrB,QAAIa,UAAJ,CAAehB,MAAf,EAAuB;AACnBF,mBAAW,iBAAX,EAA8BE,MAA9B;AACH,KAlBoB;AAmBrB;AACA,QAAIiB,aAAJ,GAAoB;AAChB,eAAOf,iBAAiB,oBAAjB,EAAuC;AAC1CC,mBAAO;AADmC,SAAvC,CAAP;AAGH,KAxBoB;AAyBrB,QAAIc,aAAJ,CAAkBjB,MAAlB,EAA0B;AACtBF,mBAAW,oBAAX,EAAiCE,MAAjC;AACH;AA3BoB,CAAlB;AA6BP;;;;AAIO,SAASV,wBAAT,CAAkC4B,OAAlC,EAA2C;AAC9C,QAAIJ,UAAUE,UAAV,IAAwB,CAACF,UAAUC,YAAvC,EAAqD;AACjD,cAAMV,MAAMa,OAAN,CAAN;AACH;AACJ;AACD;;;;AAIO,SAAS3B,cAAT,CAAwB2B,OAAxB,EAAiC;AACpC,QAAIJ,UAAUG,aAAd,EAA6B;AACzB,cAAMZ,MAAMa,OAAN,CAAN;AACH;AACJ","file":"textlint-feature-flag.js","sourcesContent":["// MIT Â© 2017 azu\n\"use strict\";\nconst MapLike = require(\"map-like\").MapLike;\nconst assert = require(\"assert\");\nconst flagMap = new MapLike();\n/**\n * IT IS FOR TESTING\n */\nexport const resetFlags = () => {\n    flagMap.clear();\n};\n/**\n * set feature flag\n * @param {string} flagName\n * @param {boolean} status\n */\nexport const setFeature = (flagName, status) => {\n    flagMap.set(flagName, status);\n};\n/**\n * If the feature flag of `flagName` is enabled, return true.\n * @param {string} flagName\n * @param {boolean=false} [loose]\n * @returns {boolean}\n */\nexport const isFeatureEnabled = (flagName, { loose = false } = {}) => {\n    if (!flagMap.has(flagName)) {\n        if (loose) {\n            // loose-mode, return false\n            return false;\n        } else {\n            throw new Error(`@textlint/feature-flag:Error: ${flagName} is not defined.`);\n        }\n    }\n    const status = flagMap.get(flagName);\n    if (process.env.NODE_ENV !== \"production\") {\n        assert(typeof status, `flag should be boolean, but it is :${status}`);\n    }\n    return status;\n};\n\n// == CORE Flags\n// if run textlint --experimental, set experimental true by default\nif (process && Array.isArray(process.argv) && process.argv.indexOf(\"--experimental\") !== -1) {\n    setFeature(\"core.experimental\", true);\n}\n/**\n * Core flags\n * @type {{experimental, experimental, runningCLI, runningCLI, runningTester, runningTester}}\n */\nexport const coreFlags = {\n    // Experimental\n    get experimental() {\n        return isFeatureEnabled(\"core.experimental\", {\n            loose: true\n        });\n    },\n    set experimental(status) {\n        setFeature(\"core.experimental\", status);\n    },\n    // CLI\n    get runningCLI() {\n        return isFeatureEnabled(\"core.runningCLI\", {\n            loose: true\n        });\n    },\n    set runningCLI(status) {\n        setFeature(\"core.runningCLI\", status);\n    },\n    // textlint-tester\n    get runningTester() {\n        return isFeatureEnabled(\"core.runningTester\", {\n            loose: true\n        });\n    },\n    set runningTester(status) {\n        setFeature(\"core.runningTester\", status);\n    }\n};\n/**\n * if current is not experimental, throw error message.\n * @param message\n */\nexport function throwWithoutExperimental(message) {\n    if (coreFlags.runningCLI && !coreFlags.experimental) {\n        throw Error(message);\n    }\n}\n/**\n * if current is in testing, throw error message.\n * @param {string} message\n */\nexport function throwIfTesting(message) {\n    if (coreFlags.runningTester) {\n        throw Error(message);\n    }\n}\n"]}