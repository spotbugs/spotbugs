// MIT Â© 2017 azu
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.throwWithoutExperimental = throwWithoutExperimental;
exports.throwIfTesting = throwIfTesting;
var MapLike = require("map-like").MapLike;
var assert = require("assert");
var flagMap = new MapLike();
/**
 * IT IS FOR TESTING
 */
var resetFlags = exports.resetFlags = function resetFlags() {
    flagMap.clear();
};
/**
 * set feature flag
 * @param {string} flagName
 * @param {boolean} status
 */
var setFeature = exports.setFeature = function setFeature(flagName, status) {
    flagMap.set(flagName, status);
};
/**
 * If the feature flag of `flagName` is enabled, return true.
 * @param {string} flagName
 * @param {boolean=false} [loose]
 * @returns {boolean}
 */
var isFeatureEnabled = exports.isFeatureEnabled = function isFeatureEnabled(flagName) {
    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        _ref$loose = _ref.loose,
        loose = _ref$loose === undefined ? false : _ref$loose;

    if (!flagMap.has(flagName)) {
        if (loose) {
            // loose-mode, return false
            return false;
        } else {
            throw new Error("@textlint/feature-flag:Error: " + flagName + " is not defined.");
        }
    }
    var status = flagMap.get(flagName);
    if (process.env.NODE_ENV !== "production") {
        assert(typeof status === "undefined" ? "undefined" : _typeof(status), "flag should be boolean, but it is :" + status);
    }
    return status;
};

// == CORE Flags
// if run textlint --experimental, set experimental true by default
if (process && Array.isArray(process.argv) && process.argv.indexOf("--experimental") !== -1) {
    setFeature("core.experimental", true);
}
/**
 * Core flags
 * @type {{experimental, experimental, runningCLI, runningCLI, runningTester, runningTester}}
 */
var coreFlags = exports.coreFlags = {
    // Experimental
    get experimental() {
        return isFeatureEnabled("core.experimental", {
            loose: true
        });
    },
    set experimental(status) {
        setFeature("core.experimental", status);
    },
    // CLI
    get runningCLI() {
        return isFeatureEnabled("core.runningCLI", {
            loose: true
        });
    },
    set runningCLI(status) {
        setFeature("core.runningCLI", status);
    },
    // textlint-tester
    get runningTester() {
        return isFeatureEnabled("core.runningTester", {
            loose: true
        });
    },
    set runningTester(status) {
        setFeature("core.runningTester", status);
    }
};
/**
 * if current is not experimental, throw error message.
 * @param message
 */
function throwWithoutExperimental(message) {
    if (coreFlags.runningCLI && !coreFlags.experimental) {
        throw Error(message);
    }
}
/**
 * if current is in testing, throw error message.
 * @param {string} message
 */
function throwIfTesting(message) {
    if (coreFlags.runningTester) {
        throw Error(message);
    }
}
//# sourceMappingURL=textlint-feature-flag.js.map