/// <reference types="node" />
import RuleError from "../core/rule-error";
import MessageType from "../shared/type/MessageType";
import { EventEmitter } from "events";
import SourceCode from "../core/source-code";
import { TxtNode } from "@textlint/ast-node-types";
import { TextlintRuleReporter, TextlintFilterRuleReporter, TextlintFilterRuleOptions, TextlintFixCommand, TextlintRuleOptions } from "../textlint-kernel-interface";
import { default as RuleContext, RuleReportedObject } from "../core/rule-context";
import FilterRuleContext from "../core/filter-rule-context";
/**
 * Ignoring Report function
 */
/**
 * Message of ignoring
 * @typedef {Object} ReportIgnoreMessage
 * @property {string} ruleId
 * @property {number[]} range
 * @property {string} ignoringRuleId to ignore ruleId
 * "*" is special case, it match all ruleId(work as wildcard).
 */
export interface ShouldIgnoreArgs {
    ruleId: string;
    range: [number, number];
    optional: {
        ruleId?: string;
    };
}
export interface IgnoreReportedMessage {
    ruleId: string;
    type: typeof MessageType.ignore;
    range: [number, number];
    ignoringRuleId: string;
}
export declare type ShouldIgnoreFunction = (args: ShouldIgnoreArgs) => void;
/**
 * context.report function
 */
export interface ReportArgs {
    ruleId: string;
    node: TxtNode;
    severity: number;
    ruleError: RuleError | RuleReportedObject;
}
export declare type ReportFunction = (args: ReportArgs) => void;
export interface LintReportedMessage {
    type: typeof MessageType.lint;
    ruleId: string;
    message: string;
    index: number;
    line: number;
    column: number;
    severity: number;
    fix?: TextlintFixCommand;
}
/**
 * CoreTask receive AST and prepare, traverse AST, emit nodeType event!
 * You can observe task and receive "message" event that is TextLintMessage.
 */
export default abstract class TextLintCoreTask extends EventEmitter {
    private ruleTypeEmitter;
    static readonly events: {
        start: string;
        message: string;
        complete: string;
        error: string;
    };
    constructor();
    abstract start(): void;
    createShouldIgnore(): ShouldIgnoreFunction;
    createReporter(sourceCode: SourceCode): ReportFunction;
    /**
     * start process and emitting events.
     * You can listen message by `task.on("message", message => {})`
     * @param {SourceCode} sourceCode
     */
    startTraverser(sourceCode: SourceCode): void;
    /**
     * try to get rule object
     */
    tryToGetRuleObject(ruleCreator: TextlintRuleReporter, ruleContext: Readonly<RuleContext>, ruleOptions?: TextlintRuleOptions): {
        [x: string]: ((node: TxtNode) => void | Promise<any>) | undefined;
    };
    /**
     * try to get filter rule object
     */
    tryToGetFilterRuleObject(ruleCreator: TextlintFilterRuleReporter, ruleContext: Readonly<FilterRuleContext>, ruleOptions?: TextlintFilterRuleOptions): {
        [x: string]: ((node: TxtNode) => void | Promise<any>) | undefined;
    };
    /**
     * add all the node types as listeners of the rule
     * @param {Function} ruleCreator
     * @param {Readonly<RuleContext>|Readonly<FilterRuleContext>} ruleContext
     * @param {Object|boolean|undefined} ruleOptions
     * @returns {Object}
     */
    tryToAddListenRule(ruleCreator: TextlintRuleReporter | TextlintFilterRuleReporter, ruleContext: Readonly<RuleContext> | Readonly<FilterRuleContext>, ruleOptions?: TextlintRuleOptions | TextlintFilterRuleOptions): void;
}
