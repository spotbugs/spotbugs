import { BaseRuleContext } from "./BaseRuleContext";
import { TxtNode, ASTNodeTypes } from "@textlint/ast-node-types";
import RuleFixer, { IntermediateFixCommand } from "../fixer/rule-fixer";
import RuleError from "./rule-error";
import SourceCode from "./source-code";
import { TextlintRuleOptions } from "../textlint-kernel-interface";
import { ReportFunction } from "../task/textlint-core-task";
/**
 * This callback is displayed as a global member.
 * @callback ReportCallback
 * @param {ReportMessage} message
 */
/**
 * Rule context object is passed to each rule as `context`
 * @param {string} ruleId
 * @param {SourceCode} sourceCode
 * @param {ReportCallback} report
 * @param {Object|boolean|undefined} ruleOptions
 * @param {string} [configBaseDir]
 * @constructor
 */
export interface RuleContextArgs {
    ruleId: string;
    sourceCode: SourceCode;
    report: ReportFunction;
    ruleOptions?: TextlintRuleOptions;
    configBaseDir?: string;
}
/**
 * Object version of RuleError
 * It is un-document way
 *
 * report(node, {
 *   message: ""
 * })
 */
export interface RuleReportedObject {
    line?: number;
    column?: number;
    index?: number;
    fix?: IntermediateFixCommand;
    message: string;
    severity?: number;
    [index: string]: any;
}
export declare const createFreezedRuleContext: (args: RuleContextArgs) => Readonly<RuleContext>;
export default class RuleContext implements BaseRuleContext {
    private _ruleId;
    private _sourceCode;
    private _report;
    private _ruleOptions?;
    private _configBaseDir?;
    private _severity;
    constructor(args: RuleContextArgs);
    /**
     * Rule id
     * @returns {string}
     */
    readonly id: string;
    readonly severity: number;
    /**
     * Node's type values
     * @type {ASTNodeTypes}
     */
    readonly Syntax: typeof ASTNodeTypes;
    /**
     * CustomError object
     * @type {RuleError}
     */
    readonly RuleError: typeof RuleError;
    /**
     * Rule fixer command object
     * @type {RuleFixer}
     */
    readonly fixer: RuleFixer;
    /**
     * report function that is called in a rule
     */
    report: (node: TxtNode, ruleError: RuleError | RuleReportedObject, _shouldNotUsed?: any) => void;
    /**
     * get file path current processing.
     */
    getFilePath: () => string | undefined;
    /**
     * Gets the source code for the given node.
     * @param {TxtNode=} node The AST node to get the text for.
     * @param {int=} beforeCount The number of characters before the node to retrieve.
     * @param {int=} afterCount The number of characters after the node to retrieve.
     * @returns {string} The text representing the AST node.
     */
    getSource: (node?: TxtNode | undefined, beforeCount?: number | undefined, afterCount?: number | undefined) => string;
    /**
     * get config base directory path
     * config base directory path often is the place of .textlintrc
     *
     * e.g.) /path/to/dir/.textlintrc
     * `getConfigBaseDir()` return `"/path/to/dir/"`.
     *
     * When using textlint as module, it is specified by `configBaseDir`
     * If not found the value, return undefined.
     *
     * You can use it for resolving relative path from config dir.
     * @returns {string|undefined}
     */
    getConfigBaseDir: () => string | undefined;
}
