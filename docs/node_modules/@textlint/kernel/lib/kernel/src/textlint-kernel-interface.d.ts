import { TxtNode, TxtNodeType } from "@textlint/ast-node-types";
import { SeverityLevelTypes } from "./shared/type/SeverityLevel";
import RuleContext from "./core/rule-context";
import FilterRuleContext from "./core/filter-rule-context";
/**
 * Rule reporter function
 */
export declare type TextlintRuleReporter = (context: Readonly<RuleContext>, options?: TextlintRuleOptions) => {
    [P in TxtNodeType]?: (node: TxtNode) => void | Promise<any>;
};
export declare type TextlintFixableRuleModule = {
    linter: TextlintRuleReporter;
    fixer: TextlintRuleReporter;
};
/**
 * module.export = reporter | { linter, fixer }
 */
export declare type TextlintRuleModule = TextlintRuleReporter | TextlintFixableRuleModule;
/**
 * Filter rule reporter function
 */
export declare type TextlintFilterRuleReporter = (context: Readonly<FilterRuleContext>, options?: TextlintFilterRuleOptions) => {
    [P in TxtNodeType]?: (node: TxtNode) => void | Promise<any>;
};
/**
 * textlint rule option values is object or boolean.
 * if this option value is false, disable the rule.
 */
export declare type TextlintRuleOptions = {
    [index: string]: any;
    severity?: SeverityLevelTypes;
};
/**
 * textlint filter rule option values is object or boolean.
 * if this option value is false, disable the filter rule.
 */
export declare type TextlintFilterRuleOptions = {
    [index: string]: any;
};
/**
 * textlint plugin option values is object or boolean.
 * if this option value is false, disable the plugin.
 */
export declare type TextlintPluginOptions = {
    [index: string]: any;
};
export interface TextlintKernelConstructorOptions {
    /**
     * Suppress messages of severity:warning and severity:info
     */
    quiet?: boolean;
}
export interface TextlintConfigObject {
    rulePaths?: string[];
    extensions?: string[];
    formatterName?: string;
    plugins?: string[];
    rulesBaseDirectory?: string;
    configFile?: string;
    disabledRules?: string[];
    presets?: string[];
    rulesConfig?: Object;
    /**
     * quite options
     */
    quiet?: boolean;
}
export interface TextlintPluginProcessorConstructor extends Function {
    new (options?: TextlintPluginOptions): TextlintPluginProcessor;
    /**
     * Should defined `availableExtensions()` as instance method instead of static method.
     * @deprecated textlint@11+
     * @see https://github.com/textlint/textlint/issues/531
     */
    availableExtensions?(): Array<string>;
}
export declare class TextlintPluginProcessor {
    constructor(options?: TextlintPluginOptions);
    /**
     * Return available extensions for this plugin.
     * This extension should start with `.`(dot).
     * Example is [".md", ".mkd"]
     */
    availableExtensions(): Array<string>;
    processor(extension: string): {
        preProcess(text: string, filePath?: string): TxtNode;
        postProcess(messages: Array<any>, filePath?: string): {
            messages: Array<any>;
            filePath: string;
        };
    };
}
export interface TextlintPluginCreator {
    Processor: TextlintPluginProcessorConstructor;
}
export interface TextlintKernelPlugin {
    pluginId: string;
    plugin: TextlintPluginCreator;
    options?: TextlintPluginOptions | boolean;
}
export interface TextlintKernelRule {
    ruleId: string;
    rule: TextlintRuleModule;
    options?: TextlintRuleOptions | boolean;
}
export interface TextlintKernelFilterRule {
    ruleId: string;
    rule: TextlintFilterRuleReporter;
    options?: TextlintFilterRuleOptions | boolean;
}
export interface TextlintKernelOptions {
    ext: string;
    filePath?: string;
    plugins?: TextlintKernelPlugin[];
    rules?: TextlintKernelRule[];
    filterRules?: TextlintKernelFilterRule[];
    configBaseDir?: string;
}
export interface TextlintFixCommand {
    text: string;
    range: [number, number];
}
export interface TextlintMessage {
    type: string;
    ruleId: string;
    message: string;
    data?: any;
    fix?: TextlintFixCommand;
    line: number;
    column: number;
    index: number;
    severity: number;
}
export interface TextlintResult {
    filePath: string;
    messages: TextlintMessage[];
}
export interface TextlintFixResult {
    filePath: string;
    output: string;
    messages: TextlintMessage[];
    applyingMessages: TextlintMessage[];
    remainingMessages: TextlintMessage[];
}
