{"version":3,"sources":["../src/markdown-parser.js"],"names":["traverse","require","ASTNodeTypes","StructuredSource","debug","SyntaxMap","unified","remarkParse","frontmatter","remark","use","parse","text","ast","src","forEach","node","notLeaf","type","replacedType","position","positionCompensated","start","line","column","end","range","locationToRange","loc","raw","slice","Object","defineProperty","enumerable","configurable","writable","value","module","exports","Syntax"],"mappings":"AAAA;AACA;;AACA,IAAMA,WAAWC,QAAQ,UAAR,CAAjB;;eACyBA,QAAQ,0BAAR,C;IAAjBC,Y,YAAAA,Y;;AACR,IAAMC,mBAAmBF,QAAQ,mBAAR,CAAzB;AACA,IAAMG,QAAQH,QAAQ,OAAR,EAAiB,2BAAjB,CAAd;AACA,IAAMI,YAAYJ,QAAQ,+BAAR,CAAlB;AACA,IAAMK,UAAUL,QAAQ,SAAR,CAAhB;AACA,IAAMM,cAAcN,QAAQ,cAAR,CAApB;AACA,IAAMO,cAAcP,QAAQ,oBAAR,CAApB;AACA,IAAMQ,SAASH,UACVI,GADU,CACNH,WADM,EAEVG,GAFU,CAENF,WAFM,EAEO,CAAC,MAAD,CAFP,CAAf;AAGA;;;;;AAKA,SAASG,KAAT,CAAeC,IAAf,EAAqB;AACjB,QAAMC,MAAMJ,OAAOE,KAAP,CAAaC,IAAb,CAAZ;AACA,QAAME,MAAM,IAAIX,gBAAJ,CAAqBS,IAArB,CAAZ;AACAZ,aAASa,GAAT,EAAcE,OAAd,CAAsB,UAASC,IAAT,EAAe;AACjC;AACA,YAAI,KAAKC,OAAT,EAAkB;AACd,gBAAID,KAAKE,IAAT,EAAe;AACX,oBAAMC,eAAed,UAAUW,KAAKE,IAAf,CAArB;AACA,oBAAI,CAACC,YAAL,EAAmB;AACff,8CAAwBe,YAAxB,sBAAqDH,KAAKE,IAA1D;AACH,iBAFD,MAEO;AACHF,yBAAKE,IAAL,GAAYC,YAAZ;AACH;AACJ;AACD;AACA,gBAAIH,KAAKI,QAAT,EAAmB;AACf,oBAAMA,WAAWJ,KAAKI,QAAtB;AACA,oBAAMC,sBAAsB;AACxBC,2BAAO,EAAEC,MAAMH,SAASE,KAAT,CAAeC,IAAvB,EAA6BC,QAAQJ,SAASE,KAAT,CAAeE,MAAf,GAAwB,CAA7D,EADiB;AAExBC,yBAAK,EAAEF,MAAMH,SAASK,GAAT,CAAaF,IAArB,EAA2BC,QAAQJ,SAASK,GAAT,CAAaD,MAAb,GAAsB,CAAzD;AAFmB,iBAA5B;AAIA,oBAAME,QAAQZ,IAAIa,eAAJ,CAAoBN,mBAApB,CAAd;AACAL,qBAAKY,GAAL,GAAWP,mBAAX;AACAL,qBAAKU,KAAL,GAAaA,KAAb;AACAV,qBAAKa,GAAL,GAAWjB,KAAKkB,KAAL,CAAWJ,MAAM,CAAN,CAAX,EAAqBA,MAAM,CAAN,CAArB,CAAX;AACA;AACAK,uBAAOC,cAAP,CAAsBhB,IAAtB,EAA4B,UAA5B,EAAwC;AACpCiB,gCAAY,KADwB;AAEpCC,kCAAc,KAFsB;AAGpCC,8BAAU,KAH0B;AAIpCC,2BAAOhB;AAJ6B,iBAAxC;AAMH;AACJ;AACJ,KA/BD;AAgCA,WAAOP,GAAP;AACH;AACDwB,OAAOC,OAAP,GAAiB;AACb3B,gBADa;AAEb4B,YAAQrC;AAFK,CAAjB","file":"markdown-parser.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nconst traverse = require(\"traverse\");\nconst { ASTNodeTypes } = require(\"@textlint/ast-node-types\");\nconst StructuredSource = require(\"structured-source\");\nconst debug = require(\"debug\")(\"@textlint/markdown-to-ast\");\nconst SyntaxMap = require(\"./mapping/markdown-syntax-map\");\nconst unified = require(\"unified\");\nconst remarkParse = require(\"remark-parse\");\nconst frontmatter = require(\"remark-frontmatter\");\nconst remark = unified()\n    .use(remarkParse)\n    .use(frontmatter, [\"yaml\"]);\n/**\n * parse markdown text and return ast mapped location info.\n * @param {string} text\n * @returns {TxtNode}\n */\nfunction parse(text) {\n    const ast = remark.parse(text);\n    const src = new StructuredSource(text);\n    traverse(ast).forEach(function(node) {\n        // eslint-disable-next-line no-invalid-this\n        if (this.notLeaf) {\n            if (node.type) {\n                const replacedType = SyntaxMap[node.type];\n                if (!replacedType) {\n                    debug(`replacedType : ${replacedType} , node.type: ${node.type}`);\n                } else {\n                    node.type = replacedType;\n                }\n            }\n            // map `range`, `loc` and `raw` to node\n            if (node.position) {\n                const position = node.position;\n                const positionCompensated = {\n                    start: { line: position.start.line, column: position.start.column - 1 },\n                    end: { line: position.end.line, column: position.end.column - 1 }\n                };\n                const range = src.locationToRange(positionCompensated);\n                node.loc = positionCompensated;\n                node.range = range;\n                node.raw = text.slice(range[0], range[1]);\n                // Compatible for https://github.com/wooorm/unist, but hidden\n                Object.defineProperty(node, \"position\", {\n                    enumerable: false,\n                    configurable: false,\n                    writable: false,\n                    value: position\n                });\n            }\n        }\n    });\n    return ast;\n}\nmodule.exports = {\n    parse,\n    Syntax: ASTNodeTypes\n};\n"]}