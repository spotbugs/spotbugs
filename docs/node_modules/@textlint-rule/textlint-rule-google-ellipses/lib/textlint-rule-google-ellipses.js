// MIT Â© 2017 azu
"use strict";

var _textlintReportHelperForGooglePreset = require("@textlint-rule/textlint-report-helper-for-google-preset");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var DocumentURL = "https://developers.google.com/style/ellipses";
var report = function report(context) {
    var Syntax = context.Syntax,
        RuleError = context.RuleError,
        getSource = context.getSource,
        fixer = context.fixer,
        report = context.report;

    var dictionaries = [
    // NG: Suspension points
    {
        pattern: / \.\.\. (.*?) \.\.\. /g,
        test: function test(_ref) {
            var captures = _ref.captures;

            // if includes punctuation mark, ignore it
            return !/[!?.]/.test(captures[0]);
        },
        message: function message() {
            return "Disallow to use ellipses as suspension points." + "\n" + "https://developers.google.com/style/ellipses#suspension-points";
        }
    },
    // NG: in beginning or end of the text.
    {
        pattern: /"\s*?\.\.\./g,
        message: function message() {
            return "Disallow to use ellipses in beginning of the text" + "\n" + "https://developers.google.com/style/ellipses#how-to-use-ellipses";
        }
    }, {
        pattern: /\.\.\.\s*?"/g,
        message: function message() {
            return "Disallow to use ellipses in end of the text" + "\n" + "https://developers.google.com/style/ellipses#how-to-use-ellipses";
        }
    },
    // space
    {
        pattern: /(\w+)\.\.\.(\w+)/g,
        replace: function replace(_ref2) {
            var captures = _ref2.captures;

            return captures[0] + " ... " + captures[1];
        },
        message: function message() {
            return "Insert one space before and after the ellipsis" + "\n" + DocumentURL;
        }
    }];

    return _defineProperty({}, Syntax.Paragraph, function (node) {
        return (0, _textlintReportHelperForGooglePreset.paragraphReporter)({
            Syntax: Syntax,
            node: node,
            dictionaries: dictionaries,
            report: report,
            getSource: getSource,
            RuleError: RuleError,
            fixer: fixer
        });
    });
};
module.exports = {
    linter: report,
    fixer: report
};
//# sourceMappingURL=textlint-rule-google-ellipses.js.map