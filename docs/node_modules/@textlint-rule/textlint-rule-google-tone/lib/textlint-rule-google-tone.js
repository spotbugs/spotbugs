// MIT Â© 2017 azu
"use strict";

var _textlintReportHelperForGooglePreset = require("@textlint-rule/textlint-report-helper-for-google-preset");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var report = function report(context) {
    // Politeness and use of "please"
    // https://developers.google.com/style/tone#politeness-and-use-of-please
    var dictionaries = [{
        pattern: /To (\w+) (.*), please (\w+)/,
        test: function test(_ref) {
            var all = _ref.all,
                captures = _ref.captures;

            return (/^VB/.test((0, _textlintReportHelperForGooglePreset.getPos)(all, captures[0])) && /^VB|NN/.test((0, _textlintReportHelperForGooglePreset.getPos)(all, captures[2]))
            );
        },
        replace: function replace(_ref2) {
            var captures = _ref2.captures;

            return "To " + captures[0] + " " + captures[1] + ", " + captures[2];
        },
        message: function message() {
            return "using \"please\" in a set of instructions is overdoing the politeness.\n\n        URL: https://developers.google.com/style/tone#politeness-and-use-of-please";
        }
    }, {
        pattern: /(For more \w+), please (\w+)/,
        test: function test(_ref3) {
            var all = _ref3.all,
                captures = _ref3.captures;

            return (/^VB/.test((0, _textlintReportHelperForGooglePreset.getPos)(all, captures[1]))
            );
        },
        replace: function replace(_ref4) {
            var captures = _ref4.captures;

            return captures[0] + ", " + captures[1];
        },
        message: function message() {
            return "using \"please\" in a set of instructions is overdoing the politeness.\n\n        URL: https://developers.google.com/style/tone#politeness-and-use-of-please";
        }
    }];

    var Syntax = context.Syntax,
        RuleError = context.RuleError,
        getSource = context.getSource,
        fixer = context.fixer,
        report = context.report;

    return _defineProperty({}, Syntax.Paragraph, function (node) {
        (0, _textlintReportHelperForGooglePreset.paragraphReporter)({
            Syntax: Syntax,
            node: node,
            dictionaries: dictionaries,
            report: report,
            getSource: getSource,
            RuleError: RuleError,
            fixer: fixer
        });
    });
};
module.exports = {
    linter: report,
    fixer: report
};
//# sourceMappingURL=textlint-rule-google-tone.js.map