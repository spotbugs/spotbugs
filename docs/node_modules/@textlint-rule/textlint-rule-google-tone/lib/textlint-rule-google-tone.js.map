{"version":3,"sources":["../src/textlint-rule-google-tone.js"],"names":["report","dictionaries","pattern","test","all","captures","replace","message","Syntax","context","RuleError","getSource","fixer","Paragraph","node","module","exports","linter"],"mappings":"AAAA;AACA;;AACA;;;;AAEA,IAAMA,SAAS,yBAAW;AACtB;AACA;AACA,QAAMC,eAAe,CACjB;AACIC,iBAAS,6BADb;AAEIC,cAAM,oBAAuB;AAAA,gBAApBC,GAAoB,QAApBA,GAAoB;AAAA,gBAAfC,QAAe,QAAfA,QAAe;;AACzB,mBAAO,OAAMF,IAAN,CAAW,iDAAOC,GAAP,EAAYC,SAAS,CAAT,CAAZ,CAAX,KAAwC,SAASF,IAAT,CAAc,iDAAOC,GAAP,EAAYC,SAAS,CAAT,CAAZ,CAAd;AAA/C;AACH,SAJL;AAKIC,iBAAS,wBAAkB;AAAA,gBAAfD,QAAe,SAAfA,QAAe;;AACvB,2BAAaA,SAAS,CAAT,CAAb,SAA4BA,SAAS,CAAT,CAA5B,UAA4CA,SAAS,CAAT,CAA5C;AACH,SAPL;AAQIE,iBAAS;AAAA;AAAA;AARb,KADiB,EAYjB;AACIL,iBAAS,8BADb;AAEIC,cAAM,qBAAuB;AAAA,gBAApBC,GAAoB,SAApBA,GAAoB;AAAA,gBAAfC,QAAe,SAAfA,QAAe;;AACzB,mBAAO,OAAMF,IAAN,CAAW,iDAAOC,GAAP,EAAYC,SAAS,CAAT,CAAZ,CAAX;AAAP;AACH,SAJL;AAKIC,iBAAS,wBAAkB;AAAA,gBAAfD,QAAe,SAAfA,QAAe;;AACvB,mBAAUA,SAAS,CAAT,CAAV,UAA0BA,SAAS,CAAT,CAA1B;AACH,SAPL;AAQIE,iBAAS;AAAA;AAAA;AARb,KAZiB,CAArB;;AAHsB,QA4BdC,MA5Bc,GA4BkCC,OA5BlC,CA4BdD,MA5Bc;AAAA,QA4BNE,SA5BM,GA4BkCD,OA5BlC,CA4BNC,SA5BM;AAAA,QA4BKC,SA5BL,GA4BkCF,OA5BlC,CA4BKE,SA5BL;AAAA,QA4BgBC,KA5BhB,GA4BkCH,OA5BlC,CA4BgBG,KA5BhB;AAAA,QA4BuBZ,MA5BvB,GA4BkCS,OA5BlC,CA4BuBT,MA5BvB;;AA6BtB,+BACKQ,OAAOK,SADZ,YACuBC,IADvB,EAC6B;AACrB,oEAAkB;AACdN,0BADc;AAEdM,sBAFc;AAGdb,sCAHc;AAIdD,0BAJc;AAKdW,gCALc;AAMdD,gCANc;AAOdE;AAPc,SAAlB;AASH,KAXL;AAaH,CA1CD;AA2CAG,OAAOC,OAAP,GAAiB;AACbC,YAAQjB,MADK;AAEbY,WAAOZ;AAFM,CAAjB","file":"textlint-rule-google-tone.js","sourcesContent":["// MIT Â© 2017 azu\n\"use strict\";\nimport { paragraphReporter, getPos } from \"@textlint-rule/textlint-report-helper-for-google-preset\";\n\nconst report = context => {\n    // Politeness and use of \"please\"\n    // https://developers.google.com/style/tone#politeness-and-use-of-please\n    const dictionaries = [\n        {\n            pattern: /To (\\w+) (.*), please (\\w+)/,\n            test: ({ all, captures }) => {\n                return /^VB/.test(getPos(all, captures[0])) && /^VB|NN/.test(getPos(all, captures[2]));\n            },\n            replace: ({ captures }) => {\n                return `To ${captures[0]} ${captures[1]}, ${captures[2]}`;\n            },\n            message: () => `using \"please\" in a set of instructions is overdoing the politeness.\\n\n        URL: https://developers.google.com/style/tone#politeness-and-use-of-please`\n        },\n        {\n            pattern: /(For more \\w+), please (\\w+)/,\n            test: ({ all, captures }) => {\n                return /^VB/.test(getPos(all, captures[1]));\n            },\n            replace: ({ captures }) => {\n                return `${captures[0]}, ${captures[1]}`;\n            },\n            message: () => `using \"please\" in a set of instructions is overdoing the politeness.\\n\n        URL: https://developers.google.com/style/tone#politeness-and-use-of-please`\n        }\n    ];\n\n    const { Syntax, RuleError, getSource, fixer, report } = context;\n    return {\n        [Syntax.Paragraph](node) {\n            paragraphReporter({\n                Syntax,\n                node,\n                dictionaries,\n                report,\n                getSource,\n                RuleError,\n                fixer\n            });\n        }\n    };\n};\nmodule.exports = {\n    linter: report,\n    fixer: report\n};\n"]}