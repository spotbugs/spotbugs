{"version":3,"sources":["../src/textlint-rule-google-articles.js"],"names":["DocumentURL","isCapital","test","text","report","context","options","forceA","Array","isArray","a","forceAn","an","classifyOptions","dictionaries","pattern","captures","result","type","replace","message","reason","Syntax","RuleError","getSource","fixer","Str","node","module","exports","linter"],"mappings":"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","file":"textlint-rule-google-articles.js","sourcesContent":["// MIT Â© 2017 azu\n\"use strict\";\nimport { shouldIgnoreNodeOfStrNode, strReporter } from \"@textlint-rule/textlint-report-helper-for-google-preset\";\nimport { classifyArticle } from \"english-article-classifier\";\n\nconst DocumentURL = \"https://developers.google.com/style/articles\";\nconst isCapital = text => {\n    return /^[A-Z]/.test(text);\n};\nconst report = (context, options = {}) => {\n    const forceA = Array.isArray(options.a) ? options.a : [];\n    const forceAn = Array.isArray(options.an) ? options.an : [];\n    const classifyOptions = {\n        forceA,\n        forceAn\n    };\n    const dictionaries = [\n        {\n            pattern: /\\b(a) ([\\w.-]+)\\b/i,\n            test: ({ captures }) => {\n                const result = classifyArticle(captures[1], classifyOptions);\n                return result.type === \"an\";\n            },\n            replace: ({ captures }) => {\n                const an = isCapital(captures[0]) ? \"An\" : \"an\";\n                return `${an} ${captures[1]}`;\n            },\n            message: ({ captures }) => {\n                const result = classifyArticle(captures[1], classifyOptions);\n                return `Should be begin with \"an\"` + \"\\nReason: \" + result.reason + \"\\n\" + DocumentURL;\n            }\n        },\n        {\n            pattern: /\\b(an) ([\\w.-]+)\\b/i,\n            test: ({ captures }) => {\n                const result = classifyArticle(captures[1], classifyOptions);\n                return result.type === \"a\";\n            },\n            replace: ({ captures }) => {\n                const a = isCapital(captures[0]) ? \"A\" : \"a\";\n                return `${a} ${captures[1]}`;\n            },\n            message: ({ captures }) => {\n                const result = classifyArticle(captures[1], classifyOptions);\n                return `Should be begin with \"a\"` + \"\\nReason: \" + result.reason + \"\\n\" + DocumentURL;\n            }\n        }\n    ];\n    const { Syntax, RuleError, getSource, fixer, report } = context;\n    return {\n        [Syntax.Str](node) {\n            if (shouldIgnoreNodeOfStrNode(node, context)) {\n                return;\n            }\n            return strReporter({\n                node,\n                dictionaries,\n                report,\n                getSource,\n                RuleError,\n                fixer\n            });\n        }\n    };\n};\nmodule.exports = {\n    linter: report,\n    fixer: report\n};\n"]}