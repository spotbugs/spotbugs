// MIT Â© 2017 azu
"use strict";

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var _require = require("textlint-rule-helper"),
    RuleHelper = _require.RuleHelper,
    IgnoreNodeManager = _require.IgnoreNodeManager;

var StringSource = require("textlint-util-to-string");

var _require2 = require("sentence-splitter"),
    split = _require2.split,
    SentenceSyntax = _require2.Syntax;

var DocumentURL = "https://developers.google.com/style/sentence-spacing";
var report = function report(context) {
    var Syntax = context.Syntax,
        RuleError = context.RuleError,
        fixer = context.fixer,
        report = context.report;

    var helper = new RuleHelper(context);
    // Ignore following pattern
    // Paragraph > Link Code Html ...
    return _defineProperty({}, Syntax.Paragraph, function (node) {
        if (helper.isChildNode(node, [Syntax.Image, Syntax.BlockQuote, Syntax.Emphasis])) {
            return;
        }
        var ignoreNodeManager = new IgnoreNodeManager();
        ignoreNodeManager.ignoreChildrenByTypes(node, [Syntax.Code, Syntax.Link, Syntax.BlockQuote, Syntax.Html]);
        var source = new StringSource(node);
        var sourceText = source.toString();
        var sentences = split(sourceText);
        /**
         * @type {[{index:number,indent:number]}
         */
        var spaces = [{
            index: 0,
            indent: 0
        }];
        var getSpace = function getSpace() {
            return spaces[spaces.length - 1];
        };
        /**
         * create and set next space
         * @param {number} index next start index
         */
        var nextSpace = function nextSpace(index) {
            spaces.push({
                index: index,
                indent: 0
            });
        };
        var setSpace = function setSpace(value) {
            spaces[spaces.length - 1] = value;
        };
        var incrementCurrentSpace = function incrementCurrentSpace() {
            var space = getSpace();
            setSpace({
                index: space.index,
                indent: space.indent + 1
            });
        };
        // counting
        sentences.forEach(function (sentenceOrWhiteSpace) {
            if (sentenceOrWhiteSpace.type === SentenceSyntax.WhiteSpace && sentenceOrWhiteSpace.value === " ") {
                return incrementCurrentSpace();
            }
            nextSpace(sentenceOrWhiteSpace.range[1]);
        });

        // Report based on space
        spaces.filter(function (space) {
            return space.indent >= 2;
        }).filter(function (space) {
            // Allow to write first space and last space.
            // This rule only treat "space between sentences"
            var isFirstSpace = space.index === 0;
            var isLastSpace = space.index + space.indent === sentences[sentences.length - 1].range[1];
            if (isFirstSpace) {
                return false;
            } else if (isLastSpace) {
                return false;
            }
            var originalIndex = source.originalIndexFromIndex(space.index);
            // if the error is ignored, don't report
            if (ignoreNodeManager.isIgnoredIndex(originalIndex)) {
                return false;
            }
            // other should report
            return true;
        }).forEach(function (space) {
            var originalIndex = source.originalIndexFromIndex(space.index);
            var message = "Leave only one space between sentences. Number of space: " + space.indent + "\n" + DocumentURL;
            report(node, new RuleError(message, {
                index: originalIndex,
                fix: fixer.replaceTextRange([originalIndex, originalIndex + space.indent], " ")
            }));
        });
    });
};
module.exports = {
    linter: report,
    fixer: report
};
//# sourceMappingURL=textlint-rule-google-sentence-spacing.js.map