"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// MIT Â© 2017 azu
var en_pos_1 = require("en-pos");
var nlcst_parse_english_1 = require("nlcst-parse-english");
var toString = require("nlcst-to-string");
var findUnistNode = require("unist-util-find");
var parser = new nlcst_parse_english_1.EnglishParser();
// Additional lexicon
var lexicon = require("en-lexicon");
lexicon.extend({
    browser: "NN"
});
/**
 * Pos Type
 * @see https://github.com/finnlp/en-pos
 */
exports.PosType = {
    Noun: "NN",
    PluralNoun: "NNS",
    ProperNoun: "NNP",
    PluralProperNoun: "NNPS",
    BaseFormVerb: "VB",
    PresentFormVerb: "VBP",
    PresentForm3RdPerson: "VBZ",
    GerundFormVerb: "VBG",
    PastTenseVerb: "VBD",
    PastParticipleVerb: "VBN",
    ModalVerb: "MD",
    Adjective: "JJ",
    ComparativeAdjective: "JJR",
    SuperlativeAdjective: "JJS",
    Adverb: "RB",
    ComparativeAdverb: "RBR",
    SuperlativeAdverb: "RBS",
    Determiner: "DT",
    Predeterminer: "PDT",
    PersonalPronoun: "PRP",
    PossessivePronoun: "PRP$",
    PossessiveEnding: "POS",
    Preposition: "IN",
    Particle: "PR",
    To: "TO",
    WhDeterminer: "WDT",
    WhPronoun: "WP",
    WhPossessive: "WP$",
    WhAdverb: "WRB",
    ExpletiveThere: "EX",
    CoordinatingConjugation: "CC",
    CardinalNumbers: "CD",
    ListItemMarker: "LS",
    Interjection: "UH",
    ForeignWords: "FW",
    Comma: ",",
    MidSentPunct: ":",
    SentFinalPunct: ".",
    LeftParenthesis: "(",
    RightParenthesis: ")",
    PoundSign: "#",
    CurrencySymbols: "$",
    OtherSymbols: "SYM",
    EmojisEmoticons: "EM"
};
exports.getPosFromSingleWord = function (word) {
    var tags = new en_pos_1.Tag([word])
        .initial() // initial dictionary and pattern based tagging
        .smooth().tags; // further context based smoothing
    return tags[0];
};
exports.getPos = function (text, word) {
    var CST = parser.parse(text);
    var node = findUnistNode(CST, function (node) {
        if (node.type === "WordNode") {
            return toString(node) === word;
        }
        return false;
    });
    if (!node) {
        return "";
    }
    else if (node.data && node.data.pos) {
        return node.data.pos;
    }
    return "";
};
/**
 * Return true if aPosType's group is same with bPosType's group.
 * @param {PosType} aPosType
 * @param {PosType} bPosType
 * @returns {boolean}
 */
exports.isSameGroupPosType = function (aPosType, bPosType) {
    // NNS vs. NN => true
    return aPosType.slice(0, 2) === bPosType.slice(0, 2);
};
//# sourceMappingURL=en-pos-util.js.map