"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// MIT Â© 2017 azu
var match_test_replace_1 = require("match-test-replace");
var _a = require("textlint-rule-helper"), RuleHelper = _a.RuleHelper, IgnoreNodeManager = _a.IgnoreNodeManager;
var StringSource = require("textlint-util-to-string");
var en_pos_util_1 = require("./en-pos-util");
exports.getPos = en_pos_util_1.getPos;
exports.getPosFromSingleWord = en_pos_util_1.getPosFromSingleWord;
exports.PosType = en_pos_util_1.PosType;
exports.isSameGroupPosType = en_pos_util_1.isSameGroupPosType;
// str
exports.shouldIgnoreNodeOfStrNode = function (node, context) {
    var helper = new RuleHelper(context);
    var Syntax = context.Syntax;
    return helper.isChildNode(node, [Syntax.Link, Syntax.Image, Syntax.BlockQuote, Syntax.Emphasis]);
};
exports.strReporter = function (_a) {
    var node = _a.node, dictionaries = _a.dictionaries, report = _a.report, RuleError = _a.RuleError, fixer = _a.fixer, getSource = _a.getSource;
    var text = getSource(node);
    dictionaries.forEach(function (dict) {
        var matchTestReplaceReturn = match_test_replace_1.matchTestReplace(text, dict);
        if (matchTestReplaceReturn.ok === false) {
            return;
        }
        matchTestReplaceReturn.results.forEach(function (result) {
            var index = result.index;
            if (!result.replace) {
                report(node, new RuleError(result.message, {
                    index: index
                }));
                return;
            }
            var endIndex = result.index + result.match.length;
            var range = [index, endIndex];
            report(node, new RuleError(result.message, {
                index: index,
                fix: fixer.replaceTextRange(range, result.replace)
            }));
        });
    });
};
exports.paragraphReporter = function (_a) {
    var Syntax = _a.Syntax, node = _a.node, dictionaries = _a.dictionaries, getSource = _a.getSource, report = _a.report, RuleError = _a.RuleError, fixer = _a.fixer;
    var originalText = getSource(node);
    var source = new StringSource(node);
    var text = source.toString();
    var ignoreNodeManager = new IgnoreNodeManager();
    // Ignore following pattern
    // Paragraph > Link Code Html ...
    ignoreNodeManager.ignoreChildrenByTypes(node, [Syntax.Code, Syntax.Link, Syntax.BlockQuote, Syntax.Html]);
    dictionaries.forEach(function (dict) {
        var matchTestReplaceReturn = match_test_replace_1.matchTestReplace(text, dict);
        if (matchTestReplaceReturn.ok === false) {
            return;
        }
        matchTestReplaceReturn.results.forEach(function (result) {
            // relative index
            var indexFromNode = source.originalIndexFromIndex(result.index);
            var endIndexFromNode = source.originalIndexFromIndex(result.index + result.match.length);
            var rangeFromNode = [indexFromNode, endIndexFromNode];
            // absolute index
            var absoluteRange = [node.range[0] + rangeFromNode[0], node.range[1] + rangeFromNode[1]];
            // if the error is ignored, don't report
            if (ignoreNodeManager.isIgnoredRange(absoluteRange)) {
                return;
            }
            if (!result.replace) {
                report(node, new RuleError(result.message, {
                    index: indexFromNode
                }));
                return;
            }
            var beforeText = originalText.slice(indexFromNode, endIndexFromNode);
            if (beforeText !== result.match) {
                report(node, new RuleError(result.message, {
                    index: indexFromNode
                }));
                return;
            }
            report(node, new RuleError(result.message, {
                index: indexFromNode,
                fix: fixer.replaceTextRange(rangeFromNode, result.replace)
            }));
        });
    });
};
//# sourceMappingURL=textlint-report-helper-for-google-preset.js.map