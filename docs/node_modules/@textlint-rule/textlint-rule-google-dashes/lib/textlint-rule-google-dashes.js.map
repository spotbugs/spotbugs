{"version":3,"sources":["../src/textlint-rule-google-dashes.js"],"names":["require","RuleHelper","DocumentURL","report","Syntax","context","RuleError","getSource","fixer","dictionaries","pattern","test","all","captures","dashes","afterText","includes","afterWord","afterWordPos","PosType","WhDeterminer","WhPronoun","Determiner","pos","Noun","replace","message","helper","Str","node","isChildNode","Link","Image","BlockQuote","Emphasis","module","exports","linter"],"mappings":"AAAA;AACA;;AACA;;;;eAEuBA,QAAQ,sBAAR,C;IAAfC,U,YAAAA,U;;AACR,IAAMC,cAAc,4CAApB;AACA,IAAMC,SAAS,yBAAW;AAAA,QACdC,MADc,GACkCC,OADlC,CACdD,MADc;AAAA,QACNE,SADM,GACkCD,OADlC,CACNC,SADM;AAAA,QACKC,SADL,GACkCF,OADlC,CACKE,SADL;AAAA,QACgBC,KADhB,GACkCH,OADlC,CACgBG,KADhB;AAAA,QACuBL,MADvB,GACkCE,OADlC,CACuBF,MADvB;AAEtB;;AACA,QAAMM,eAAe,CACjB;AACI;AACA;AACA;AACAC,iBAAS,qCAJb;AAKIC,cAAM,oBAAuB;AAAA,gBAApBC,GAAoB,QAApBA,GAAoB;AAAA,gBAAfC,QAAe,QAAfA,QAAe;;AACzB,gBAAMC,SAASD,SAAS,CAAT,CAAf;AACA,gBAAME,YAAYF,SAAS,CAAT,CAAlB;AACA;AACA;AACA,gBAAIE,UAAUC,QAAV,CAAmBF,MAAnB,CAAJ,EAAgC;AAC5B,uBAAO,KAAP;AACH;AACD,gBAAMG,YAAYJ,SAAS,CAAT,CAAlB;AACA,gBAAMK,eAAe,iDAAON,GAAP,EAAYK,SAAZ,CAArB;AACA;AACA;AACA,gBACI,EACIC,iBAAiBC,6CAAQC,YAAzB,IACAF,iBAAiBC,6CAAQE,SADzB,IAEAH,iBAAiBC,6CAAQG,UAH7B,CADJ,EAME;AACE,uBAAO,KAAP;AACH;AACD,gBAAMC,MAAM,iDAAOX,GAAP,EAAYC,SAAS,CAAT,CAAZ,CAAZ;AACA,mBAAOU,QAAQJ,6CAAQK,IAAvB;AACH,SA5BL;AA6BIC,iBAAS,wBAAkB;AAAA,gBAAfZ,QAAe,SAAfA,QAAe;;AACvB,mBAAUA,SAAS,CAAT,CAAV,UAA0BA,SAAS,CAAT,CAA1B;AACH,SA/BL;AAgCIa,iBAAS;AAAA,mBAAM,gDAAgD,IAAhD,GAAuDxB,WAA7D;AAAA;AAhCb,KADiB,EAmCjB;AACI;AACA;AACA;AACAQ,iBAAS,4BAJb;AAKIe,iBAAS,wBAAkB;AAAA,gBAAfZ,QAAe,SAAfA,QAAe;;AACvB,mBAAUA,SAAS,CAAT,CAAV,cAAyBA,SAAS,CAAT,CAAzB;AACH,SAPL;AAQIa,iBAAS;AAAA,mBAAM,8CAA8C,IAA9C,GAAqDxB,WAA3D;AAAA;AARb,KAnCiB,CAArB;;AA+CA,QAAMyB,SAAS,IAAI1B,UAAJ,CAAeI,OAAf,CAAf;AACA,+BACKD,OAAOwB,GADZ,YACiBC,IADjB,EACuB;AACf,YAAIF,OAAOG,WAAP,CAAmBD,IAAnB,EAAyB,CAACzB,OAAO2B,IAAR,EAAc3B,OAAO4B,KAArB,EAA4B5B,OAAO6B,UAAnC,EAA+C7B,OAAO8B,QAAtD,CAAzB,CAAJ,EAA+F;AAC3F;AACH;AACD;AACA;AACA;AACA,eAAO,sDAAY;AACfL,sBADe;AAEfpB,sCAFe;AAGfN,0BAHe;AAIfI,gCAJe;AAKfD,gCALe;AAMfE;AANe,SAAZ,CAAP;AAQH,KAhBL;AAkBH,CArED;AAsEA2B,OAAOC,OAAP,GAAiB;AACbC,YAAQlC,MADK;AAEbK,WAAOL;AAFM,CAAjB","file":"textlint-rule-google-dashes.js","sourcesContent":["// MIT © 2017 azu\n\"use strict\";\nimport { strReporter, getPos, PosType } from \"@textlint-rule/textlint-report-helper-for-google-preset\";\n\nconst { RuleHelper } = require(\"textlint-rule-helper\");\nconst DocumentURL = \"https://developers.google.com/style/dashes\";\nconst report = context => {\n    const { Syntax, RuleError, getSource, fixer, report } = context;\n    // Notes: the order is important when Apply fixes\n    const dictionaries = [\n        {\n            // Prefer colon to dash.\n            // Partial support:\n            // use colon instead of dash or hyphen\n            pattern: /((?:^.* )?(\\w+)) ([—-]) ((\\w+) .*)$/,\n            test: ({ all, captures }) => {\n                const dashes = captures[2];\n                const afterText = captures[3];\n                // OK:\n                // The food — which was delicious — reminded me of home.\n                if (afterText.includes(dashes)) {\n                    return false;\n                }\n                const afterWord = captures[4];\n                const afterWordPos = getPos(all, afterWord);\n                // example - This is a example\n                //           ^^^^\n                if (\n                    !(\n                        afterWordPos === PosType.WhDeterminer ||\n                        afterWordPos === PosType.WhPronoun ||\n                        afterWordPos === PosType.Determiner\n                    )\n                ) {\n                    return false;\n                }\n                const pos = getPos(all, captures[1]);\n                return pos === PosType.Noun;\n            },\n            replace: ({ captures }) => {\n                return `${captures[0]}: ${captures[3]}`;\n            },\n            message: () => \"Use colons(:) instead of dashes(-) in lists\" + \"\\n\" + DocumentURL\n        },\n        {\n            // use \"—\"(em dash) instead of \" - \"(hyphen)\n            // Notes: Allow to use hyphen for Ranges of numbers\n            // https://developers.google.com/style/numbers#ranges-of-numbers\n            pattern: /([a-zA-Z]+) - ([a-zA-Z]+)/g,\n            replace: ({ captures }) => {\n                return `${captures[0]}—${captures[1]}`;\n            },\n            message: () => 'Use \"—\"(em dash) instead of \" - \"(hyphen)' + \"\\n\" + DocumentURL\n        }\n    ];\n\n    const helper = new RuleHelper(context);\n    return {\n        [Syntax.Str](node) {\n            if (helper.isChildNode(node, [Syntax.Link, Syntax.Image, Syntax.BlockQuote, Syntax.Emphasis])) {\n                return;\n            }\n            // use colon instead of dash or hyphen can't work on Paragraph\n            // Because, replace `code` with wrong range...\n            // Temporary, we use strReporter\n            return strReporter({\n                node,\n                dictionaries,\n                report,\n                getSource,\n                RuleError,\n                fixer\n            });\n        }\n    };\n};\nmodule.exports = {\n    linter: report,\n    fixer: report\n};\n"]}