// MIT © 2017 azu
"use strict";

var _textlintReportHelperForGooglePreset = require("@textlint-rule/textlint-report-helper-for-google-preset");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var _require = require("textlint-rule-helper"),
    RuleHelper = _require.RuleHelper;

var DocumentURL = "https://developers.google.com/style/dashes";
var report = function report(context) {
    var Syntax = context.Syntax,
        RuleError = context.RuleError,
        getSource = context.getSource,
        fixer = context.fixer,
        report = context.report;
    // Notes: the order is important when Apply fixes

    var dictionaries = [{
        // Prefer colon to dash.
        // Partial support:
        // use colon instead of dash or hyphen
        pattern: /((?:^.* )?(\w+)) ([—-]) ((\w+) .*)$/,
        test: function test(_ref) {
            var all = _ref.all,
                captures = _ref.captures;

            var dashes = captures[2];
            var afterText = captures[3];
            // OK:
            // The food — which was delicious — reminded me of home.
            if (afterText.includes(dashes)) {
                return false;
            }
            var afterWord = captures[4];
            var afterWordPos = (0, _textlintReportHelperForGooglePreset.getPos)(all, afterWord);
            // example - This is a example
            //           ^^^^
            if (!(afterWordPos === _textlintReportHelperForGooglePreset.PosType.WhDeterminer || afterWordPos === _textlintReportHelperForGooglePreset.PosType.WhPronoun || afterWordPos === _textlintReportHelperForGooglePreset.PosType.Determiner)) {
                return false;
            }
            var pos = (0, _textlintReportHelperForGooglePreset.getPos)(all, captures[1]);
            return pos === _textlintReportHelperForGooglePreset.PosType.Noun;
        },
        replace: function replace(_ref2) {
            var captures = _ref2.captures;

            return captures[0] + ": " + captures[3];
        },
        message: function message() {
            return "Use colons(:) instead of dashes(-) in lists" + "\n" + DocumentURL;
        }
    }, {
        // use "—"(em dash) instead of " - "(hyphen)
        // Notes: Allow to use hyphen for Ranges of numbers
        // https://developers.google.com/style/numbers#ranges-of-numbers
        pattern: /([a-zA-Z]+) - ([a-zA-Z]+)/g,
        replace: function replace(_ref3) {
            var captures = _ref3.captures;

            return captures[0] + "\u2014" + captures[1];
        },
        message: function message() {
            return 'Use "—"(em dash) instead of " - "(hyphen)' + "\n" + DocumentURL;
        }
    }];

    var helper = new RuleHelper(context);
    return _defineProperty({}, Syntax.Str, function (node) {
        if (helper.isChildNode(node, [Syntax.Link, Syntax.Image, Syntax.BlockQuote, Syntax.Emphasis])) {
            return;
        }
        // use colon instead of dash or hyphen can't work on Paragraph
        // Because, replace `code` with wrong range...
        // Temporary, we use strReporter
        return (0, _textlintReportHelperForGooglePreset.strReporter)({
            node: node,
            dictionaries: dictionaries,
            report: report,
            getSource: getSource,
            RuleError: RuleError,
            fixer: fixer
        });
    });
};
module.exports = {
    linter: report,
    fixer: report
};
//# sourceMappingURL=textlint-rule-google-dashes.js.map