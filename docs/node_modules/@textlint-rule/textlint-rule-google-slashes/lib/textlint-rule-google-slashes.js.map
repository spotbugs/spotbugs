{"version":3,"sources":["../src/textlint-rule-google-slashes.js"],"names":["REPLACE_ABBR_DICT","report","dictionaries","pattern","test","captures","length","message","replace","match","Syntax","context","RuleError","getSource","fixer","Paragraph","node","module","exports","linter"],"mappings":"AAAA;AACA;;AACA;;;;AAEA,IAAMA,oBAAoB;AACtB,WAAO,SADe;AAEtB,UAAM,MAFgB;AAGtB,WAAO;AAHe,CAA1B;AAKA,IAAMC,SAAS,yBAAW;AACtB,QAAMC,eAAe;AACjB;AACA;AACIC,iBAAS,iCADb;AAEIC,cAAM,oBAAkB;AAAA,gBAAfC,QAAe,QAAfA,QAAe;;AACpB;AACA,mBAAOA,SAAS,CAAT,EAAYC,MAAZ,IAAsB,CAAtB,IAA2BD,SAAS,CAAT,EAAYC,MAAZ,IAAsB,CAAxD;AACH,SALL;AAMIC,iBAAS;AAAA;AAAA;AANb,KAFiB;AAYjB;;AAEA;AACA;AACA;AACIJ,iBAAS,mBADb;AAEII,iBAAS;AAAA;AAAA;AAFb,KAhBiB;AAsBjB;AACA;AACA;AACIJ,iBAAS,gCADb;AAEIK,iBAAS,wBAAkB;AAAA,gBAAfH,QAAe,SAAfA,QAAe;;AACvB,gBAAMI,QAAQJ,SAAS,CAAT,CAAd;AACA,gBAAI,CAACI,KAAL,EAAY;AACR;AACH;AACD,mBAAOT,kBAAkBS,KAAlB,IAA2B,GAAlC;AACH,SARL;AASIF,iBAAS;AAAA;AAAA;AATb,KAxBiB,CAArB;;AADsB,QAwCdG,MAxCc,GAwCkCC,OAxClC,CAwCdD,MAxCc;AAAA,QAwCNE,SAxCM,GAwCkCD,OAxClC,CAwCNC,SAxCM;AAAA,QAwCKC,SAxCL,GAwCkCF,OAxClC,CAwCKE,SAxCL;AAAA,QAwCgBC,KAxChB,GAwCkCH,OAxClC,CAwCgBG,KAxChB;AAAA,QAwCuBb,MAxCvB,GAwCkCU,OAxClC,CAwCuBV,MAxCvB;;AAyCtB,+BACKS,OAAOK,SADZ,YACuBC,IADvB,EAC6B;AACrB,eAAO,4DAAkB;AACrBN,0BADqB;AAErBM,sBAFqB;AAGrBd,sCAHqB;AAIrBD,0BAJqB;AAKrBY,gCALqB;AAMrBD,gCANqB;AAOrBE;AAPqB,SAAlB,CAAP;AASH,KAXL;AAaH,CAtDD;AAuDAG,OAAOC,OAAP,GAAiB;AACbC,YAAQlB,MADK;AAEba,WAAOb;AAFM,CAAjB","file":"textlint-rule-google-slashes.js","sourcesContent":["// MIT Â© 2017 azu\n\"use strict\";\nimport { paragraphReporter } from \"@textlint-rule/textlint-report-helper-for-google-preset\";\n\nconst REPLACE_ABBR_DICT = {\n    \"c/o\": \"care of\",\n    \"w/\": \"with\",\n    \"w/o\": \"without\"\n};\nconst report = context => {\n    const dictionaries = [\n        // Slashes with dates => other rule\n        {\n            pattern: /\\b([a-zA-Z-]+)\\/([a-zA-Z-]+)\\b/g,\n            test: ({ captures }) => {\n                // ignore abbreviations like \"c/w\"\n                return captures[0].length >= 2 && captures[1].length >= 2;\n            },\n            message: () => `Don't use slashes to separate alternatives.\nhttps://developers.google.com/style/slashes#slashes-with-alternatives\n`\n        },\n        // TODO: Slashes with file paths and URLs\n\n        // Slashes with fractions\n        // https://developers.google.com/style/slashes#slashes-with-alternatives\n        {\n            pattern: /\\b(\\d+)\\/(\\d+)\\b/g,\n            message: () => `Don't use slashes with fractions, as they can be ambiguous.\nhttps://developers.google.com/style/slashes#slashes-with-fractions\n`\n        },\n        // Slashes with abbreviations\n        // https://developers.google.com/style/slashes#slashes-with-abbreviations\n        {\n            pattern: /\\b(([a-zA-Z])\\/([a-zA-Z]?))\\s/g,\n            replace: ({ captures }) => {\n                const match = captures[0];\n                if (!match) {\n                    return;\n                }\n                return REPLACE_ABBR_DICT[match] + \" \";\n            },\n            message: () => `Don't use abbreviations that rely on slashes. Instead, spell the words out.\nhttps://developers.google.com/style/slashes#slashes-with-abbreviations\n`\n        }\n    ];\n\n    const { Syntax, RuleError, getSource, fixer, report } = context;\n    return {\n        [Syntax.Paragraph](node) {\n            return paragraphReporter({\n                Syntax,\n                node,\n                dictionaries,\n                report,\n                getSource,\n                RuleError,\n                fixer\n            });\n        }\n    };\n};\nmodule.exports = {\n    linter: report,\n    fixer: report\n};\n"]}