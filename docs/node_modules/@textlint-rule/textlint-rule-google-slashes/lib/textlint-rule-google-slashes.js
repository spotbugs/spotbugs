// MIT Â© 2017 azu
"use strict";

var _textlintReportHelperForGooglePreset = require("@textlint-rule/textlint-report-helper-for-google-preset");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var REPLACE_ABBR_DICT = {
    "c/o": "care of",
    "w/": "with",
    "w/o": "without"
};
var report = function report(context) {
    var dictionaries = [
    // Slashes with dates => other rule
    {
        pattern: /\b([a-zA-Z-]+)\/([a-zA-Z-]+)\b/g,
        test: function test(_ref) {
            var captures = _ref.captures;

            // ignore abbreviations like "c/w"
            return captures[0].length >= 2 && captures[1].length >= 2;
        },
        message: function message() {
            return "Don't use slashes to separate alternatives.\nhttps://developers.google.com/style/slashes#slashes-with-alternatives\n";
        }
    },
    // TODO: Slashes with file paths and URLs

    // Slashes with fractions
    // https://developers.google.com/style/slashes#slashes-with-alternatives
    {
        pattern: /\b(\d+)\/(\d+)\b/g,
        message: function message() {
            return "Don't use slashes with fractions, as they can be ambiguous.\nhttps://developers.google.com/style/slashes#slashes-with-fractions\n";
        }
    },
    // Slashes with abbreviations
    // https://developers.google.com/style/slashes#slashes-with-abbreviations
    {
        pattern: /\b(([a-zA-Z])\/([a-zA-Z]?))\s/g,
        replace: function replace(_ref2) {
            var captures = _ref2.captures;

            var match = captures[0];
            if (!match) {
                return;
            }
            return REPLACE_ABBR_DICT[match] + " ";
        },
        message: function message() {
            return "Don't use abbreviations that rely on slashes. Instead, spell the words out.\nhttps://developers.google.com/style/slashes#slashes-with-abbreviations\n";
        }
    }];

    var Syntax = context.Syntax,
        RuleError = context.RuleError,
        getSource = context.getSource,
        fixer = context.fixer,
        report = context.report;

    return _defineProperty({}, Syntax.Paragraph, function (node) {
        return (0, _textlintReportHelperForGooglePreset.paragraphReporter)({
            Syntax: Syntax,
            node: node,
            dictionaries: dictionaries,
            report: report,
            getSource: getSource,
            RuleError: RuleError,
            fixer: fixer
        });
    });
};
module.exports = {
    linter: report,
    fixer: report
};
//# sourceMappingURL=textlint-rule-google-slashes.js.map