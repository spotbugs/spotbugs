{"version":3,"sources":["../src/textlint-rule-google-colons.js"],"names":["DocumentURL","helpingVerbs","report","dictionaries","pattern","test","captures","helpingVerb","includes","message","nextWord","Syntax","context","RuleError","getSource","fixer","Paragraph","node","module","exports","linter"],"mappings":"AAAA;AACA;;AACA;;AAKA;;;;AAEA,IAAMA,cAAc,4CAApB;AACA;AACA;AACA;AACA;AACA,IAAMC,eAAe,CACjB,IADiB,EAEjB,KAFiB,EAGjB,IAHiB,EAIjB,KAJiB,EAKjB,MALiB,EAMjB,IANiB,EAOjB,OAPiB,EAQjB,MARiB,EASjB,MATiB,EAUjB,KAViB,EAWjB,KAXiB,EAYjB,IAZiB,EAajB,MAbiB,EAcjB,KAdiB,EAejB,OAfiB,EAgBjB,QAhBiB,EAiBjB,OAjBiB,EAkBjB,KAlBiB,EAmBjB,OAnBiB,EAoBjB,MApBiB,EAqBjB,KArBiB,EAsBjB,OAtBiB,EAuBjB,MAvBiB,CAArB;;AA0BA,IAAMC,SAAS,yBAAW;AACtB,QAAMC,eAAe;AACjB;AACA;AACIC,iBAAS,SADb;AAEIC,cAAM,oBAAkB;AAAA,gBAAfC,QAAe,QAAfA,QAAe;;AACpB,gBAAMC,cAAcD,SAAS,CAAT,CAApB;AACA,mBAAOL,aAAaO,QAAb,CAAsBD,WAAtB,CAAP;AACH,SALL;AAMIE,iBAAS;AAAA;AAAA;AANb,KAFiB;AAYjB;AACA;AACIL,iBAAS,cADb;AAEIC,cAAM,qBAAkB;AAAA,gBAAfC,QAAe,SAAfA,QAAe;;AACpB,gBAAMI,WAAWJ,SAAS,CAAT,CAAjB;AACA,mBAAO,UAASD,IAAT,CAAcK,QAAd;AAAP;AACH,SALL;AAMID,iBAAS;AAAA;AAAA;AANb,KAbiB,CAArB;;AADsB,QA0BdE,MA1Bc,GA0BkCC,OA1BlC,CA0BdD,MA1Bc;AAAA,QA0BNE,SA1BM,GA0BkCD,OA1BlC,CA0BNC,SA1BM;AAAA,QA0BKC,SA1BL,GA0BkCF,OA1BlC,CA0BKE,SA1BL;AAAA,QA0BgBC,KA1BhB,GA0BkCH,OA1BlC,CA0BgBG,KA1BhB;AAAA,QA0BuBb,MA1BvB,GA0BkCU,OA1BlC,CA0BuBV,MA1BvB;;AA2BtB,+BACKS,OAAOK,SADZ,YACuBC,IADvB,EAC6B;AACrB,sEAA4B;AACxBA,sBADwB;AAExBN,0BAFwB;AAGxBR,sCAHwB;AAIxBD,0BAJwB;AAKxBY,gCALwB;AAMxBD,gCANwB;AAOxBE;AAPwB,SAA5B;AASA,eAAO,4DAAkB;AACrBE,sBADqB;AAErBN,0BAFqB;AAGrBR,sCAHqB;AAIrBD,0BAJqB;AAKrBY,gCALqB;AAMrBD,gCANqB;AAOrBE;AAPqB,SAAlB,CAAP;AASH,KApBL;AAsBH,CAjDD;AAkDAG,OAAOC,OAAP,GAAiB;AACbC,YAAQlB,MADK;AAEba,WAAOb;AAFM,CAAjB","file":"textlint-rule-google-colons.js","sourcesContent":["// MIT Â© 2017 azu\n\"use strict\";\nimport {\n    paragraphReporter,\n    getPosFromSingleWord,\n    PosType\n} from \"@textlint-rule/textlint-report-helper-for-google-preset\";\nimport { checkBoldTextPrecedingColon } from \"./checkBoldTextPrecedingColon\";\n\nconst DocumentURL = \"https://developers.google.com/style/colons\";\n//  Helping Verbs\n// https://www.englishgrammar101.com/module-3/verbs/lesson-2/helping-verbs\n// http://grammar.yourdictionary.com/parts-of-speech/verbs/Helping-Verbs.html\n// http://study.com/academy/lesson/what-are-helping-verbs-definition-examples-quiz.html\nconst helpingVerbs = [\n    \"am\",\n    \"are\",\n    \"is\",\n    \"was\",\n    \"were\",\n    \"be\",\n    \"being\",\n    \"been\",\n    \"have\",\n    \"has\",\n    \"had\",\n    \"do\",\n    \"does\",\n    \"did\",\n    \"could\",\n    \"should\",\n    \"would\",\n    \"can\",\n    \"shall\",\n    \"will\",\n    \"may\",\n    \"might\",\n    \"must\"\n];\n\nconst report = context => {\n    const dictionaries = [\n        // Introductory phrase preceding colon\n        {\n            pattern: /(\\w+):/g,\n            test: ({ captures }) => {\n                const helpingVerb = captures[0];\n                return helpingVerbs.includes(helpingVerb);\n            },\n            message: () => `The text that precedes the colon must be able to stand alone as a complete sentence.\nhttps://developers.google.com/style/colons#introductory-phrase-preceding-colon\n`\n        },\n        // Colons within sentences\n        {\n            pattern: /\\w+:\\s(\\w+)/g,\n            test: ({ captures }) => {\n                const nextWord = captures[0];\n                return /^[A-Z]/.test(nextWord);\n            },\n            message: () => `In general, the first word in the text that follows a colon should be in lowercase.\nhttps://developers.google.com/style/colons#colons-within-sentences\n`\n        }\n    ];\n\n    const { Syntax, RuleError, getSource, fixer, report } = context;\n    return {\n        [Syntax.Paragraph](node) {\n            checkBoldTextPrecedingColon({\n                node,\n                Syntax,\n                dictionaries,\n                report,\n                getSource,\n                RuleError,\n                fixer\n            });\n            return paragraphReporter({\n                node,\n                Syntax,\n                dictionaries,\n                report,\n                getSource,\n                RuleError,\n                fixer\n            });\n        }\n    };\n};\nmodule.exports = {\n    linter: report,\n    fixer: report\n};\n"]}