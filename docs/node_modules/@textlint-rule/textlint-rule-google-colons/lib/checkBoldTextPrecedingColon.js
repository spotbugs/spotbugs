// MIT Â© 2017 azu
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
var checkBoldTextPrecedingColon = exports.checkBoldTextPrecedingColon = function checkBoldTextPrecedingColon(_ref) {
    var node = _ref.node,
        Syntax = _ref.Syntax,
        RuleError = _ref.RuleError,
        getSource = _ref.getSource,
        fixer = _ref.fixer,
        report = _ref.report;

    var children = node.children;
    if (!children) {
        return;
    }
    var BoldNodeList = children.filter(function (childNode) {
        return childNode.type === Syntax.Strong;
    });

    BoldNodeList.forEach(function (boldNode) {
        var currentIndex = children.indexOf(boldNode);
        var nextNodeOfBold = children[currentIndex + 1];
        if (!nextNodeOfBold) {
            return;
        }
        if (nextNodeOfBold.type !== Syntax.Str) {
            return;
        }
        var nextNodeValue = getSource(nextNodeOfBold);
        if (!nextNodeValue) {
            return;
        }
        var nextCharacter = nextNodeValue.charAt(0);
        if (nextCharacter !== ":") {
            return;
        }
        // add `:` to current node
        var message = "When the text preceding a colon is bold, make the colon bold too.\nhttps://developers.google.com/style/colons#bold-text-preceding-colon\n";
        if (!Array.isArray(boldNode.children)) {
            return;
        }
        var strNodeOfBoldNode = boldNode.children[0];
        if (!strNodeOfBoldNode || strNodeOfBoldNode.type !== Syntax.Str) {
            return;
        }
        report(strNodeOfBoldNode, new RuleError(message, {
            index: strNodeOfBoldNode.range[0] - node.range[0],
            fix: fixer.replaceText(strNodeOfBoldNode, getSource(strNodeOfBoldNode) + ":")
        }));
        // remove `:` from next node
        report(nextNodeOfBold, new RuleError(message, {
            index: 0,
            fix: fixer.removeRange([0, 1])
        }));
    });
};
//# sourceMappingURL=checkBoldTextPrecedingColon.js.map