// MIT Â© 2017 azu
"use strict";

var _textlintReportHelperForGooglePreset = require("@textlint-rule/textlint-report-helper-for-google-preset");

var _checkBoldTextPrecedingColon = require("./checkBoldTextPrecedingColon");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var DocumentURL = "https://developers.google.com/style/colons";
//  Helping Verbs
// https://www.englishgrammar101.com/module-3/verbs/lesson-2/helping-verbs
// http://grammar.yourdictionary.com/parts-of-speech/verbs/Helping-Verbs.html
// http://study.com/academy/lesson/what-are-helping-verbs-definition-examples-quiz.html
var helpingVerbs = ["am", "are", "is", "was", "were", "be", "being", "been", "have", "has", "had", "do", "does", "did", "could", "should", "would", "can", "shall", "will", "may", "might", "must"];

var report = function report(context) {
    var dictionaries = [
    // Introductory phrase preceding colon
    {
        pattern: /(\w+):/g,
        test: function test(_ref) {
            var captures = _ref.captures;

            var helpingVerb = captures[0];
            return helpingVerbs.includes(helpingVerb);
        },
        message: function message() {
            return "The text that precedes the colon must be able to stand alone as a complete sentence.\nhttps://developers.google.com/style/colons#introductory-phrase-preceding-colon\n";
        }
    },
    // Colons within sentences
    {
        pattern: /\w+:\s(\w+)/g,
        test: function test(_ref2) {
            var captures = _ref2.captures;

            var nextWord = captures[0];
            return (/^[A-Z]/.test(nextWord)
            );
        },
        message: function message() {
            return "In general, the first word in the text that follows a colon should be in lowercase.\nhttps://developers.google.com/style/colons#colons-within-sentences\n";
        }
    }];

    var Syntax = context.Syntax,
        RuleError = context.RuleError,
        getSource = context.getSource,
        fixer = context.fixer,
        report = context.report;

    return _defineProperty({}, Syntax.Paragraph, function (node) {
        (0, _checkBoldTextPrecedingColon.checkBoldTextPrecedingColon)({
            node: node,
            Syntax: Syntax,
            dictionaries: dictionaries,
            report: report,
            getSource: getSource,
            RuleError: RuleError,
            fixer: fixer
        });
        return (0, _textlintReportHelperForGooglePreset.paragraphReporter)({
            node: node,
            Syntax: Syntax,
            dictionaries: dictionaries,
            report: report,
            getSource: getSource,
            RuleError: RuleError,
            fixer: fixer
        });
    });
};
module.exports = {
    linter: report,
    fixer: report
};
//# sourceMappingURL=textlint-rule-google-colons.js.map