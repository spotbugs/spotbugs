{"version":3,"sources":["../src/textlint-rule-google-abbreviations.js"],"names":["report","dictionaries","pattern","message","replace","captures","Syntax","context","RuleError","getSource","fixer","Paragraph","node","module","exports","linter"],"mappings":"AAAA;AACA;;AACA;;;;AAEA,IAAMA,SAAS,yBAAW;AACtB,QAAMC,eAAe;AACjB;AACA;AACIC,iBAAS,SADb;AAEIC,iBAAS;AAAA,mBACL,sDACA,IADA,GAEA,4DAHK;AAAA;AAFb,KAFiB,EASjB;AACID,iBAAS,SADb;AAEIC,iBAAS;AAAA,mBACL,kDACA,IADA,GAEA,4DAHK;AAAA;AAFb,KATiB,EAgBjB;AACID,iBAAS,gBADb;AAEIE,iBAAS,uBAAkB;AAAA,gBAAfC,QAAe,QAAfA,QAAe;;AACvB,mBAAUA,SAAS,CAAT,CAAV;AACH,SAJL;AAKIF,iBAAS;AAAA,mBACL,oDACA,IADA,GAEA,2DAHK;AAAA;AALb,KAhBiB,CAArB;;AADsB,QA6BdG,MA7Bc,GA6BkCC,OA7BlC,CA6BdD,MA7Bc;AAAA,QA6BNE,SA7BM,GA6BkCD,OA7BlC,CA6BNC,SA7BM;AAAA,QA6BKC,SA7BL,GA6BkCF,OA7BlC,CA6BKE,SA7BL;AAAA,QA6BgBC,KA7BhB,GA6BkCH,OA7BlC,CA6BgBG,KA7BhB;AAAA,QA6BuBV,MA7BvB,GA6BkCO,OA7BlC,CA6BuBP,MA7BvB;;AA8BtB,+BACKM,OAAOK,SADZ,YACuBC,IADvB,EAC6B;AACrB,eAAO,4DAAkB;AACrBN,0BADqB;AAErBM,sBAFqB;AAGrBX,sCAHqB;AAIrBD,0BAJqB;AAKrBS,gCALqB;AAMrBD,gCANqB;AAOrBE;AAPqB,SAAlB,CAAP;AASH,KAXL;AAaH,CA3CD;AA4CAG,OAAOC,OAAP,GAAiB;AACbC,YAAQf,MADK;AAEbU,WAAOV;AAFM,CAAjB","file":"textlint-rule-google-abbreviations.js","sourcesContent":["// MIT Â© 2017 azu\n\"use strict\";\nimport { paragraphReporter } from \"@textlint-rule/textlint-report-helper-for-google-preset\";\n\nconst report = context => {\n    const dictionaries = [\n        // Abbreviations not to use\n        {\n            pattern: /e\\.g\\./g,\n            message: () =>\n                `Don't use \"e.g.\", instead, use \"for example\".` +\n                \"\\n\" +\n                \"https://developers.google.com/style/abbreviations#dont-use\"\n        },\n        {\n            pattern: /i\\.e\\./g,\n            message: () =>\n                `Don't use \"i.e.\", instead, use \"that is\".` +\n                \"\\n\" +\n                \"https://developers.google.com/style/abbreviations#dont-use\"\n        },\n        {\n            pattern: /\\b([A-Z]+)\\. /g,\n            replace: ({ captures }) => {\n                return `${captures[0]} `;\n            },\n            message: () =>\n                `Don't use periods with acronyms or initialisms.` +\n                \"\\n\" +\n                \"https://developers.google.com/style/abbreviations#periods\"\n        }\n    ];\n\n    const { Syntax, RuleError, getSource, fixer, report } = context;\n    return {\n        [Syntax.Paragraph](node) {\n            return paragraphReporter({\n                Syntax,\n                node,\n                dictionaries,\n                report,\n                getSource,\n                RuleError,\n                fixer\n            });\n        }\n    };\n};\nmodule.exports = {\n    linter: report,\n    fixer: report\n};\n"]}