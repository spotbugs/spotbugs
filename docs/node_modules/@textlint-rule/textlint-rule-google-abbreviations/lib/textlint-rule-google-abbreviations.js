// MIT Â© 2017 azu
"use strict";

var _textlintReportHelperForGooglePreset = require("@textlint-rule/textlint-report-helper-for-google-preset");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var report = function report(context) {
    var dictionaries = [
    // Abbreviations not to use
    {
        pattern: /e\.g\./g,
        message: function message() {
            return "Don't use \"e.g.\", instead, use \"for example\"." + "\n" + "https://developers.google.com/style/abbreviations#dont-use";
        }
    }, {
        pattern: /i\.e\./g,
        message: function message() {
            return "Don't use \"i.e.\", instead, use \"that is\"." + "\n" + "https://developers.google.com/style/abbreviations#dont-use";
        }
    }, {
        pattern: /\b([A-Z]+)\. /g,
        replace: function replace(_ref) {
            var captures = _ref.captures;

            return captures[0] + " ";
        },
        message: function message() {
            return "Don't use periods with acronyms or initialisms." + "\n" + "https://developers.google.com/style/abbreviations#periods";
        }
    }];

    var Syntax = context.Syntax,
        RuleError = context.RuleError,
        getSource = context.getSource,
        fixer = context.fixer,
        report = context.report;

    return _defineProperty({}, Syntax.Paragraph, function (node) {
        return (0, _textlintReportHelperForGooglePreset.paragraphReporter)({
            Syntax: Syntax,
            node: node,
            dictionaries: dictionaries,
            report: report,
            getSource: getSource,
            RuleError: RuleError,
            fixer: fixer
        });
    });
};
module.exports = {
    linter: report,
    fixer: report
};
//# sourceMappingURL=textlint-rule-google-abbreviations.js.map