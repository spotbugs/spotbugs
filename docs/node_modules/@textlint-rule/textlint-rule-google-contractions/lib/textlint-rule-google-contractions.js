// MIT © 2017 azu
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.noDoubleContractions = exports.nounVerbMessage = undefined;

var _textlintReportHelperForGooglePreset = require("@textlint-rule/textlint-report-helper-for-google-preset");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// https://developers.google.com/style/clause-order
var nounVerbMessage = exports.nounVerbMessage = "Noun+verb contractions: In general, avoid contractions formed from nouns and verbs.\n" + "URL: https://developers.google.com/style/contractions";
var noDoubleContractions = exports.noDoubleContractions = "Don't use double contractions: Double contractions contain not just one but two contracted words.\n" + "URL: https://developers.google.com/style/contractions";
var report = function report(context) {
    var dictionaries = [{
        pattern: /(\w+)'s (\w+)/,
        test: function test(_ref) {
            var all = _ref.all,
                captures = _ref.captures;

            // name
            return (/^NN/.test((0, _textlintReportHelperForGooglePreset.getPosFromSingleWord)(captures[0])) &&
                // Adverb
                /^RB/.test((0, _textlintReportHelperForGooglePreset.getPos)(all, captures[1]))
            );
        },
        replace: function replace(_ref2) {
            var captures = _ref2.captures;

            return captures[0] + " is " + captures[1];
        },
        message: function message() {
            return nounVerbMessage;
        }
    }, {
        // These machines’re slow.
        pattern: /(\w+)'re (\w+)/,
        test: function test(_ref3) {
            var all = _ref3.all,
                captures = _ref3.captures;

            // name
            return (/^NN/.test((0, _textlintReportHelperForGooglePreset.getPosFromSingleWord)(captures[0])) &&
                // Adverb or Adjective
                /^RB|JJ/.test((0, _textlintReportHelperForGooglePreset.getPos)(all, captures[1]))
            );
        },
        replace: function replace(_ref4) {
            var captures = _ref4.captures;

            return captures[0] + " are " + captures[1];
        },
        message: function message() {
            return nounVerbMessage;
        }
    }, {
        // The following guides're (a) good way to learn to use Universal Analytics.
        pattern: /(\w+)'re (\w+) (\w+)/,
        test: function test(_ref5) {
            var all = _ref5.all,
                captures = _ref5.captures;

            // name
            return (/^NN/.test((0, _textlintReportHelperForGooglePreset.getPosFromSingleWord)(captures[0])) &&
                // Determiner
                /DT/.test((0, _textlintReportHelperForGooglePreset.getPos)(all, captures[1])) &&
                // Adverb or Adjective
                /^RB|JJ/.test((0, _textlintReportHelperForGooglePreset.getPos)(all, captures[2]))
            );
        },
        replace: function replace(_ref6) {
            var captures = _ref6.captures;

            return captures[0] + " are " + captures[1] + " " + captures[2];
        },
        message: function message() {
            return nounVerbMessage;
        }
    },
    // Don't use double contractions
    {
        pattern: /mightn't've/,
        replace: function replace() {
            return "might not have";
        },
        message: function message() {
            return noDoubleContractions;
        }
    }, {
        pattern: /mustn't've/,
        replace: function replace() {
            return "must not have";
        },
        message: function message() {
            return noDoubleContractions;
        }
    }, {
        pattern: /wouldn't've/,
        replace: function replace() {
            return "would not have";
        },
        message: function message() {
            return noDoubleContractions;
        }
    }, {
        pattern: /shouldn't've/,
        replace: function replace() {
            return "should not have";
        },
        message: function message() {
            return noDoubleContractions;
        }
    }];

    var Syntax = context.Syntax,
        RuleError = context.RuleError,
        getSource = context.getSource,
        fixer = context.fixer,
        report = context.report;

    return _defineProperty({}, Syntax.Paragraph, function (node) {
        (0, _textlintReportHelperForGooglePreset.paragraphReporter)({
            Syntax: Syntax,
            node: node,
            dictionaries: dictionaries,
            getSource: getSource,
            report: report,
            RuleError: RuleError,
            fixer: fixer
        });
    });
};
module.exports = {
    linter: report,
    fixer: report
};
//# sourceMappingURL=textlint-rule-google-contractions.js.map