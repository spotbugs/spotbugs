{"version":3,"sources":["../src/textlint-rule-google-contractions.js"],"names":["nounVerbMessage","noDoubleContractions","report","dictionaries","pattern","test","all","captures","replace","message","Syntax","context","RuleError","getSource","fixer","Paragraph","node","module","exports","linter"],"mappings":"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","file":"textlint-rule-google-contractions.js","sourcesContent":["// MIT © 2017 azu\n\"use strict\";\nimport {\n    paragraphReporter,\n    getPos,\n    getPosFromSingleWord\n} from \"@textlint-rule/textlint-report-helper-for-google-preset\";\n\n// https://developers.google.com/style/clause-order\nexport const nounVerbMessage =\n    \"Noun+verb contractions: In general, avoid contractions formed from nouns and verbs.\\n\" +\n    \"URL: https://developers.google.com/style/contractions\";\nexport const noDoubleContractions =\n    \"Don't use double contractions: Double contractions contain not just one but two contracted words.\\n\" +\n    \"URL: https://developers.google.com/style/contractions\";\nconst report = context => {\n    const dictionaries = [\n        {\n            pattern: /(\\w+)'s (\\w+)/,\n            test: ({ all, captures }) => {\n                // name\n                return (\n                    /^NN/.test(getPosFromSingleWord(captures[0])) &&\n                    // Adverb\n                    /^RB/.test(getPos(all, captures[1]))\n                );\n            },\n            replace: ({ captures }) => {\n                return `${captures[0]} is ${captures[1]}`;\n            },\n            message: () => nounVerbMessage\n        },\n        {\n            // These machines’re slow.\n            pattern: /(\\w+)'re (\\w+)/,\n            test: ({ all, captures }) => {\n                // name\n                return (\n                    /^NN/.test(getPosFromSingleWord(captures[0])) &&\n                    // Adverb or Adjective\n                    /^RB|JJ/.test(getPos(all, captures[1]))\n                );\n            },\n            replace: ({ captures }) => {\n                return `${captures[0]} are ${captures[1]}`;\n            },\n            message: () => nounVerbMessage\n        },\n        {\n            // The following guides're (a) good way to learn to use Universal Analytics.\n            pattern: /(\\w+)'re (\\w+) (\\w+)/,\n            test: ({ all, captures }) => {\n                // name\n                return (\n                    /^NN/.test(getPosFromSingleWord(captures[0])) &&\n                    // Determiner\n                    /DT/.test(getPos(all, captures[1])) &&\n                    // Adverb or Adjective\n                    /^RB|JJ/.test(getPos(all, captures[2]))\n                );\n            },\n            replace: ({ captures }) => {\n                return `${captures[0]} are ${captures[1]} ${captures[2]}`;\n            },\n            message: () => nounVerbMessage\n        },\n        // Don't use double contractions\n        {\n            pattern: /mightn't've/,\n            replace: () => \"might not have\",\n            message: () => noDoubleContractions\n        },\n        {\n            pattern: /mustn't've/,\n            replace: () => \"must not have\",\n            message: () => noDoubleContractions\n        },\n        {\n            pattern: /wouldn't've/,\n            replace: () => \"would not have\",\n            message: () => noDoubleContractions\n        },\n        {\n            pattern: /shouldn't've/,\n            replace: () => \"should not have\",\n            message: () => noDoubleContractions\n        }\n    ];\n\n    const { Syntax, RuleError, getSource, fixer, report } = context;\n    return {\n        [Syntax.Paragraph](node) {\n            paragraphReporter({\n                Syntax,\n                node,\n                dictionaries,\n                getSource,\n                report,\n                RuleError,\n                fixer\n            });\n        }\n    };\n};\nmodule.exports = {\n    linter: report,\n    fixer: report\n};\n"]}