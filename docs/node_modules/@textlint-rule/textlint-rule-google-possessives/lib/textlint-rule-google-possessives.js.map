{"version":3,"sources":["../src/textlint-rule-google-possessives.js"],"names":["DocumentURL","report","Syntax","context","RuleError","getSource","fixer","dictionaries","pattern","test","captures","word","isEndedS","length","wordPos","message","words","split","determinerWord","targetWord","undefined","determinerType","Paragraph","node","module","exports","linter"],"mappings":"AAAA;AACA;;AACA;;;;AAEA,IAAMA,cAAc,iDAApB;AACA,IAAMC,SAAS,yBAAW;AAAA,QACdC,MADc,GACkCC,OADlC,CACdD,MADc;AAAA,QACNE,SADM,GACkCD,OADlC,CACNC,SADM;AAAA,QACKC,SADL,GACkCF,OADlC,CACKE,SADL;AAAA,QACgBC,KADhB,GACkCH,OADlC,CACgBG,KADhB;AAAA,QACuBL,MADvB,GACkCE,OADlC,CACuBF,MADvB;;AAEtB,QAAMM,eAAe;AACjB;AACA;AACIC,iBAAS,SADb;AAEIC,cAAM,oBAAkB;AAAA,gBAAfC,QAAe,QAAfA,QAAe;;AACpB,gBAAMC,OAAOD,SAAS,CAAT,CAAb;AACA;AACA,gBAAME,WAAWD,KAAKA,KAAKE,MAAL,GAAc,CAAnB,MAA0B,GAA3C;AACA,gBAAMC,UAAU,+DAAqBH,IAArB,CAAhB;AACA;AACA,mBAAOG,YAAY,KAAZ,IAAqBF,QAA5B;AACH,SATL;AAUIG,iBAAS;AAAA,mBACL,gGACA,IADA,GAEAf,WAHK;AAAA;AAVb,KAFiB;AAiBjB;AACA;AACIQ,iBAAS,iBADb;AAEIC,cAAM,qBAAkB;AAAA,gBAAfC,QAAe,SAAfA,QAAe;;AACpB;AACA;AACA,gBAAMM,QAAQN,SAAS,CAAT,EAAYO,KAAZ,CAAkB,GAAlB,CAAd;AACA,gBAAMC,iBAAiBF,MAAMA,MAAMH,MAAN,GAAe,CAArB,CAAvB;AACA,gBAAMM,aAAaH,MAAMA,MAAMH,MAAN,GAAe,CAArB,CAAnB;AACA;AACA,gBAAIK,mBAAmBE,SAAvB,EAAkC;AAC9B,oBAAMC,iBAAiB,+DAAqBH,cAArB,CAAvB;AACA;AACA,oBAAIG,mBAAmB,IAAvB,EAA6B;AACzB,2BAAO,KAAP;AACH;AACJ;AACD,gBAAMP,UAAU,+DAAqBK,UAArB,CAAhB;AACA;AACA,mBAAOL,YAAY,KAAZ,IAAqBA,YAAY,IAAxC;AACH,SAnBL;AAoBIC,iBAAS;AAAA,mBACL,6JACA,IADA,GAEAf,WAHK;AAAA;AApBb,KAlBiB,CAArB;;AA6CA,+BACKE,OAAOoB,SADZ,YACuBC,IADvB,EAC6B;AACrB,eAAO,4DAAkB;AACrBrB,0BADqB;AAErBqB,sBAFqB;AAGrBhB,sCAHqB;AAIrBN,0BAJqB;AAKrBI,gCALqB;AAMrBD,gCANqB;AAOrBE;AAPqB,SAAlB,CAAP;AASH,KAXL;AAaH,CA5DD;AA6DAkB,OAAOC,OAAP,GAAiB;AACbC,YAAQzB,MADK;AAEbK,WAAOL;AAFM,CAAjB","file":"textlint-rule-google-possessives.js","sourcesContent":["// MIT Â© 2017 azu\n\"use strict\";\nimport { paragraphReporter, getPosFromSingleWord } from \"@textlint-rule/textlint-report-helper-for-google-preset\";\n\nconst DocumentURL = \"https://developers.google.com/style/possessives\";\nconst report = context => {\n    const { Syntax, RuleError, getSource, fixer, report } = context;\n    const dictionaries = [\n        // NG: plural word + 's\n        {\n            pattern: /(\\w+)'s/,\n            test: ({ captures }) => {\n                const word = captures[0];\n                // if plural word is ended in \"s\", ignore it.\n                const isEndedS = word[word.length - 1] === \"s\";\n                const wordPos = getPosFromSingleWord(word);\n                // Plural word\n                return wordPos === \"NNS\" && isEndedS;\n            },\n            message: () =>\n                'A plural noun that does end in \"s\", add an apostrophe(\\') but no additional \"s\" or use \"of\"' +\n                \"\\n\" +\n                DocumentURL\n        },\n        // NG: singular noun + '\n        {\n            pattern: /([\\w\\s]+)'(?!s)/,\n            test: ({ captures }) => {\n                // ... word's\n                // or ... the word's\n                const words = captures[0].split(\" \");\n                const determinerWord = words[words.length - 2];\n                const targetWord = words[words.length - 1];\n                // if \"the word's\", ignore this\n                if (determinerWord !== undefined) {\n                    const determinerType = getPosFromSingleWord(determinerWord);\n                    // skip: the a\n                    if (determinerType === \"DT\") {\n                        return false;\n                    }\n                }\n                const wordPos = getPosFromSingleWord(targetWord);\n                // singular noun(singular noun or Proper noun)\n                return wordPos === \"NNP\" || wordPos === \"NN\";\n            },\n            message: () =>\n                'To form a possessive of a singular noun (regardless of whether it ends in s) or a plural noun that doesn\\'t end in \"s\", add \"\\'s\" to the end of the word' +\n                \"\\n\" +\n                DocumentURL\n        }\n    ];\n\n    return {\n        [Syntax.Paragraph](node) {\n            return paragraphReporter({\n                Syntax,\n                node,\n                dictionaries,\n                report,\n                getSource,\n                RuleError,\n                fixer\n            });\n        }\n    };\n};\nmodule.exports = {\n    linter: report,\n    fixer: report\n};\n"]}