// MIT © 2017 azu
"use strict";

var _textlintReportHelperForGooglePreset = require("@textlint-rule/textlint-report-helper-for-google-preset");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var DocumentURL = "https://developers.google.com/style/hyphens";
var report = function report(context) {
    var dictionaries = [
    // Serial commas
    {
        pattern: /([\w-]+), (.*?([\w-]+)) (and|or) ([\w-]+)/g,
        test: function test(_ref) {
            var captures = _ref.captures;

            var word1 = captures[0];
            var word2 = captures[2];
            var word3 = captures[4];
            var pos1 = (0, _textlintReportHelperForGooglePreset.getPosFromSingleWord)(word1);
            var pos2 = (0, _textlintReportHelperForGooglePreset.getPosFromSingleWord)(word2);
            var pos3 = (0, _textlintReportHelperForGooglePreset.getPosFromSingleWord)(word3);
            // For example, word1-3 are attached to same group
            // Word1 is NN, Word2 is NNP, Word3 is NN => true
            return (0, _textlintReportHelperForGooglePreset.isSameGroupPosType)(pos1, pos2) && (0, _textlintReportHelperForGooglePreset.isSameGroupPosType)(pos2, pos3);
        },
        replace: function replace(_ref2) {
            var captures = _ref2.captures;

            return captures[0] + ", " + captures[1] + ", " + captures[3] + " " + captures[4];
            //                                    ^ <= add ,
        },
        message: function message() {
            return "In a series of three or more items, use a comma before the final \"and\" or \"or.\".\nhttps://developers.google.com/style/commas#serial-commas\n";
        }
    },
    // Commas after introductory words and phrases
    // Commas separating two independent clauses
    // Steps:
    // 1. <first sentence> (and|but|nor|for|so|or|yet) <second sentence>
    // 2. <first sentence> and <second sentence> is complete statement.
    // 3. <first sentence> and <second sentence> is longer than 3 words
    // 4. Report Error and ","
    // {
    //     pattern: /^([^,]+) (and|but|nor|for|so|or|yet) ([^,]+)$/,
    //     test: ({ captures }) => {
    //         const prePhase = captures[0];
    //         const postPhase = captures[2];
    //     }
    // }
    // Commas separating independent from dependent clauses
    // Setting off other kinds of clauses
    {
        pattern: /^(however|otherwise|therefore) /i,
        replace: function replace(_ref3) {
            var captures = _ref3.captures;
            return captures[0] + ", ";
        },
        message: function message() {
            return "In general, put a semicolon or a period or a dash before a conjunctive adverb, such as \"otherwise\" or \"however\" or \"therefore,\" and put a comma after the conjunctive adverb.\nhttps://developers.google.com/style/commas#setting-off-other-kinds-of-clauses\n";
        }
    }, {
        pattern: /([.;–]) (however|otherwise|therefore) /g,
        replace: function replace(_ref4) {
            var captures = _ref4.captures;
            return captures[0] + " " + captures[1] + ", ";
        },
        message: function message() {
            return "In general, put a semicolon or a period or a dash before a conjunctive adverb, such as \"otherwise\" or \"however\" or \"therefore,\" and put a comma after the conjunctive adverb.\nhttps://developers.google.com/style/commas#setting-off-other-kinds-of-clauses\n";
        }
    }];

    var Syntax = context.Syntax,
        RuleError = context.RuleError,
        getSource = context.getSource,
        fixer = context.fixer,
        report = context.report;

    return _defineProperty({}, Syntax.Paragraph, function (node) {
        return (0, _textlintReportHelperForGooglePreset.paragraphReporter)({
            node: node,
            Syntax: Syntax,
            dictionaries: dictionaries,
            report: report,
            getSource: getSource,
            RuleError: RuleError,
            fixer: fixer
        });
    });
};
module.exports = {
    linter: report,
    fixer: report
};
//# sourceMappingURL=textlint-rule-google-commas.js.map