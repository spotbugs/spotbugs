{"version":3,"sources":["../src/textlint-rule-google-commas.js"],"names":["DocumentURL","report","dictionaries","pattern","test","captures","word1","word2","word3","pos1","pos2","pos3","replace","message","Syntax","context","RuleError","getSource","fixer","Paragraph","node","module","exports","linter"],"mappings":"AAAA;AACA;;AACA;;;;AAOA,IAAMA,cAAc,6CAApB;AACA,IAAMC,SAAS,yBAAW;AACtB,QAAMC,eAAe;AACjB;AACA;AACIC,iBAAS,4CADb;AAEIC,cAAM,oBAAkB;AAAA,gBAAfC,QAAe,QAAfA,QAAe;;AACpB,gBAAMC,QAAQD,SAAS,CAAT,CAAd;AACA,gBAAME,QAAQF,SAAS,CAAT,CAAd;AACA,gBAAMG,QAAQH,SAAS,CAAT,CAAd;AACA,gBAAMI,OAAO,+DAAqBH,KAArB,CAAb;AACA,gBAAMI,OAAO,+DAAqBH,KAArB,CAAb;AACA,gBAAMI,OAAO,+DAAqBH,KAArB,CAAb;AACA;AACA;AACA,mBAAO,6DAAmBC,IAAnB,EAAyBC,IAAzB,KAAkC,6DAAmBA,IAAnB,EAAyBC,IAAzB,CAAzC;AACH,SAZL;AAaIC,iBAAS,wBAAkB;AAAA,gBAAfP,QAAe,SAAfA,QAAe;;AACvB,mBAAUA,SAAS,CAAT,CAAV,UAA0BA,SAAS,CAAT,CAA1B,UAA0CA,SAAS,CAAT,CAA1C,SAAyDA,SAAS,CAAT,CAAzD;AACA;AACH,SAhBL;AAiBIQ,iBAAS,mBAAM;AACX;AAGH;AArBL,KAFiB;AAyBjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIV,iBAAS,kCADb;AAEIS,iBAAS;AAAA,gBAAGP,QAAH,SAAGA,QAAH;AAAA,mBAAqBA,SAAS,CAAT,CAArB;AAAA,SAFb;AAGIQ,iBAAS,mBAAM;AACX;AAGH;AAPL,KAzCiB,EAkDjB;AACIV,iBAAS,yCADb;AAEIS,iBAAS;AAAA,gBAAGP,QAAH,SAAGA,QAAH;AAAA,mBAAqBA,SAAS,CAAT,CAArB,SAAoCA,SAAS,CAAT,CAApC;AAAA,SAFb;AAGIQ,iBAAS,mBAAM;AACX;AAGH;AAPL,KAlDiB,CAArB;;AADsB,QA8DdC,MA9Dc,GA8DkCC,OA9DlC,CA8DdD,MA9Dc;AAAA,QA8DNE,SA9DM,GA8DkCD,OA9DlC,CA8DNC,SA9DM;AAAA,QA8DKC,SA9DL,GA8DkCF,OA9DlC,CA8DKE,SA9DL;AAAA,QA8DgBC,KA9DhB,GA8DkCH,OA9DlC,CA8DgBG,KA9DhB;AAAA,QA8DuBjB,MA9DvB,GA8DkCc,OA9DlC,CA8DuBd,MA9DvB;;AA+DtB,+BACKa,OAAOK,SADZ,YACuBC,IADvB,EAC6B;AACrB,eAAO,4DAAkB;AACrBA,sBADqB;AAErBN,0BAFqB;AAGrBZ,sCAHqB;AAIrBD,0BAJqB;AAKrBgB,gCALqB;AAMrBD,gCANqB;AAOrBE;AAPqB,SAAlB,CAAP;AASH,KAXL;AAaH,CA5ED;AA6EAG,OAAOC,OAAP,GAAiB;AACbC,YAAQtB,MADK;AAEbiB,WAAOjB;AAFM,CAAjB","file":"textlint-rule-google-commas.js","sourcesContent":["// MIT © 2017 azu\n\"use strict\";\nimport {\n    paragraphReporter,\n    getPosFromSingleWord,\n    PosType,\n    isSameGroupPosType\n} from \"@textlint-rule/textlint-report-helper-for-google-preset\";\n\nconst DocumentURL = \"https://developers.google.com/style/hyphens\";\nconst report = context => {\n    const dictionaries = [\n        // Serial commas\n        {\n            pattern: /([\\w-]+), (.*?([\\w-]+)) (and|or) ([\\w-]+)/g,\n            test: ({ captures }) => {\n                const word1 = captures[0];\n                const word2 = captures[2];\n                const word3 = captures[4];\n                const pos1 = getPosFromSingleWord(word1);\n                const pos2 = getPosFromSingleWord(word2);\n                const pos3 = getPosFromSingleWord(word3);\n                // For example, word1-3 are attached to same group\n                // Word1 is NN, Word2 is NNP, Word3 is NN => true\n                return isSameGroupPosType(pos1, pos2) && isSameGroupPosType(pos2, pos3);\n            },\n            replace: ({ captures }) => {\n                return `${captures[0]}, ${captures[1]}, ${captures[3]} ${captures[4]}`;\n                //                                    ^ <= add ,\n            },\n            message: () => {\n                return `In a series of three or more items, use a comma before the final \"and\" or \"or.\".\nhttps://developers.google.com/style/commas#serial-commas\n`;\n            }\n        },\n        // Commas after introductory words and phrases\n        // Commas separating two independent clauses\n        // Steps:\n        // 1. <first sentence> (and|but|nor|for|so|or|yet) <second sentence>\n        // 2. <first sentence> and <second sentence> is complete statement.\n        // 3. <first sentence> and <second sentence> is longer than 3 words\n        // 4. Report Error and \",\"\n        // {\n        //     pattern: /^([^,]+) (and|but|nor|for|so|or|yet) ([^,]+)$/,\n        //     test: ({ captures }) => {\n        //         const prePhase = captures[0];\n        //         const postPhase = captures[2];\n        //     }\n        // }\n        // Commas separating independent from dependent clauses\n        // Setting off other kinds of clauses\n        {\n            pattern: /^(however|otherwise|therefore) /i,\n            replace: ({ captures }) => `${captures[0]}, `,\n            message: () => {\n                return `In general, put a semicolon or a period or a dash before a conjunctive adverb, such as \"otherwise\" or \"however\" or \"therefore,\" and put a comma after the conjunctive adverb.\nhttps://developers.google.com/style/commas#setting-off-other-kinds-of-clauses\n`;\n            }\n        },\n        {\n            pattern: /([.;–]) (however|otherwise|therefore) /g,\n            replace: ({ captures }) => `${captures[0]} ${captures[1]}, `,\n            message: () => {\n                return `In general, put a semicolon or a period or a dash before a conjunctive adverb, such as \"otherwise\" or \"however\" or \"therefore,\" and put a comma after the conjunctive adverb.\nhttps://developers.google.com/style/commas#setting-off-other-kinds-of-clauses\n`;\n            }\n        }\n    ];\n\n    const { Syntax, RuleError, getSource, fixer, report } = context;\n    return {\n        [Syntax.Paragraph](node) {\n            return paragraphReporter({\n                node,\n                Syntax,\n                dictionaries,\n                report,\n                getSource,\n                RuleError,\n                fixer\n            });\n        }\n    };\n};\nmodule.exports = {\n    linter: report,\n    fixer: report\n};\n"]}