"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Any value without `parsers`
 */
var AnyValueParser = /** @class */ (function () {
    /**
     * Eat any value without `parsers.test`
     */
    function AnyValueParser(options) {
        this.parsers = options.parsers;
        this.markers = options.markers;
    }
    AnyValueParser.prototype.test = function (sourceCode) {
        if (sourceCode.hasEnd) {
            return false;
        }
        return this.parsers.every(function (parser) { return !parser.test(sourceCode); });
    };
    AnyValueParser.prototype.seek = function (sourceCode) {
        var currentNode = sourceCode.readNode();
        if (!currentNode) {
            // Text mode
            while (this.test(sourceCode)) {
                this.markers.forEach(function (marker) { return marker.mark(sourceCode); });
                sourceCode.peek();
            }
            return;
        }
        // node - should not over next node
        var isInCurrentNode = function () {
            var currentOffset = sourceCode.offset;
            return currentNode.range[0] <= currentOffset && currentOffset < currentNode.range[1];
        };
        while (isInCurrentNode() && this.test(sourceCode)) {
            this.markers.forEach(function (marker) { return marker.mark(sourceCode); });
            sourceCode.peek();
        }
    };
    return AnyValueParser;
}());
exports.AnyValueParser = AnyValueParser;
//# sourceMappingURL=AnyValueParser.js.map