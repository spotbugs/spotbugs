"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var logger_1 = require("../logger");
var values = require("object.values");
/**
 * Mark pair character
 * PairMarker aim to mark pair string as a single sentence.
 *
 * For example, Following sentence has two period(ã€‚). but it should treat a single sentence
 *
 * > I hear "I'm back to home." from radio.
 *
 */
var PairMaker = /** @class */ (function () {
    function PairMaker() {
        var _a;
        this.pairs = (_a = {},
            _a["\""] = "\"",
            _a["\u300C"] = "\u300D",
            _a["\uFF08"] = "\uFF09",
            _a["("] = ")",
            _a["\u300E"] = "\u300F",
            _a["\u3010"] = "\u3011",
            _a);
        this.pairKeys = Object.keys(this.pairs);
        this.pairValues = values(this.pairs);
    }
    PairMaker.prototype.mark = function (sourceCode) {
        var string = sourceCode.read();
        if (!string) {
            return;
        }
        // if current is in a context, should not start other context.
        // PairMaker does not support nest context by design.
        if (!sourceCode.isInContext()) {
            var keyIndex = this.pairKeys.indexOf(string);
            if (keyIndex !== -1) {
                var key = this.pairKeys[keyIndex];
                logger_1.debugLog("PairMaker -> enterContext: " + key);
                sourceCode.enterContext(key);
            }
        }
        else {
            // check that string is end mark?
            var valueIndex = this.pairValues.indexOf(string);
            if (valueIndex !== -1) {
                var key = this.pairKeys[valueIndex];
                logger_1.debugLog("PairMaker -> leaveContext: " + this.pairValues[valueIndex]);
                sourceCode.leaveContext(key);
            }
        }
    };
    return PairMaker;
}());
exports.PairMaker = PairMaker;
//# sourceMappingURL=PairMaker.js.map