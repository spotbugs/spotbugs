"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var English_1 = require("./lang/English");
var isCapitalized = function (text) {
    if (!text || text.length === 0) {
        return false;
    }
    return /^[A-Z]/.test(text);
};
var compareNoCaseSensitive = function (a, b) {
    return a.toLowerCase() === b.toLowerCase();
};
/**
 * abbreviation marker
 */
var AbbrMarker = /** @class */ (function () {
    function AbbrMarker(lang) {
        if (lang === void 0) { lang = English_1.English; }
        this.lang = lang;
    }
    /**
     * Get Word
     * word should have left space and right space,
     * @param {SourceCode} sourceCode
     * @param {number} startIndex
     * @returns {string}
     */
    AbbrMarker.prototype.getWord = function (sourceCode, startIndex) {
        if (startIndex === void 0) { startIndex = 0; }
        var whiteSpace = /\s/;
        var prevChar = sourceCode.read(-1);
        if (prevChar && !whiteSpace.test(prevChar)) {
            return "";
        }
        var word = "";
        var count = startIndex;
        var char = "";
        while ((char = sourceCode.read(count))) {
            if (whiteSpace.test(char)) {
                break;
            }
            word += char;
            count++;
        }
        return word;
    };
    AbbrMarker.prototype.getPrevWord = function (sourceCode) {
        var whiteSpace = /\s/;
        var count = -1;
        var char = "";
        while ((char = sourceCode.read(count))) {
            if (!whiteSpace.test(char)) {
                break;
            }
            count--;
        }
        while ((char = sourceCode.read(count))) {
            if (whiteSpace.test(char)) {
                break;
            }
            count--;
        }
        return this.getWord(sourceCode, count + 1);
    };
    AbbrMarker.prototype.mark = function (sourceCode) {
        if (sourceCode.isInContextRange()) {
            return;
        }
        var currentWord = this.getWord(sourceCode);
        if (currentWord.length === 0) {
            return;
        }
        // Allow: Multi-period abbr
        // Example: U.S.A
        if (/^([a-zA-Z]\.){3,}$/.test(currentWord)) {
            return sourceCode.markContextRange([sourceCode.offset, sourceCode.offset + currentWord.length]);
        }
        // EXCALAMATION_WORDS
        // Example: Yahoo!
        var isMatchedEXCALAMATION_WORDS = this.lang.EXCALAMATION_WORDS.some(function (abbr) {
            return compareNoCaseSensitive(abbr, currentWord);
        });
        if (isMatchedEXCALAMATION_WORDS) {
            return sourceCode.markContextRange([sourceCode.offset, sourceCode.offset + currentWord.length]);
        }
        // PREPOSITIVE_ABBREVIATIONS
        // Example: Mr. Fuji
        var isMatchedPREPOSITIVE_ABBREVIATIONS = this.lang.PREPOSITIVE_ABBREVIATIONS.some(function (abbr) {
            return compareNoCaseSensitive(abbr, currentWord);
        });
        if (isMatchedPREPOSITIVE_ABBREVIATIONS) {
            return sourceCode.markContextRange([sourceCode.offset, sourceCode.offset + currentWord.length]);
        }
        // ABBREVIATIONS
        var isMatched = this.lang.ABBREVIATIONS.some(function (abbr) {
            return compareNoCaseSensitive(abbr, currentWord);
        });
        var prevWord = this.getPrevWord(sourceCode);
        var nextWord = this.getWord(sourceCode, currentWord.length + 1);
        // console.log("prevWord", prevWord);
        // console.log("currentWord", currentWord);
        // console.log("nextWord", nextWord);
        // Special case: Capital <ABBR>. Capital
        // Example: `I` as a sentence boundary and `I` as an abbreviation
        // > We make a good team, you and I. Did you see Albert I. Jones yesterday?
        if (isCapitalized(prevWord) && /[A-Z]\./.test(currentWord) && isCapitalized(nextWord)) {
            sourceCode.markContextRange([sourceCode.offset, sourceCode.offset + currentWord.length]);
        }
        else if (isMatched && !isCapitalized(nextWord)) {
            // Exception. This allow to write Capitalized word at next word
            // A.M. is store.
            sourceCode.markContextRange([sourceCode.offset, sourceCode.offset + currentWord.length]);
        }
    };
    return AbbrMarker;
}());
exports.AbbrMarker = AbbrMarker;
//# sourceMappingURL=AbbrMarker.js.map