"use strict";
var brill_conditions_1 = require("./brill_conditions");
var lexicon = require("en-lexicon");
var Brill = (function () {
    function Brill() {
        this.apply = function (index, iteration) {
            for (var i = 0; i < this.rules.length; i++) {
                var rule = this.rules[i];
                if (rule.from !== this.tags[index] || (rule.secondRun && iteration === 1))
                    continue;
                var type = rule.type;
                var tmp = void 0, tmp2 = void 0;
                var token = this.tokens[index];
                var tag = this.tags[index];
                if (type === brill_conditions_1.conditions.STARTWORD) {
                    if (index === 0 && token === rule.c1 && ((!rule.verify) || ((!lexicon.lexicon[token]) || ~lexicon.lexicon[token].split("|").indexOf(rule.to))))
                        this.tags[index] = rule.to;
                    continue;
                }
                token = (token || "").toLowerCase();
                if (type === brill_conditions_1.conditions.PREV2WORDS) {
                    tmp = this.tokens[index - 1] || "";
                    tmp2 = this.tokens[index - 2] || "";
                    if (tmp === rule.c1 && tmp2 === rule.c2 && ((!rule.verify) || ((!lexicon.lexicon[token]) || ~lexicon.lexicon[token].split("|").indexOf(rule.to))))
                        this.tags[index] = rule.to;
                    continue;
                }
                else if (type === brill_conditions_1.conditions.PREVTAG) {
                    if (index && this.tags[index - 1] === rule.c1 && ((!rule.verify) || ((!lexicon.lexicon[token]) || ~lexicon.lexicon[token].split("|").indexOf(rule.to))))
                        this.tags[index] = rule.to;
                    continue;
                }
                else if (type === brill_conditions_1.conditions.PREVWORDPREVTAG) {
                    tmp = this.tokens[index - 1] || '';
                    if (this.tags[index - 1] === rule.c2 && tmp.toLowerCase() === rule.c1 && ((!rule.verify) || ((!lexicon.lexicon[token]) || ~lexicon.lexicon[token].split("|").indexOf(rule.to))))
                        this.tags[index] = rule.to;
                    continue;
                }
                else if (type === brill_conditions_1.conditions.NEXTTAG) {
                    if (this.tags[index + 1] === rule.c1 && ((!rule.verify) || ((!lexicon.lexicon[token]) || ~lexicon.lexicon[token].split("|").indexOf(rule.to))))
                        this.tags[index] = rule.to;
                    continue;
                }
                else if (type === brill_conditions_1.conditions.NEXTTAG2) {
                    if (this.tags[index + 2] === rule.c1 && ((!rule.verify) || ((!lexicon.lexicon[token]) || ~lexicon.lexicon[token].split("|").indexOf(rule.to))))
                        this.tags[index] = rule.to;
                    continue;
                }
                else if (type === brill_conditions_1.conditions.PREVTAG2) {
                    if (this.tags[index - 2] === rule.c1 && ((!rule.verify) || ((!lexicon.lexicon[token]) || ~lexicon.lexicon[token].split("|").indexOf(rule.to))))
                        this.tags[index] = rule.to;
                    continue;
                }
                else if (type === brill_conditions_1.conditions.PREV1OR2TAG) {
                    if (this.tags[index - 1] === rule.c1 || this.tags[index - 2] === rule.c1 && ((!rule.verify) || ((!lexicon.lexicon[token]) || ~lexicon.lexicon[token].split("|").indexOf(rule.to))))
                        this.tags[index] = rule.to;
                    continue;
                }
                else if (type === brill_conditions_1.conditions.PREVWORD) {
                    tmp = this.tokens[index - 1] || '';
                    if (tmp.toLowerCase() === rule.c1 && ((!rule.verify) || ((!lexicon.lexicon[token]) || ~lexicon.lexicon[token].split("|").indexOf(rule.to))))
                        this.tags[index] = rule.to;
                    continue;
                }
                else if (type === brill_conditions_1.conditions.CURRENTWD) {
                    if (this.token === rule.c1 && ((!rule.verify) || ((!lexicon.lexicon[token]) || ~lexicon.lexicon[token].split("|").indexOf(rule.to))))
                        this.tags[index] = rule.to;
                    continue;
                }
                else if (type === brill_conditions_1.conditions.CURRENTWDRGX) {
                    if (rule.c1.test(token) && ((!rule.verify) || ((!lexicon.lexicon[token]) || ~lexicon.lexicon[token].split("|").indexOf(rule.to))))
                        this.tags[index] = rule.to;
                    continue;
                }
                else if (type === brill_conditions_1.conditions.WDPREVTAG) {
                    if (token === rule.c2 && this.tags[index - 1] === rule.c1 && ((!rule.verify) || ((!lexicon.lexicon[token]) || ~lexicon.lexicon[token].split("|").indexOf(rule.to))))
                        this.tags[index] = rule.to;
                    continue;
                }
                else if (type === brill_conditions_1.conditions.WDPREVWD) {
                    tmp = this.tokens[index - 1] || '';
                    if (this.token === rule.c2 && tmp.toLowerCase() === rule.c1 && ((!rule.verify) || ((!lexicon.lexicon[token]) || ~lexicon.lexicon[token].split("|").indexOf(rule.to))))
                        this.tags[index] = rule.to;
                    continue;
                }
                else if (type === brill_conditions_1.conditions.NEXT1OR2OR3TAG) {
                    if (this.tags[index + 1] === rule.c1 || this.tags[index + 2] === rule.c1 || this.tags[index + 3] === rule.c1 && ((!rule.verify) || ((!lexicon.lexicon[token]) || ~lexicon.lexicon[token].split("|").indexOf(rule.to))))
                        this.tags[index] = rule.to;
                    continue;
                }
                else if (type === brill_conditions_1.conditions.NEXT2WD) {
                    tmp = this.tokens[index + 2] || '';
                    if (tmp.toLowerCase() === rule.c1 && ((!rule.verify) || ((!lexicon.lexicon[token]) || ~lexicon.lexicon[token].split("|").indexOf(rule.to))))
                        this.tags[index] = rule.to;
                    continue;
                }
                else if (type === brill_conditions_1.conditions.WDNEXTWD) {
                    tmp = this.tokens[index + 1] || '';
                    if (token === rule.c1 && tmp.toLowerCase() === rule.c2 && ((!rule.verify) || ((!lexicon.lexicon[token]) || ~lexicon.lexicon[token].split("|").indexOf(rule.to))))
                        this.tags[index] = rule.to;
                    continue;
                }
                else if (type === brill_conditions_1.conditions.WDNEXTTAG) {
                    if (token === rule.c1 && this.tags[index + 1] === rule.c2 && ((!rule.verify) || ((!lexicon.lexicon[token]) || ~lexicon.lexicon[token].split("|").indexOf(rule.to))))
                        this.tags[index] = rule.to;
                    continue;
                }
                else if (type === brill_conditions_1.conditions.PREV1OR2OR3TAG) {
                    if (this.tags[index - 1] === rule.c1 || this.tags[index - 2] === rule.c1 || this.tags[index - 3] === rule.c1 && ((!rule.verify) || ((!lexicon.lexicon[token]) || ~lexicon.lexicon[token].split("|").indexOf(rule.to))))
                        this.tags[index] = rule.to;
                    continue;
                }
                else if (type === brill_conditions_1.conditions.SURROUNDTAG) {
                    if (this.tags[index - 1] === rule.c1 && this.tags[index + 1] === rule.c2 && ((!rule.verify) || ((!lexicon.lexicon[token]) || ~lexicon.lexicon[token].split("|").indexOf(rule.to))))
                        this.tags[index] = rule.to;
                    continue;
                }
                else if (type === brill_conditions_1.conditions.SURROUNDTAGWD) {
                    if (token === rule.c1 && this.tags[index - 1] === rule.c2 && this.tags[index + 1] === rule.c3 && ((!rule.verify) || ((!lexicon.lexicon[token]) || ~lexicon.lexicon[token].split("|").indexOf(rule.to))))
                        this.tags[index] = rule.to;
                    continue;
                }
                else if (type === brill_conditions_1.conditions.NEXTWD) {
                    tmp = this.tokens[index + 1] || '';
                    if (tmp.toLowerCase() === rule.c1 && ((!rule.verify) || ((!lexicon.lexicon[token]) || ~lexicon.lexicon[token].split("|").indexOf(rule.to))))
                        this.tags[index] = rule.to;
                    continue;
                }
                else if (type === brill_conditions_1.conditions.NEXT1OR2TAG) {
                    if (this.tags[index + 1] === rule.c1 || this.tags[index + 2] === rule.c1 && ((!rule.verify) || ((!lexicon.lexicon[token]) || ~lexicon.lexicon[token].split("|").indexOf(rule.to))))
                        this.tags[index] = rule.to;
                    continue;
                }
                else if (type === brill_conditions_1.conditions.PREV2TAG) {
                    if (this.tags[index - 2] === rule.c1 && this.tags[index - 1] === rule.c2 && ((!rule.verify) || ((!lexicon.lexicon[token]) || ~lexicon.lexicon[token].split("|").indexOf(rule.to))))
                        this.tags[index] = rule.to;
                    continue;
                }
                else if (type === brill_conditions_1.conditions.PREV2TAGNEXTTAG) {
                    if (this.tags[index - 2] === rule.c1 && this.tags[index - 1] === rule.c2 && this.tags[index + 1] === rule.c3 && ((!rule.verify) || ((!lexicon.lexicon[token]) || ~lexicon.lexicon[token].split("|").indexOf(rule.to))))
                        this.tags[index] = rule.to;
                    continue;
                }
                else if (type === brill_conditions_1.conditions.NEXT2TAG) {
                    if (this.tags[index + 1] === rule.c1 && this.tags[index + 2] === rule.c2)
                        this.tags[index] = rule.to;
                    continue;
                }
                else if (type === brill_conditions_1.conditions.NEXT1OR2WD) {
                    tmp = this.tokens[index + 1] || '';
                    tmp2 = this.tokens[index + 2] || '';
                    if (tmp.toLowerCase() === rule.c1 || tmp2.toLowerCase() === rule.c1 && ((!rule.verify) || ((!lexicon.lexicon[token]) || ~lexicon.lexicon[token].split("|").indexOf(rule.to))))
                        this.tags[index] = rule.to;
                    continue;
                }
                else if (type === brill_conditions_1.conditions.PREV2WD) {
                    tmp2 = this.tokens[index - 2] || '';
                    if (tmp2.toLowerCase() === rule.c1 && ((!rule.verify) || ((!lexicon.lexicon[token]) || ~lexicon.lexicon[token].split("|").indexOf(rule.to))))
                        this.tags[index] = rule.to;
                    continue;
                }
                else if (type === brill_conditions_1.conditions.PREV1OR2WD) {
                    tmp = this.tokens[index - 1] || '';
                    tmp2 = this.tokens[index - 2] || '';
                    if (tmp.toLowerCase() === rule.c1 || tmp2.toLowerCase() === rule.c1 && ((!rule.verify) || ((!lexicon.lexicon[token]) || ~lexicon.lexicon[token].split("|").indexOf(rule.to))))
                        this.tags[index] = rule.to;
                    continue;
                }
                else if (type === brill_conditions_1.conditions.PREV1OR2TAG) {
                    tmp = this.tags[index - 1] || '';
                    tmp2 = this.tags[index - 2] || '';
                    if (tmp === rule.c1 || tmp2 === rule.c1 && ((!rule.verify) || ((!lexicon.lexicon[token]) || ~lexicon.lexicon[token].split("|").indexOf(rule.to))))
                        this.tags[index] = rule.to;
                    continue;
                }
                else if (type === brill_conditions_1.conditions.END) {
                    if ((!this.tags[index + 1]) && ((!rule.verify) || ((!lexicon.lexicon[token]) || ~lexicon.lexicon[token].split("|").indexOf(rule.to))))
                        this.tags[index] = rule.to;
                    continue;
                }
            }
        };
        this.Brill = function () {
            for (var i = 0; i < this.tags.length; i++) {
                if (this.blocked[i])
                    continue;
                this.apply(i, 1);
            }
            for (var i = 0; i < this.tags.length; i++) {
                if (this.blocked[i])
                    continue;
                this.apply(i, 2);
            }
        };
    }
    return Brill;
}());
exports.Brill = Brill;
