"use strict";
var inflectors = require("en-inflectors");
var lexicon = require("en-lexicon");
var PostBrill = (function () {
    function PostBrill() {
        this.PostBrill = function () {
            for (var i = 0; i < this.tags.length; i++) {
                if (this.blocked[i])
                    continue;
                var tag = this.tags[i];
                var token = this.tokens[i].toLowerCase();
                var prev1Tag = this.tags[i - 1] || "";
                var prev2Tag = this.tags[i - 2] || "";
                var prev3Tag = this.tags[i - 3] || "";
                var prev4Tag = this.tags[i - 4] || "";
                var next1Tag = this.tags[i + 1] || "";
                var next2Tag = this.tags[i + 2] || "";
                var next3Tag = this.tags[i + 3] || "";
                var next4Tag = this.tags[i + 4] || "";
                var prev1Token = (this.tokens[i - 1] || "").toLowerCase();
                var prev2Token = (this.tokens[i - 2] || "").toLowerCase();
                var prev3Token = (this.tokens[i - 3] || "").toLowerCase();
                var prev4Token = (this.tokens[i - 4] || "").toLowerCase();
                var next1Token = (this.tokens[i + 1] || "").toLowerCase();
                var next2Token = (this.tokens[i + 2] || "").toLowerCase();
                var next3Token = (this.tokens[i + 3] || "").toLowerCase();
                var next4Token = (this.tokens[i + 4] || "").toLowerCase();
                if ((tag === "NN" || tag === "VBP") && (~(lexicon.lexicon[token] || "").split("|").indexOf("VB") || ~(lexicon.lexicon[token] || "").split("|").indexOf("VBP"))) {
                    if ((prev1Tag === "TO") ||
                        (prev1Tag === "MD") ||
                        ((prev1Token === "'s" || prev1Token === "us") && prev2Token === "let")) {
                        this.tags[i] = "VB";
                        continue;
                    }
                }
                if ((tag === "NN" || tag === "VBP") && inflectors.infinitives[token]) {
                    if ((prev1Tag === "CC" && prev2Tag === "VB" && prev3Tag === "TO") ||
                        ((prev1Token === "n't" || prev1Token === "not") && ~["does", "do", "did"].indexOf(prev2Token)) ||
                        (~["does", "do", "did"].indexOf(prev1Token)) ||
                        (prev1Tag === "'" && prev2Tag === "TO")) {
                        this.tags[i] = "VB";
                        continue;
                    }
                }
                if (~["am", "a.m.", "a.m", "p.m", "pm", "p.m."].indexOf(token) && prev1Tag === "CD") {
                    this.tags[i] = "RB";
                    continue;
                }
                if (tag === "WDT" && prev1Tag.startsWith("NN") && next1Tag === "JJ") {
                    this.tags[i] = "IN";
                    continue;
                }
                if (tag === "VBP" && prev1Tag === "RB" && prev2Tag === "VBP") {
                    this.tags[i] = "VB";
                    continue;
                }
                if (tag === "JJR" && (next1Tag === "," || next1Tag === ".") && prev1Tag === "NN" && prev2Tag === "DT") {
                    this.tags[i] = "RBR";
                    continue;
                }
                if (tag === "JJ" && next1Tag === ".") {
                    if (prev1Tag === "DT" && prev2Tag === "IN") {
                        this.tags[i] = "NN";
                        continue;
                    }
                }
                if (tag === "VBN" && ~(lexicon.lexicon[token] || "").indexOf("VBD")) {
                    if (prev1Tag === "PRP" || (prev1Tag === "RB" && prev2Tag === "PRP")) {
                        this.tags[i] = "VBD";
                        continue;
                    }
                }
                if ((token === "when" || token === "how") && tag === "RB") {
                    this.tags[i] = "WRB";
                    continue;
                }
                if (tag === "JJ" && next1Tag === "JJ" && ~(lexicon.lexicon[token] || "").indexOf("VBG")) {
                    this.tags[i] = "VBG";
                    continue;
                }
                if (tag === 'JJ' && (prev1Tag === 'VBZ' || prev1Tag === 'VBP') && next1Tag === 'TO' && ~(lexicon.lexicon[token] || "").indexOf("VBN")) {
                    this.tags[i] = "VBN";
                    continue;
                }
                if (tag === "VBN" && ~(lexicon.lexicon[token] || "").indexOf("VBD")) {
                    if ((prev1Tag === "PRP") || prev1Tag === "RB" && prev2Tag === "PRP") {
                        this.tags[i] = "VBD";
                        continue;
                    }
                }
                if (~inflectors.infinitives[tag]) {
                    if (prev1Tag === "TO" || prev1Tag === "MD" || (prev1Tag === "RB" && prev2Tag === "MD")) {
                        this.tags[i] = "VB";
                        continue;
                    }
                }
                if (tag === "VBD" && ~(lexicon.lexicon[token] || "").indexOf("VBN")) {
                    if (next1Tag.indexOf("N") === 0 && prev1Tag === "IN") {
                        this.tags[i] = "JJ";
                        continue;
                    }
                    if ((prev1Tag === "RB") && ((prev2Tag === "DT" && prev3Tag === "IN") ||
                        (prev2Tag === "RB" && prev3Tag === "VBZ") ||
                        ((prev3Tag.indexOf("N") === 0 || prev3Tag === "PRP") && ~["VBZ", "VBP", "VBD"].indexOf(prev2Tag)))) {
                        this.tags[i] = "VBN";
                        continue;
                    }
                    if ((prev1Tag === "DT" && prev2Tag === "IN") ||
                        (prev1Tag === "VBP" && prev2Tag.startsWith("N") && prev3Tag === "DT") ||
                        ((prev2Tag === "MD" || prev2Tag === "TO") && prev1Tag === "VB") ||
                        (prev1Tag == "VBD") ||
                        (prev1Token === "has" || prev1Token === "have") ||
                        (prev1Token === "being" || prev1Token === "be") ||
                        (prev1Tag.startsWith("V") && next1Tag === "IN" && next2Tag.startsWith("N")) ||
                        (next1Token === "by" && next2Tag !== "CD" && next2Tag !== "SYM")) {
                        this.tags[i] = "VBN";
                        continue;
                    }
                }
            }
        };
    }
    return PostBrill;
}());
exports.PostBrill = PostBrill;
