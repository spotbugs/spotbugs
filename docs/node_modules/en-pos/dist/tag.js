"use strict";
var inflectors = require("en-inflectors");
var non_letters_1 = require("./tagging/non_letters");
var lexicon_1 = require("./tagging/lexicon");
var given_names_1 = require("./tagging/given_names");
var cities_1 = require("./tagging/cities");
var contractions_1 = require("./tagging/contractions");
var prefixes_1 = require("./tagging/prefixes");
var suffixes_1 = require("./tagging/suffixes");
var complex_words_1 = require("./tagging/complex_words");
var repetitive_1 = require("./tagging/repetitive");
var slang_1 = require("./tagging/slang");
var potential_proper_1 = require("./tagging/potential_proper");
var InitialTag = (function () {
    function InitialTag() {
        this.InitialTag = function () {
            for (var i = 0; i < this.tokens.length; i++) {
                var token = this.tokens[i];
                var meta_1 = this.meta[i];
                var nonLetter = non_letters_1.default(token);
                if (nonLetter) {
                    this.tags[i] = nonLetter;
                    this.confidence[i] = 1;
                    this.blocked[i] = true;
                    continue;
                }
                var lexiconSensitive = lexicon_1.default(token, true);
                if (lexiconSensitive) {
                    this.tags[i] = lexiconSensitive;
                    this.confidence[i] = 1;
                    this.blocked[i] = false;
                    continue;
                }
                var contraction = contractions_1.default(token);
                if (contraction) {
                    this.tags[i] = contraction;
                    this.confidence[i] = 1;
                    this.blocked[i] = true;
                    continue;
                }
                var givenNameSensitive = given_names_1.default(token, true);
                if (givenNameSensitive) {
                    this.tags[i] = givenNameSensitive;
                    this.confidence[i] = 0.9;
                    this.blocked[i] = true;
                    continue;
                }
                var citiesSensitive = cities_1.default(token, true);
                if (citiesSensitive) {
                    this.tags[i] = citiesSensitive;
                    this.confidence[i] = 0.9;
                    this.blocked[i] = true;
                    continue;
                }
                var lexiconInsensistive = lexicon_1.default(token);
                if (lexiconInsensistive) {
                    this.tags[i] = lexiconInsensistive;
                    this.confidence[i] = 0.8;
                    this.blocked[i] = false;
                    continue;
                }
                var givenNameInsensitive = given_names_1.default(token);
                if (givenNameInsensitive) {
                    this.tags[i] = givenNameInsensitive;
                    this.confidence[i] = 0.8;
                    this.blocked[i] = true;
                    continue;
                }
                var citiesInsensitive = cities_1.default(token);
                if (citiesInsensitive) {
                    this.tags[i] = citiesInsensitive;
                    this.confidence[i] = 0.8;
                    this.blocked[i] = true;
                    continue;
                }
                var metaBasedResolution = meta_1(meta_1);
                if (metaBasedResolution) {
                    this.tags[i] = metaBasedResolution;
                    this.confidence[i] = 0.6;
                    this.blocked[i] = false;
                    continue;
                }
                var suffixBasedResolution = suffixes_1.default(token);
                if (suffixBasedResolution) {
                    this.tags[i] = suffixBasedResolution;
                    this.confidence = 0.5;
                    this.blocked = false;
                    continue;
                }
                var complexWordsResolution = complex_words_1.default(token);
                if (complexWordsResolution) {
                    this.tags[i] = complexWordsResolution;
                    this.confidence = 0.5;
                    this.blocked = false;
                    continue;
                }
                var prefixBasedResolution = prefixes_1.default(token);
                if (prefixBasedResolution) {
                    this.tags[i] = prefixBasedResolution;
                    this.confidence = 0.5;
                    this.blocked = false;
                    continue;
                }
                var repititionResolution = repetitive_1.default(token);
                if (repititionResolution) {
                    this.tags[i] = repititionResolution;
                    this.confidence = 0.5;
                    this.blocked = false;
                    continue;
                }
                var slangResolution = slang_1.default(token);
                if (slangResolution) {
                    this.tags[i] = slangResolution;
                    this.confidence = 0.5;
                    this.blocked = false;
                    continue;
                }
                ;
                var potentialProperResolution = potential_proper_1.default(token);
                if (potentialProperResolution) {
                    this.tags[i] = potentialProperResolution;
                    this.confidence = 0.5;
                    this.blocked = false;
                    continue;
                }
                if (new inflectors.Inflectors(token).isPlural()) {
                    this.tags[i] = "NNS";
                    this.confidence = 0;
                    this.blocked = false;
                    continue;
                }
                this.tags[i] = "NN";
            }
            return this;
        };
    }
    return InitialTag;
}());
exports.InitialTag = InitialTag;
