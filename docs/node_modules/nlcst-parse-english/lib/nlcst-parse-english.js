"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var en_pos_1 = require("en-pos");
var visit = require("unist-util-visit");
var toString = require("nlcst-to-string");
var English = require("parse-english");
// fix for the word "constructor" which is not in the lexicon (and returns a function which for
// https://github.com/noblesamurai/node-pos-tag/blob/master/index.js
var lexicon = require("en-lexicon");
lexicon.lexicon["constructor"] = "NNP";
var EnglishParser = /** @class */ (function () {
    function EnglishParser() {
        this.parser = new English();
    }
    EnglishParser.prototype.parse = function (text) {
        var NLCST = this.parser.parse(text);
        visit(NLCST, "SentenceNode", function (node) {
            var sentenceChildren = node.children.filter(function (c) {
                return ["WordNode", "PunctuationNode", "SymbolNode"].includes(c.type);
            });
            var strings = sentenceChildren.map(function (c) { return toString(c); });
            // HACK: Truncate any word longer than 40 chars as en-pos will not be performant.
            var tags = new en_pos_1.Tag(strings.map(function (word) { return word.slice(0, 40); })).initial().smooth().tags;
            sentenceChildren.forEach(function (node, i) {
                node.data = {
                    pos: tags[i]
                };
            });
        });
        return NLCST;
    };
    return EnglishParser;
}());
exports.EnglishParser = EnglishParser;
//# sourceMappingURL=nlcst-parse-english.js.map