{"version":3,"sources":["../src/rst-to-ast.js"],"names":[],"mappings":"AAAA;;;;;QAsBgB;;AApBhB;;AACA;;;;AACA;;;;AACA;;;;AAEA,SAAS,8BAAT,CAAwC,IAAxC,EAA8C;AAC1C,WAAO,IAAP,+BAAiC,OAAjC,CAAyC,eAAO;AAC5C,YAAI,IAAI,KAAK,GAAL,CAAJ,CADwC;AAE5C,aAAK,6BAAoB,GAApB,CAAL,IAAiC,CAAjC,CAF4C;AAG5C,YAAI,MAAM,SAAN,EAAiB;AACjB,mBAAO,KAAK,GAAL,CAAP,CADiB;SAArB;KAHqC,CAAzC,CAD0C;CAA9C;;;;;;;AAeO,SAAS,KAAT,CAAe,IAAf,EAAqB;AACxB,QAAI,MAAM,KAAK,KAAL,CAAW,6BAAS,YAAT,EAAuB,EAAC,OAAO,IAAP,EAAxB,CAAX,CAAN,CADoB;AAExB,QAAM,MAAM,+BAAqB,IAArB,CAAN,CAFkB;AAGxB,4BAAS,GAAT,EAAc,OAAd,CAAsB,UAAU,IAAV,EAAgB;AAClC,YAAI,KAAK,OAAL,EAAc;AACd,2CAA+B,IAA/B;;AADc,gBAGV,KAAK,IAAL,KAAc,IAAd,EAAoB;AACpB,qBAAK,IAAL,GAAY,MAAZ,CADoB;aAAxB;AAGA,iBAAK,IAAL,GAAY,mBAAU,KAAK,IAAL,CAAtB,CANc;AAOd,gBAAI,CAAC,KAAK,IAAL,EAAW;AACZ,qBAAK,IAAL,GAAY,SAAZ,CADY;aAAhB;;AAPc,gBAWd,CAAK,GAAL,GAAW,KAAK,GAAL,IAAY,KAAK,KAAL,IAAc,EAA1B;;AAXG,gBAaV,QAAQ,KAAK,GAAL,CAAS,KAAT,CAAe,IAAf,CAAR,CAbU;AAcd,gBAAI,KAAK,IAAL,EAAW;AACX,qBAAK,GAAL,GAAW;AACP,2BAAO,EAAC,MAAM,KAAK,IAAL,CAAU,KAAV,EAAiB,QAAQ,CAAR,EAA/B;AACA,yBAAK,EAAC,MAAM,KAAK,IAAL,CAAU,GAAV,EAAe,QAAQ,MAAM,MAAM,MAAN,GAAa,CAAb,CAAN,CAAsB,MAAtB,EAAnC;iBAFJ,CADW;AAKX,qBAAK,KAAL,GAAa,IAAI,eAAJ,CAAoB,KAAK,GAAL,CAAjC,CALW;AAMX,uBAAO,KAAK,IAAL,CANI;aAAf;SAdJ;KADkB,CAAtB,CAHwB;AA4BxB,WAAO,GAAP,CA5BwB;CAArB","file":"rst-to-ast.js","sourcesContent":["\"use strict\";\n\nimport { execSync } from \"child_process\";\nimport traverse from \"traverse\";\nimport StructuredSource from \"structured-source\";\nimport { syntaxMap, reSTAttributeKeyMap } from \"./mapping\";\n\nfunction filterAndReplaceNodeAttributes(node) {\n    Object.keys(reSTAttributeKeyMap).forEach(key => {\n        let v = node[key];\n        node[reSTAttributeKeyMap[key]] = v;\n        if (v !== undefined) {\n            delete node[key];\n        }\n    });\n}\n\n/**\n * parse reStructuredText and return ast mapped location info.\n * @param {string} text\n * @returns {TxtNode}\n */\nexport function parse(text) {\n    let ast = JSON.parse(execSync(\"rst2ast -q\", {input: text}));\n    const src = new StructuredSource(text);\n    traverse(ast).forEach(function (node) {\n        if (this.notLeaf) {\n            filterAndReplaceNodeAttributes(node);\n            // type\n            if (node.type === null) {\n                node.type = \"text\";\n            }\n            node.type = syntaxMap[node.type];\n            if (!node.type) {\n                node.type = \"Unknown\";\n            }\n            // raw\n            node.raw = node.raw || node.value || \"\";\n            // loc\n            let lines = node.raw.split(\"\\n\");\n            if (node.line) {\n                node.loc = {\n                    start: {line: node.line.start, column: 0},\n                    end: {line: node.line.end, column: lines[lines.length-1].length}\n                };\n                node.range = src.locationToRange(node.loc);\n                delete node.line;\n            }\n        }\n    });\n    return ast;\n}\n"]}