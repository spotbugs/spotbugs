export interface PatternMatchDictArgs {
    index: number;
    match: string;
    captures: string[];
    all: string;
}
export interface TestMatchReplaceReturnDict {
    pattern: RegExp;
    replace: (args: PatternMatchDictArgs) => string;
    test?: (args: PatternMatchDictArgs) => boolean;
    message?: (args: PatternMatchDictArgs) => string;
}
export interface TestMatchReplaceReturnResult {
    index: number;
    match: string;
    replace: string;
    message?: string;
}
export interface TestMatchReplaceReturn {
    ok: boolean;
    results: TestMatchReplaceReturnResult[];
}
/**
 * replace `text` with `results`.
 */
export declare const replaceAll: (
    text: string,
    results: TestMatchReplaceReturnResult[]
) => {
    ok: boolean;
    output: string;
};
/**
 * test `text`, match `text`, and replace `text.
 */
export declare const testMatchReplace: (text: string, dict: TestMatchReplaceReturnDict) => TestMatchReplaceReturn;
