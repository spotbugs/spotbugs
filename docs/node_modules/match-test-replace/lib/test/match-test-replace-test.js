"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var match_test_replace_1 = require("../src/match-test-replace");
var assert = require("assert");
var nlcst_pattern_match_1 = require("nlcst-pattern-match");
var nlcst_parse_english_1 = require("nlcst-parse-english");
describe("testMatchReplace", function () {
    describe("PatternMatchDictArgs", function () {
        it("replace args", function () {
            var text = "ALL-XYZ_ABC";
            var replaceArgsCaptures = [];
            var res = match_test_replace_1.matchTestReplace(text, {
                pattern: /X(Y+)Z.*(ABC)/,
                replace: function (args) {
                    replaceArgsCaptures.push(args);
                    return "";
                }
            });
            assert.ok(res.ok === true, "should be ok: true");
            assert.strictEqual(replaceArgsCaptures.length, 1, "replace should be called 1");
            var replaceArgsCapture = replaceArgsCaptures[0];
            assert.strictEqual(replaceArgsCapture.index, 4, "index");
            assert.deepEqual(replaceArgsCapture.match, "XYZ_ABC");
            assert.strictEqual(replaceArgsCapture.all, "ALL-XYZ_ABC");
            assert.deepEqual(replaceArgsCapture.captures, ["Y", "ABC"]);
        });
        it("test args", function () {
            var text = "ALL-XYZ_ABC";
            var testArgsCaptures = [];
            var res = match_test_replace_1.matchTestReplace(text, {
                pattern: /X(Y+)Z.*(ABC)/,
                replace: function () {
                    return "";
                },
                test: function (args) {
                    testArgsCaptures.push(args);
                    return true;
                }
            });
            assert.ok(res.ok === true, "should be ok: true");
            assert.strictEqual(testArgsCaptures.length, 1, "replace should be called 1");
            var replaceArgsCapture = testArgsCaptures[0];
            assert.strictEqual(replaceArgsCapture.index, 4, "index");
            assert.deepEqual(replaceArgsCapture.match, "XYZ_ABC");
            assert.strictEqual(replaceArgsCapture.all, "ALL-XYZ_ABC");
            assert.deepEqual(replaceArgsCapture.captures, ["Y", "ABC"]);
            // replace results
            assert.strictEqual(match_test_replace_1.replaceAll(text, res.results).output, "ALL-");
        });
    });
    describe("replaceAll", function () {
        it("should replace ", function () {
            var text = "12345asdfghjkl";
            var res = match_test_replace_1.matchTestReplace(text, {
                pattern: /\w+/,
                replace: function (_a) {
                    var match = _a.match;
                    return match.toUpperCase();
                }
            });
            var replacedText = match_test_replace_1.replaceAll(text, res.results).output;
            assert.strictEqual(replacedText, "12345ASDFGHJKL");
        });
        it("should work to multiple results", function () {
            var text = "12345asdfghjkl";
            var res = match_test_replace_1.matchTestReplace(text, {
                pattern: /(\d)/g,
                replace: function (_a) {
                    var captures = _a.captures;
                    return captures[0] + "_";
                }
            });
            assert.strictEqual(res.results.length, 5);
            var replacedText = match_test_replace_1.replaceAll(text, res.results).output;
            assert.strictEqual(replacedText, "1_2_3_4_5_asdfghjkl");
        });
    });
    describe("testMatchReplace", function () {
        it("should return ok:false when no match", function () {
            var text = "Hello";
            var res = match_test_replace_1.matchTestReplace(text, {
                pattern: /no match/,
                replace: function () { return "Hello"; }
            });
            assert.ok(res.ok === false, "should be ok: false");
            assert.strictEqual(res.results.length, 0, "no results");
        });
        it("should return ok:true when match", function () {
            var text = "Hello";
            var res = match_test_replace_1.matchTestReplace(text, {
                pattern: /hello/i,
                replace: function () { return "Hello"; }
            });
            assert.ok(res.ok, "should be ok: true");
            assert.strictEqual(res.results.length, 1, "1 replace");
        });
        it("should return ok:true when test() => false, but it is not replace", function () {
            var text = "before";
            var res = match_test_replace_1.matchTestReplace(text, {
                pattern: /before/i,
                replace: function () { return "after"; },
                test: function () {
                    return false;
                }
            });
            assert.ok(res.ok === true, "should be ok: false");
            assert.strictEqual(res.results.length, 0, "no replace");
        });
        it("should return results if return ok:true and test() => true", function () {
            var text = "webkit is matched,but node-webkit is not match";
            var res = match_test_replace_1.matchTestReplace(text, {
                pattern: /(\S*?)webkit/g,
                replace: function () { return "WebKit"; },
                test: function (_a) {
                    var captures = _a.captures;
                    return captures[0] !== "node-";
                }
            });
            assert.ok(res.ok === true, "should be ok: false");
            assert.strictEqual(res.results.length, 1, "no replace");
            assert.strictEqual(match_test_replace_1.replaceAll(text, res.results).output, "WebKit is matched,but node-webkit is not match");
        });
        it("should replace complex example", function () {
            var englishParser = new nlcst_parse_english_1.EnglishParser();
            var matcher = new nlcst_pattern_match_1.PatternMatcher({ parser: englishParser });
            // https://developers.google.com/style/clause-order
            // NG: Click Delete if you want to delete the entire document.
            // OK: To delete the entire document, click Delete.
            var text = "Click Delete if you want to delete the entire document.";
            var res = match_test_replace_1.matchTestReplace(text, {
                pattern: /Click (\w+) if you want to (.+)./,
                replace: function (_a) {
                    var captures = _a.captures;
                    return "To " + captures[1] + ", click " + captures[0] + ".";
                },
                test: function (_a) {
                    var all = _a.all;
                    var pattern = (_b = ["Click ", ""], _b.raw = ["Click ",
                        ""], matcher.tag(_b, {
                        type: "WordNode",
                        data: {
                            // Verb
                            pos: /^VB/
                        }
                    }));
                    return matcher.test(all, pattern);
                    var _b;
                }
            });
            assert.ok(res.ok === true, "should be ok: true");
            var output = match_test_replace_1.replaceAll(text, res.results).output;
            assert.strictEqual(output, "To delete the entire document, click Delete.");
        });
    });
});
//# sourceMappingURL=match-test-replace-test.js.map