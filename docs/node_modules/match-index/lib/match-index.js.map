{"version":3,"sources":["../src/match-index.js"],"names":[],"mappings":"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","file":"match-index.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nconst flagsGetter = require(\"regexp.prototype.flags\");\nconst assert = require(\"assert\");\n\n/**\n * @typedef {Object} MatchCaptureGroup\n * @property {string} text - text is matched texts\n * @property {number} index - index is start of match\n */\n/**\n * @typedef {Object} MatchAllGroup\n * @property {Array} all\n * @property {string} input\n * @property {number} index\n * @property {MatchCaptureGroup[]} captureGroups\n */\n\n/**\n * @param {string} text\n * @param {RegExp} regExp regExp should include capture\n * @returns {MatchCaptureGroup[]} return array of MatchCaptureGroup\n */\nexport function matchCaptureGroupAll(text, regExp) {\n    const source = regExp.source;\n    assert(source.indexOf(\"(\") >= 0, \"RegExp should contain capture group at least one\");\n    const all = matchAll(text, regExp);\n    const captureGroups = [];\n    all.forEach(match => {\n        match.captureGroups.forEach(captureGroup => {\n            captureGroups.push(captureGroup);\n        });\n    });\n    return captureGroups;\n}\n/**\n * matchAll function inspired String.prototype.matchAll\n * @param {String} text\n * @param {RegExp} regExp\n * @returns {MatchAllGroup[]}\n * @see reference https://github.com/tc39/String.prototype.matchAll\n * http://stackoverflow.com/questions/15934353/get-index-of-each-capture-in-a-javascript-regex\n */\nexport function matchAll(text, regExp) {\n    const matches = [];\n    let flags = regExp.flags || flagsGetter(regExp);\n    if (flags.indexOf('g') === -1) {\n        flags = 'g' + flags;\n    }\n    const rx = new RegExp(regExp.source, flags);\n    text.replace(rx, function () {\n        const matchAll = Array.prototype.slice.call(arguments, 0, -2);\n        const match = {};\n        match.all = matchAll;\n\n        match.input = arguments[arguments.length - 1];\n        match.index = arguments[arguments.length - 2];\n        const groups = matchAll.slice(1);\n\n        const captureGroups = [];\n        for (let cursor = match.index, l = groups.length, i = 0; i < l; i++) {\n            let index = cursor;\n\n            if (i + 1 !== l && groups[i] !== groups[i + 1]) {\n                const nextIndex = text.indexOf(groups[i + 1], cursor);\n                while (true) {\n                    const currentIndex = text.indexOf(groups[i], index);\n                    if (currentIndex !== -1 && currentIndex <= nextIndex) {\n                        index = currentIndex + 1;\n                    } else {\n                        break;\n                    }\n                }\n                index--;\n            } else {\n                index = text.indexOf(groups[i], cursor);\n                \n            }\n            cursor = index + groups[i].length;\n            const captureGroup = {\n                text: groups[i],\n                index\n            };\n            captureGroups.push(captureGroup);\n        }\n        match.captureGroups = captureGroups;\n        matches.push(match);\n        /*\n            index,\n            input,\n            all,\n            captureGroups = [{\n                text,\n                index\n            }]\n         */\n    });\n    return matches;\n}\n"]}