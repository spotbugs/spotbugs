{"version":3,"sources":["../src/textlint-rule-en-capitalization.js"],"names":["require","RuleHelper","splitAST","SentenceSyntax","Syntax","REPORT_TYPE","Heading","Paragraph","List","shouldNotCapitalized","string","allowWords","shouldAllowed","some","allowWord","test","pos","checkNode","node","getSource","report","RuleError","fixer","allowFigures","reportType","DocumentURL","paragraphNode","children","filter","sentence","type","Sentence","forEach","sentenceFirstNode","Str","text","value","firstWord","split","index","fix","replaceTextRange","length","Image","alt","DefaultOptions","allowHeading","allowLists","context","options","undefined","Array","isArray","helper","Header","isChildNode","Link","BlockQuote","Emphasis","ListItem","paragraph","module","exports","linter"],"mappings":"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","file":"textlint-rule-en-capitalization.js","sourcesContent":["// MIT Â© 2017 azu\n\"use strict\";\nconst { RuleHelper } = require(\"textlint-rule-helper\");\nconst { splitAST, Syntax: SentenceSyntax } = require(\"sentence-splitter\");\nimport { getPosFromSingleWord, isCapitalized, upperFirstCharacter } from \"./captalize\";\n\nconst REPORT_TYPE = {\n    Heading: \"Heading\",\n    Paragraph: \"Paragraph\",\n    List: \"List\"\n};\nconst shouldNotCapitalized = (string, allowWords) => {\n    // allow words\n    const shouldAllowed = allowWords.some(allowWord => {\n        return allowWord === string;\n    });\n    if (shouldAllowed) {\n        return true;\n    }\n    // A quotation\n    if (!/^\\w/.test(string)) {\n        return true;\n    }\n    // proper word\n    const pos = getPosFromSingleWord(string);\n    if (/^NNP/.test(pos)) {\n        return true;\n    }\n    return false;\n};\n\n/**\n * @param node\n * @param Syntax\n * @param {function} getSource\n * @param report\n * @param RuleError\n * @param fixer\n * @param {boolean} allowFigures enable figures check\n * @param {string[]} allowWords allow lower-case words\n * @param {string} reportType REPORT_TYPE\n */\nconst checkNode = ({ node, Syntax, getSource, report, RuleError, fixer, allowFigures, allowWords, reportType }) => {\n    const DocumentURL = \"https://owl.english.purdue.edu/owl/resource/592/01/\";\n    const paragraphNode = splitAST(node);\n    paragraphNode.children.filter(sentence => sentence.type === SentenceSyntax.Sentence).forEach(sentence => {\n        const sentenceFirstNode = sentence.children[0];\n        if (!sentenceFirstNode) {\n            return;\n        }\n        // check first word is String\n        if (sentenceFirstNode.type === Syntax.Str) {\n            const text = sentenceFirstNode.value;\n            const firstWord = text.split(/\\s/)[0];\n            if (isCapitalized(firstWord) || shouldNotCapitalized(firstWord, allowWords)) {\n                return;\n            }\n            const index = 0;\n            return report(\n                sentenceFirstNode,\n                new RuleError(\n                    `${reportType}: Follow the standard capitalization rules for American English.\nSee ${DocumentURL}`,\n                    {\n                        index: index,\n                        fix: fixer.replaceTextRange([index, index + firstWord.length], upperFirstCharacter(firstWord))\n                    }\n                )\n            );\n        } else if (\n            allowFigures &&\n            sentenceFirstNode.type === Syntax.Image &&\n            typeof sentenceFirstNode.alt === \"string\"\n        ) {\n            const text = sentenceFirstNode.alt;\n            if (isCapitalized(text) || shouldNotCapitalized(text, allowWords)) {\n                return;\n            }\n            return report(\n                sentenceFirstNode,\n                new RuleError(\n                    `Image alt: Follow the standard capitalization rules for American English\nSee ${DocumentURL}`\n                )\n            );\n        }\n    });\n};\n\nconst DefaultOptions = {\n    // allow lower-case words in Header\n    allowHeading: true,\n    // allow lower-case words in Image alt\n    allowFigures: true,\n    // allow lower-case words in ListItem\n    allowLists: true,\n    // allow lower-case words in anywhere\n    allowWords: []\n};\nconst report = (context, options = {}) => {\n    const { Syntax, RuleError, getSource, fixer, report } = context;\n    const allowHeading = options.allowHeading !== undefined ? options.allowHeading : DefaultOptions.allowHeading;\n    const allowLists = options.allowLists !== undefined ? options.allowLists : DefaultOptions.allowLists;\n    const allowFigures = options.allowFigures !== undefined ? options.allowFigures : DefaultOptions.allowFigures;\n    const allowWords = Array.isArray(options.allowWords) ? options.allowWords : DefaultOptions.allowWords;\n    const helper = new RuleHelper(context);\n    return {\n        [Syntax.Header](node) {\n            // options\n            if (!allowHeading) {\n                return;\n            }\n            checkNode({\n                node,\n                Syntax,\n                getSource,\n                report,\n                RuleError,\n                fixer,\n                allowFigures,\n                allowWords,\n                reportType: REPORT_TYPE.Heading\n            });\n        },\n        [Syntax.Paragraph](node) {\n            if (helper.isChildNode(node, [Syntax.Link, Syntax.Image, Syntax.BlockQuote, Syntax.Emphasis])) {\n                return;\n            }\n            if (helper.isChildNode(node, [Syntax.ListItem])) {\n                return;\n            }\n            checkNode({\n                node,\n                Syntax,\n                getSource,\n                report,\n                RuleError,\n                fixer,\n                allowFigures,\n                allowWords,\n                reportType: REPORT_TYPE.Paragraph\n            });\n        },\n        [Syntax.ListItem](node) {\n            if (!allowLists) {\n                return;\n            }\n            node.children.forEach(paragraph => {\n                checkNode({\n                    node: paragraph,\n                    Syntax,\n                    getSource,\n                    report,\n                    RuleError,\n                    fixer,\n                    allowFigures,\n                    allowWords,\n                    reportType: REPORT_TYPE.List\n                });\n            });\n        }\n    };\n};\nmodule.exports = {\n    linter: report,\n    fixer: report\n};\n"]}