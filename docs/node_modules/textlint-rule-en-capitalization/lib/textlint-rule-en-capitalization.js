// MIT Â© 2017 azu
"use strict";

var _captalize = require("./captalize");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var _require = require("textlint-rule-helper"),
    RuleHelper = _require.RuleHelper;

var _require2 = require("sentence-splitter"),
    splitAST = _require2.splitAST,
    SentenceSyntax = _require2.Syntax;

var REPORT_TYPE = {
    Heading: "Heading",
    Paragraph: "Paragraph",
    List: "List"
};
var shouldNotCapitalized = function shouldNotCapitalized(string, allowWords) {
    // allow words
    var shouldAllowed = allowWords.some(function (allowWord) {
        return allowWord === string;
    });
    if (shouldAllowed) {
        return true;
    }
    // A quotation
    if (!/^\w/.test(string)) {
        return true;
    }
    // proper word
    var pos = (0, _captalize.getPosFromSingleWord)(string);
    if (/^NNP/.test(pos)) {
        return true;
    }
    return false;
};

/**
 * @param node
 * @param Syntax
 * @param {function} getSource
 * @param report
 * @param RuleError
 * @param fixer
 * @param {boolean} allowFigures enable figures check
 * @param {string[]} allowWords allow lower-case words
 * @param {string} reportType REPORT_TYPE
 */
var checkNode = function checkNode(_ref) {
    var node = _ref.node,
        Syntax = _ref.Syntax,
        getSource = _ref.getSource,
        report = _ref.report,
        RuleError = _ref.RuleError,
        fixer = _ref.fixer,
        allowFigures = _ref.allowFigures,
        allowWords = _ref.allowWords,
        reportType = _ref.reportType;

    var DocumentURL = "https://owl.english.purdue.edu/owl/resource/592/01/";
    var paragraphNode = splitAST(node);
    paragraphNode.children.filter(function (sentence) {
        return sentence.type === SentenceSyntax.Sentence;
    }).forEach(function (sentence) {
        var sentenceFirstNode = sentence.children[0];
        if (!sentenceFirstNode) {
            return;
        }
        // check first word is String
        if (sentenceFirstNode.type === Syntax.Str) {
            var text = sentenceFirstNode.value;
            var firstWord = text.split(/\s/)[0];
            if ((0, _captalize.isCapitalized)(firstWord) || shouldNotCapitalized(firstWord, allowWords)) {
                return;
            }
            var index = 0;
            return report(sentenceFirstNode, new RuleError(reportType + ": Follow the standard capitalization rules for American English.\nSee " + DocumentURL, {
                index: index,
                fix: fixer.replaceTextRange([index, index + firstWord.length], (0, _captalize.upperFirstCharacter)(firstWord))
            }));
        } else if (allowFigures && sentenceFirstNode.type === Syntax.Image && typeof sentenceFirstNode.alt === "string") {
            var _text = sentenceFirstNode.alt;
            if ((0, _captalize.isCapitalized)(_text) || shouldNotCapitalized(_text, allowWords)) {
                return;
            }
            return report(sentenceFirstNode, new RuleError("Image alt: Follow the standard capitalization rules for American English\nSee " + DocumentURL));
        }
    });
};

var DefaultOptions = {
    // allow lower-case words in Header
    allowHeading: true,
    // allow lower-case words in Image alt
    allowFigures: true,
    // allow lower-case words in ListItem
    allowLists: true,
    // allow lower-case words in anywhere
    allowWords: []
};
var report = function report(context) {
    var _ref2;

    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var Syntax = context.Syntax,
        RuleError = context.RuleError,
        getSource = context.getSource,
        fixer = context.fixer,
        report = context.report;

    var allowHeading = options.allowHeading !== undefined ? options.allowHeading : DefaultOptions.allowHeading;
    var allowLists = options.allowLists !== undefined ? options.allowLists : DefaultOptions.allowLists;
    var allowFigures = options.allowFigures !== undefined ? options.allowFigures : DefaultOptions.allowFigures;
    var allowWords = Array.isArray(options.allowWords) ? options.allowWords : DefaultOptions.allowWords;
    var helper = new RuleHelper(context);
    return _ref2 = {}, _defineProperty(_ref2, Syntax.Header, function (node) {
        // options
        if (!allowHeading) {
            return;
        }
        checkNode({
            node: node,
            Syntax: Syntax,
            getSource: getSource,
            report: report,
            RuleError: RuleError,
            fixer: fixer,
            allowFigures: allowFigures,
            allowWords: allowWords,
            reportType: REPORT_TYPE.Heading
        });
    }), _defineProperty(_ref2, Syntax.Paragraph, function (node) {
        if (helper.isChildNode(node, [Syntax.Link, Syntax.Image, Syntax.BlockQuote, Syntax.Emphasis])) {
            return;
        }
        if (helper.isChildNode(node, [Syntax.ListItem])) {
            return;
        }
        checkNode({
            node: node,
            Syntax: Syntax,
            getSource: getSource,
            report: report,
            RuleError: RuleError,
            fixer: fixer,
            allowFigures: allowFigures,
            allowWords: allowWords,
            reportType: REPORT_TYPE.Paragraph
        });
    }), _defineProperty(_ref2, Syntax.ListItem, function (node) {
        if (!allowLists) {
            return;
        }
        node.children.forEach(function (paragraph) {
            checkNode({
                node: paragraph,
                Syntax: Syntax,
                getSource: getSource,
                report: report,
                RuleError: RuleError,
                fixer: fixer,
                allowFigures: allowFigures,
                allowWords: allowWords,
                reportType: REPORT_TYPE.List
            });
        });
    }), _ref2;
};
module.exports = {
    linter: report,
    fixer: report
};
//# sourceMappingURL=textlint-rule-en-capitalization.js.map