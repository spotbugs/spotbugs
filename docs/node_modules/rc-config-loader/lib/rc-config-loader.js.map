{"version":3,"sources":["../src/rc-config-loader.js"],"names":["path","require","debug","requireFromString","JSON5","fs","pathExists","objectAssign","keys","defaultLoaderByExt","loadJSConfigFile","loadJSONConfigFile","loadYAMLConfigFile","defaultOptions","packageJSON","defaultExtension","cwd","process","module","exports","rcConfigLoader","pkgName","opts","configFileName","packageJSONFieldName","fieldName","parts","splitPath","loaders","Array","isArray","map","extension","loaderByExt","findConfig","exts","length","ext","shift","configLocation","join","sync","loader","result","config","filePath","i","pkgJSONLoc","pkgJSON","pop","undefined","x","resolve","split","sep","filename","suppress","content","readFileSync","e","message","parse","readFile","yaml","safeLoad"],"mappings":"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","file":"rc-config-loader.js","sourcesContent":["// MIT © 2017 azu\n// MIT © Zoltan Kochan\n// Original https://github.com/zkochan/rcfile\n\"use strict\";\nconst path = require(\"path\");\nconst debug = require(\"debug\")(\"rc-config-loader\");\nconst requireFromString = require(\"require-from-string\");\nconst JSON5 = require(\"json5\");\nconst fs = require(\"fs\");\nconst pathExists = require(\"path-exists\");\nconst objectAssign = require(\"object-assign\");\nconst keys = require(\"object-keys\");\n\nconst defaultLoaderByExt = {\n    \".js\": loadJSConfigFile,\n    \".json\": loadJSONConfigFile,\n    \".yaml\": loadYAMLConfigFile,\n    \".yml\": loadYAMLConfigFile\n};\n\nconst defaultOptions = {\n    // does look for `package.json`\n    packageJSON: false,\n    // treat default(no ext file) as some extension\n    defaultExtension: [\".json\", \".yaml\", \".yml\", \".js\"],\n    cwd: process.cwd()\n};\n\n/**\n * @param {string} pkgName\n * @param {rcConfigLoaderOption} [opts]\n * @returns {{ config: Object, filePath:string } | undefined}\n */\nmodule.exports = function rcConfigLoader(pkgName, opts = {}) {\n    // path/to/config or basename of config file.\n    const configFileName = opts.configFileName || `.${pkgName}rc`;\n    const defaultExtension = opts.defaultExtension || defaultOptions.defaultExtension;\n    const cwd = opts.cwd || defaultOptions.cwd;\n    const packageJSON = opts.packageJSON || defaultOptions.packageJSON;\n    const packageJSONFieldName = typeof packageJSON === \"object\" ? packageJSON.fieldName : pkgName;\n\n    const parts = splitPath(cwd);\n\n    const loaders = Array.isArray(defaultExtension)\n        ? defaultExtension.map(extension => defaultLoaderByExt[extension])\n        : defaultLoaderByExt[defaultExtension];\n\n    const loaderByExt = objectAssign({}, defaultLoaderByExt, {\n        \"\": loaders\n    });\n\n    return findConfig({ parts, loaderByExt, configFileName, packageJSON, packageJSONFieldName });\n};\n\n/**\n *\n * @param {string[]} parts\n * @param {Object} loaderByExt\n * @param {string} configFileName\n * @param {boolean|Object} packageJSON\n * @param {string} packageJSONFieldName\n * @returns {{\n *  config: string,\n *  filePath: string\n * }|undefined}\n */\nfunction findConfig({ parts, loaderByExt, configFileName, packageJSON, packageJSONFieldName }) {\n    const exts = keys(loaderByExt);\n    while (exts.length) {\n        const ext = exts.shift();\n        const configLocation = join(parts, configFileName + ext);\n        if (!pathExists.sync(configLocation)) {\n            continue;\n        }\n        const loaders = loaderByExt[ext];\n        if (!Array.isArray(loaders)) {\n            const loader = loaders;\n            const result = loader(configLocation);\n            if (!result) {\n                continue;\n            }\n            return {\n                config: loader(configLocation),\n                filePath: configLocation\n            };\n        }\n        for (let i = 0; i < loaders.length; i++) {\n            const loader = loaders[i];\n            const result = loader(configLocation, true);\n            if (!result) {\n                continue;\n            }\n            return {\n                config: result,\n                filePath: configLocation\n            };\n        }\n    }\n\n    if (packageJSON) {\n        const pkgJSONLoc = join(parts, \"package.json\");\n        if (pathExists.sync(pkgJSONLoc)) {\n            const pkgJSON = require(pkgJSONLoc);\n            if (pkgJSON[packageJSONFieldName]) {\n                return {\n                    config: pkgJSON[packageJSONFieldName],\n                    filePath: pkgJSONLoc\n                };\n            }\n        }\n    }\n    if (parts.pop()) {\n        return findConfig({ parts, loaderByExt, configFileName, packageJSON, packageJSONFieldName });\n    }\n    return undefined;\n}\n\nfunction splitPath(x) {\n    return path.resolve(x || \"\").split(path.sep);\n}\n\nfunction join(parts, filename) {\n    return path.resolve(parts.join(path.sep) + path.sep, filename);\n}\n\nfunction loadJSConfigFile(filePath, suppress) {\n    debug(`Loading JavaScript config file: ${filePath}`);\n    try {\n        const content = fs.readFileSync(filePath, \"utf-8\");\n        return requireFromString(content, filePath);\n    } catch (e) {\n        debug(`Error reading JavaScript file: ${filePath}`);\n        if (!suppress) {\n            e.message = `Cannot read config file: ${filePath}\\nError: ${e.message}`;\n            throw e;\n        }\n    }\n}\n\nfunction loadJSONConfigFile(filePath, suppress) {\n    debug(`Loading JSON config file: ${filePath}`);\n\n    try {\n        return JSON5.parse(readFile(filePath));\n    } catch (e) {\n        debug(`Error reading JSON file: ${filePath}`);\n        if (!suppress) {\n            e.message = `Cannot read config file: ${filePath}\\nError: ${e.message}`;\n            throw e;\n        }\n    }\n}\n\nfunction readFile(filePath) {\n    return fs.readFileSync(filePath, \"utf8\");\n}\n\nfunction loadYAMLConfigFile(filePath, suppress) {\n    debug(`Loading YAML config file: ${filePath}`);\n\n    // lazy load YAML to improve performance when not used\n    const yaml = require(\"js-yaml\");\n\n    try {\n        // empty YAML file can be null, so always use\n        return yaml.safeLoad(readFile(filePath)) || {};\n    } catch (e) {\n        debug(`Error reading YAML file: ${filePath}`);\n        if (!suppress) {\n            e.message = `Cannot read config file: ${filePath}\\nError: ${e.message}`;\n            throw e;\n        }\n    }\n}\n"]}