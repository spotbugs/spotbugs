// LICENSE : MIT
"use strict";

var _textlintRuleHelper = require("textlint-rule-helper");

var _matchIndex = require("match-index");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var defaultOptions = {
    // allow to use !
    "allowHalfWidthExclamation": false,
    // allow to use ！
    "allowFullWidthExclamation": false,
    // allow to use ?
    "allowHalfWidthQuestion": false,
    // allow to use ？
    "allowFullWidthQuestion": false
};
var Mark = {
    HalfWidthExclamation: /(!)/,
    FullWidthExclamation: /(！)/,
    HalfWidthQuestion: /(\?)/,
    FullWidthQuestion: /(？)/
};

module.exports = function (context) {
    var options = arguments.length <= 1 || arguments[1] === undefined ? defaultOptions : arguments[1];
    var Syntax = context.Syntax;
    var RuleError = context.RuleError;
    var report = context.report;
    var getSource = context.getSource;

    var helper = new _textlintRuleHelper.RuleHelper(context);
    var allowHalfWidthExclamation = options.allowHalfWidthExclamation || defaultOptions.allowHalfWidthExclamation;
    var allowFullWidthExclamation = options.allowFullWidthExclamation || defaultOptions.allowFullWidthExclamation;
    var allowHalfWidthQuestion = options.allowHalfWidthQuestion || defaultOptions.allowHalfWidthQuestion;
    var allowFullWidthQuestion = options.allowFullWidthQuestion || defaultOptions.allowFullWidthQuestion;

    return _defineProperty({}, Syntax.Str, function (node) {
        if (helper.isChildNode(node, [Syntax.Link, Syntax.Image, Syntax.BlockQuote, Syntax.Emphasis])) {
            return;
        }
        var text = getSource(node);
        /**
         * report if match the markRegExp
         * @param {string} text
         * @param {RegExp} markRegExp
         */
        var reportIfIncludeMark = function reportIfIncludeMark(text, markRegExp) {
            (0, _matchIndex.matchCaptureGroupAll)(text, markRegExp).forEach(function (_ref) {
                var text = _ref.text;
                var index = _ref.index;

                report(node, new RuleError("Disallow to use \"" + text + "\".", {
                    index: index
                }));
            });
        };
        // Check
        if (!allowHalfWidthExclamation) {
            reportIfIncludeMark(text, Mark.HalfWidthExclamation);
        }
        if (!allowHalfWidthQuestion) {
            reportIfIncludeMark(text, Mark.HalfWidthQuestion);
        }
        if (!allowFullWidthExclamation) {
            reportIfIncludeMark(text, Mark.FullWidthExclamation);
        }
        if (!allowFullWidthQuestion) {
            reportIfIncludeMark(text, Mark.FullWidthQuestion);
        }
    });
};
//# sourceMappingURL=textlint-rule-no-exclamation-question-mark.js.map