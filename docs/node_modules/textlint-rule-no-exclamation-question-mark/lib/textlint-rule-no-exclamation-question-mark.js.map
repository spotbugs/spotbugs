{"version":3,"sources":["../src/textlint-rule-no-exclamation-question-mark.js"],"names":[],"mappings":";AACA;;AACA;;AACA;;;;AACA,IAAM,iBAAiB;;AAEnB,iCAA6B,KAFV;;AAInB,iCAA6B,KAJV;;AAMnB,8BAA0B,KANP;;AAQnB,8BAA0B;AARP,CAAvB;AAUA,IAAM,OAAO;AACT,0BAAsB,KADb;AAET,0BAAsB,KAFb;AAGT,uBAAmB,MAHV;AAIT,uBAAmB;AAJV,CAAb;;AAOA,OAAO,OAAP,GAAiB,UAAU,OAAV,EAA6C;AAAA,QAA1B,OAA0B,yDAAhB,cAAgB;AAAA,QACnD,MADmD,GACX,OADW,CACnD,MADmD;AAAA,QAC3C,SAD2C,GACX,OADW,CAC3C,SAD2C;AAAA,QAChC,MADgC,GACX,OADW,CAChC,MADgC;AAAA,QACxB,SADwB,GACX,OADW,CACxB,SADwB;;AAE1D,QAAM,SAAS,mCAAe,OAAf,CAAf;AACA,QAAM,4BAA4B,QAAQ,yBAAR,IAAqC,eAAe,yBAAtF;AACA,QAAM,4BAA4B,QAAQ,yBAAR,IAAqC,eAAe,yBAAtF;AACA,QAAM,yBAAyB,QAAQ,sBAAR,IAAkC,eAAe,sBAAhF;AACA,QAAM,yBAAyB,QAAQ,sBAAR,IAAkC,eAAe,sBAAhF;;AAEA,+BACK,OAAO,GADZ,YACiB,IADjB,EACsB;AACd,YAAI,OAAO,WAAP,CAAmB,IAAnB,EAAyB,CAAC,OAAO,IAAR,EAAc,OAAO,KAArB,EAA4B,OAAO,UAAnC,EAA+C,OAAO,QAAtD,CAAzB,CAAJ,EAA+F;AAC3F;AACH;AACD,YAAM,OAAO,UAAU,IAAV,CAAb;;;;;;AAMA,YAAM,sBAAsB,SAAtB,mBAAsB,CAAC,IAAD,EAAO,UAAP,EAAsB;AAC9C,kDAAqB,IAArB,EAA2B,UAA3B,EAAuC,OAAvC,CAA+C,gBAAmB;AAAA,oBAAjB,IAAiB,QAAjB,IAAiB;AAAA,oBAAX,KAAW,QAAX,KAAW;;AAC9D,uBAAO,IAAP,EAAa,IAAI,SAAJ,wBAAkC,IAAlC,UAA4C;AACrD;AADqD,iBAA5C,CAAb;AAGH,aAJD;AAKH,SAND;;AAQA,YAAI,CAAC,yBAAL,EAAgC;AAC5B,gCAAoB,IAApB,EAA0B,KAAK,oBAA/B;AACH;AACD,YAAI,CAAC,sBAAL,EAA6B;AACzB,gCAAoB,IAApB,EAA0B,KAAK,iBAA/B;AACH;AACD,YAAI,CAAC,yBAAL,EAAgC;AAC5B,gCAAoB,IAApB,EAA0B,KAAK,oBAA/B;AACH;AACD,YAAI,CAAC,sBAAL,EAA6B;AACzB,gCAAoB,IAApB,EAA0B,KAAK,iBAA/B;AACH;AACJ,KA/BL;AAiCH,CAzCD","file":"textlint-rule-no-exclamation-question-mark.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nimport {RuleHelper} from \"textlint-rule-helper\";\nimport {matchCaptureGroupAll} from \"match-index\"\nconst defaultOptions = {\n    // allow to use !\n    \"allowHalfWidthExclamation\": false,\n    // allow to use ！\n    \"allowFullWidthExclamation\": false,\n    // allow to use ?\n    \"allowHalfWidthQuestion\": false,\n    // allow to use ？\n    \"allowFullWidthQuestion\": false\n};\nconst Mark = {\n    HalfWidthExclamation: /(!)/,\n    FullWidthExclamation: /(！)/,\n    HalfWidthQuestion: /(\\?)/,\n    FullWidthQuestion: /(？)/\n};\n\nmodule.exports = function (context, options = defaultOptions) {\n    const {Syntax, RuleError, report, getSource} = context;\n    const helper = new RuleHelper(context);\n    const allowHalfWidthExclamation = options.allowHalfWidthExclamation || defaultOptions.allowHalfWidthExclamation;\n    const allowFullWidthExclamation = options.allowFullWidthExclamation || defaultOptions.allowFullWidthExclamation;\n    const allowHalfWidthQuestion = options.allowHalfWidthQuestion || defaultOptions.allowHalfWidthQuestion;\n    const allowFullWidthQuestion = options.allowFullWidthQuestion || defaultOptions.allowFullWidthQuestion;\n\n    return {\n        [Syntax.Str](node){\n            if (helper.isChildNode(node, [Syntax.Link, Syntax.Image, Syntax.BlockQuote, Syntax.Emphasis])) {\n                return;\n            }\n            const text = getSource(node);\n            /**\n             * report if match the markRegExp\n             * @param {string} text\n             * @param {RegExp} markRegExp\n             */\n            const reportIfIncludeMark = (text, markRegExp) => {\n                matchCaptureGroupAll(text, markRegExp).forEach(({text, index}) => {\n                    report(node, new RuleError(`Disallow to use \"${text}\".`, {\n                        index\n                    }));\n                });\n            };\n            // Check\n            if (!allowHalfWidthExclamation) {\n                reportIfIncludeMark(text, Mark.HalfWidthExclamation);\n            }\n            if (!allowHalfWidthQuestion) {\n                reportIfIncludeMark(text, Mark.HalfWidthQuestion);\n            }\n            if (!allowFullWidthExclamation) {\n                reportIfIncludeMark(text, Mark.FullWidthExclamation);\n            }\n            if (!allowFullWidthQuestion) {\n                reportIfIncludeMark(text, Mark.FullWidthQuestion);\n            }\n        }\n    }\n};"]}