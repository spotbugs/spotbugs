# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2017, spotbugs community
# This file is distributed under the same license as the spotbugs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: spotbugs 3.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-08-08 08:37+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 1.3\n"

#: ../../env/lib/python3.6/site-packages/pytz-2018.5.dist-info/DESCRIPTION.rst:2
msgid "pytz - World Timezone Definitions for Python"
msgstr ""

#: ../../env/lib/python3.6/site-packages/pytz-2018.5.dist-info/DESCRIPTION.rst:4
#: ../../env/lib/python3.6/site-packages/pytz-2018.5.dist-info/DESCRIPTION.rst:585
msgid "Stuart Bishop <stuart@stuartbishop.net>"
msgstr ""

#: ../../env/lib/python3.6/site-packages/pytz-2018.5.dist-info/DESCRIPTION.rst:7
msgid "Introduction"
msgstr ""

#: ../../env/lib/python3.6/site-packages/pytz-2018.5.dist-info/DESCRIPTION.rst:9
msgid ""
"pytz brings the Olson tz database into Python. This library allows "
"accurate and cross platform timezone calculations using Python 2.4 or "
"higher. It also solves the issue of ambiguous times at the end of "
"daylight saving time, which you can read more about in the Python Library"
" Reference (``datetime.tzinfo``)."
msgstr ""

#: ../../env/lib/python3.6/site-packages/pytz-2018.5.dist-info/DESCRIPTION.rst:15
msgid "Almost all of the Olson timezones are supported."
msgstr ""

#: ../../env/lib/python3.6/site-packages/pytz-2018.5.dist-info/DESCRIPTION.rst:19
msgid ""
"This library differs from the documented Python API for tzinfo "
"implementations; if you want to create local wallclock times you need to "
"use the ``localize()`` method documented in this document. In addition, "
"if you perform date arithmetic on local times that cross DST boundaries, "
"the result may be in an incorrect timezone (ie. subtract 1 minute from "
"2002-10-27 1:00 EST and you get 2002-10-27 0:59 EST instead of the "
"correct 2002-10-27 1:59 EDT). A ``normalize()`` method is provided to "
"correct this. Unfortunately these issues cannot be resolved without "
"modifying the Python datetime implementation (see PEP-431)."
msgstr ""

#: ../../env/lib/python3.6/site-packages/pytz-2018.5.dist-info/DESCRIPTION.rst:32
msgid "Installation"
msgstr ""

#: ../../env/lib/python3.6/site-packages/pytz-2018.5.dist-info/DESCRIPTION.rst:34
msgid ""
"This package can either be installed from a .egg file using setuptools, "
"or from the tarball using the standard Python distutils."
msgstr ""

#: ../../env/lib/python3.6/site-packages/pytz-2018.5.dist-info/DESCRIPTION.rst:37
msgid ""
"If you are installing from a tarball, run the following command as an "
"administrative user::"
msgstr ""

#: ../../env/lib/python3.6/site-packages/pytz-2018.5.dist-info/DESCRIPTION.rst:42
msgid ""
"If you are installing using setuptools, you don't even need to download "
"anything as the latest version will be downloaded for you from the Python"
" package index::"
msgstr ""

#: ../../env/lib/python3.6/site-packages/pytz-2018.5.dist-info/DESCRIPTION.rst:48
msgid "If you already have the .egg file, you can use that too::"
msgstr ""

#: ../../env/lib/python3.6/site-packages/pytz-2018.5.dist-info/DESCRIPTION.rst:54
msgid "Example & Usage"
msgstr ""

#: ../../env/lib/python3.6/site-packages/pytz-2018.5.dist-info/DESCRIPTION.rst:57
msgid "Localized times and date arithmetic"
msgstr ""

#: ../../env/lib/python3.6/site-packages/pytz-2018.5.dist-info/DESCRIPTION.rst:71
msgid ""
"This library only supports two ways of building a localized time. The "
"first is to use the ``localize()`` method provided by the pytz library. "
"This is used to localize a naive datetime (datetime with no timezone "
"information):"
msgstr ""

#: ../../env/lib/python3.6/site-packages/pytz-2018.5.dist-info/DESCRIPTION.rst:80
msgid ""
"The second way of building a localized time is by converting an existing "
"localized time using the standard ``astimezone()`` method:"
msgstr ""

#: ../../env/lib/python3.6/site-packages/pytz-2018.5.dist-info/DESCRIPTION.rst:87
msgid ""
"Unfortunately using the tzinfo argument of the standard datetime "
"constructors ''does not work'' with pytz for many timezones."
msgstr ""

#: ../../env/lib/python3.6/site-packages/pytz-2018.5.dist-info/DESCRIPTION.rst:93
msgid ""
"It is safe for timezones without daylight saving transitions though, such"
" as UTC:"
msgstr ""

#: ../../env/lib/python3.6/site-packages/pytz-2018.5.dist-info/DESCRIPTION.rst:99
msgid ""
"The preferred way of dealing with times is to always work in UTC, "
"converting to localtime only when generating output to be read by humans."
msgstr ""

#: ../../env/lib/python3.6/site-packages/pytz-2018.5.dist-info/DESCRIPTION.rst:108
msgid ""
"This library also allows you to do date arithmetic using local times, "
"although it is more complicated than working in UTC as you need to use "
"the ``normalize()`` method to handle daylight saving time and other "
"timezone transitions. In this example, ``loc_dt`` is set to the instant "
"when daylight saving time ends in the US/Eastern timezone."
msgstr ""

#: ../../env/lib/python3.6/site-packages/pytz-2018.5.dist-info/DESCRIPTION.rst:124
msgid ""
"Creating local times is also tricky, and the reason why working with "
"local times is not recommended. Unfortunately, you cannot just pass a "
"``tzinfo`` argument when constructing a datetime (see the next section "
"for more details)"
msgstr ""

#: ../../env/lib/python3.6/site-packages/pytz-2018.5.dist-info/DESCRIPTION.rst:137
msgid ""
"Converting between timezones is more easily done, using the standard "
"astimezone method."
msgstr ""

#: ../../env/lib/python3.6/site-packages/pytz-2018.5.dist-info/DESCRIPTION.rst:153
msgid ""
"You can take shortcuts when dealing with the UTC side of timezone "
"conversions. ``normalize()`` and ``localize()`` are not really necessary "
"when there are no daylight saving time transitions to deal with."
msgstr ""

#: ../../env/lib/python3.6/site-packages/pytz-2018.5.dist-info/DESCRIPTION.rst:171
msgid "``tzinfo`` API"
msgstr ""

#: ../../env/lib/python3.6/site-packages/pytz-2018.5.dist-info/DESCRIPTION.rst:173
msgid ""
"The ``tzinfo`` instances returned by the ``timezone()`` function have "
"been extended to cope with ambiguous times by adding an ``is_dst`` "
"parameter to the ``utcoffset()``, ``dst()`` && ``tzname()`` methods."
msgstr ""

#: ../../env/lib/python3.6/site-packages/pytz-2018.5.dist-info/DESCRIPTION.rst:182
msgid ""
"The ``is_dst`` parameter is ignored for most timestamps. It is only used "
"during DST transition ambiguous periods to resolve that ambiguity."
msgstr ""

#: ../../env/lib/python3.6/site-packages/pytz-2018.5.dist-info/DESCRIPTION.rst:213
msgid ""
"If ``is_dst`` is not specified, ambiguous timestamps will raise an "
"``pytz.exceptions.AmbiguousTimeError`` exception."
msgstr ""

#: ../../env/lib/python3.6/site-packages/pytz-2018.5.dist-info/DESCRIPTION.rst:242
msgid "Problems with Localtime"
msgstr ""

#: ../../env/lib/python3.6/site-packages/pytz-2018.5.dist-info/DESCRIPTION.rst:244
msgid ""
"The major problem we have to deal with is that certain datetimes may "
"occur twice in a year. For example, in the US/Eastern timezone on the "
"last Sunday morning in October, the following sequence happens:"
msgstr ""

#: ../../env/lib/python3.6/site-packages/pytz-2018.5.dist-info/DESCRIPTION.rst:249
msgid "01:00 EDT occurs"
msgstr ""

#: ../../env/lib/python3.6/site-packages/pytz-2018.5.dist-info/DESCRIPTION.rst:250
msgid ""
"1 hour later, instead of 2:00am the clock is turned back 1 hour and 01:00"
" happens again (this time 01:00 EST)"
msgstr ""

#: ../../env/lib/python3.6/site-packages/pytz-2018.5.dist-info/DESCRIPTION.rst:253
msgid ""
"In fact, every instant between 01:00 and 02:00 occurs twice. This means "
"that if you try and create a time in the 'US/Eastern' timezone the "
"standard datetime syntax, there is no way to specify if you meant before "
"of after the end-of-daylight-saving-time transition. Using the pytz "
"custom syntax, the best you can do is make an educated guess:"
msgstr ""

#: ../../env/lib/python3.6/site-packages/pytz-2018.5.dist-info/DESCRIPTION.rst:263
#, python-format
msgid ""
"As you can see, the system has chosen one for you and there is a 50% "
"chance of it being out by one hour. For some applications, this does not "
"matter. However, if you are trying to schedule meetings with people in "
"different timezones or analyze log files it is not acceptable."
msgstr ""

#: ../../env/lib/python3.6/site-packages/pytz-2018.5.dist-info/DESCRIPTION.rst:268
msgid ""
"The best and simplest solution is to stick with using UTC.  The pytz "
"package encourages using UTC for internal timezone representation by "
"including a special UTC implementation based on the standard Python "
"reference implementation in the Python documentation."
msgstr ""

#: ../../env/lib/python3.6/site-packages/pytz-2018.5.dist-info/DESCRIPTION.rst:273
msgid ""
"The UTC timezone unpickles to be the same instance, and pickles to a "
"smaller size than other pytz tzinfo instances.  The UTC implementation "
"can be obtained as pytz.utc, pytz.UTC, or pytz.timezone('UTC')."
msgstr ""

#: ../../env/lib/python3.6/site-packages/pytz-2018.5.dist-info/DESCRIPTION.rst:294
msgid ""
"Note that some other timezones are commonly thought of as the same (GMT, "
"Greenwich, Universal, etc.). The definition of UTC is distinct from these"
" other timezones, and they are not equivalent. For this reason, they will"
" not compare the same in Python."
msgstr ""

#: ../../env/lib/python3.6/site-packages/pytz-2018.5.dist-info/DESCRIPTION.rst:302
msgid "See the section `What is UTC`_, below."
msgstr ""

#: ../../env/lib/python3.6/site-packages/pytz-2018.5.dist-info/DESCRIPTION.rst:304
msgid ""
"If you insist on working with local times, this library provides a "
"facility for constructing them unambiguously:"
msgstr ""

#: ../../env/lib/python3.6/site-packages/pytz-2018.5.dist-info/DESCRIPTION.rst:313
msgid ""
"If you pass None as the is_dst flag to localize(), pytz will refuse to "
"guess and raise exceptions if you try to build ambiguous or non-existent "
"times."
msgstr ""

#: ../../env/lib/python3.6/site-packages/pytz-2018.5.dist-info/DESCRIPTION.rst:317
msgid ""
"For example, 1:30am on 27th Oct 2002 happened twice in the US/Eastern "
"timezone when the clocks where put back at the end of Daylight Saving "
"Time:"
msgstr ""

#: ../../env/lib/python3.6/site-packages/pytz-2018.5.dist-info/DESCRIPTION.rst:328
msgid ""
"Similarly, 2:30am on 7th April 2002 never happened at all in the "
"US/Eastern timezone, as the clocks where put forward at 2:00am skipping "
"the entire hour:"
msgstr ""

#: ../../env/lib/python3.6/site-packages/pytz-2018.5.dist-info/DESCRIPTION.rst:339
msgid ""
"Both of these exceptions share a common base class to make error handling"
" easier:"
msgstr ""

#: ../../env/lib/python3.6/site-packages/pytz-2018.5.dist-info/DESCRIPTION.rst:348
msgid ""
"A special case is where countries change their timezone definitions with "
"no daylight savings time switch. For example, in 1915 Warsaw switched "
"from Warsaw time to Central European time with no daylight savings "
"transition. So at the stroke of midnight on August 5th 1915 the clocks "
"were wound back 24 minutes creating an ambiguous time period that cannot "
"be specified without referring to the timezone abbreviation or the actual"
" UTC offset. In this case midnight happened twice, neither time during a "
"daylight saving time period. pytz handles this transition by treating the"
" ambiguous period before the switch as daylight savings time, and the "
"ambiguous period after as standard time."
msgstr ""

#: ../../env/lib/python3.6/site-packages/pytz-2018.5.dist-info/DESCRIPTION.rst:375
msgid ""
"The best way of creating a time during an ambiguous time period is by "
"converting from another timezone such as UTC:"
msgstr ""

#: ../../env/lib/python3.6/site-packages/pytz-2018.5.dist-info/DESCRIPTION.rst:382
msgid ""
"The standard Python way of handling all these ambiguities is not to "
"handle them, such as demonstrated in this example using the US/Eastern "
"timezone definition from the Python documentation (Note that this "
"implementation only works for dates between 1987 and 2006 - it is "
"included for tests only!):"
msgstr ""

#: ../../env/lib/python3.6/site-packages/pytz-2018.5.dist-info/DESCRIPTION.rst:399
msgid ""
"Notice the first two results? At first glance you might think they are "
"correct, but taking the UTC offset into account you find that they are "
"actually two hours appart instead of the 1 hour we asked for."
msgstr ""

#: ../../env/lib/python3.6/site-packages/pytz-2018.5.dist-info/DESCRIPTION.rst:411
msgid "Country Information"
msgstr ""

#: ../../env/lib/python3.6/site-packages/pytz-2018.5.dist-info/DESCRIPTION.rst:413
msgid ""
"A mechanism is provided to access the timezones commonly in use for a "
"particular country, looked up using the ISO 3166 country code. It returns"
" a list of strings that can be used to retrieve the relevant tzinfo "
"instance using ``pytz.timezone()``:"
msgstr ""

#: ../../env/lib/python3.6/site-packages/pytz-2018.5.dist-info/DESCRIPTION.rst:421
msgid ""
"The Olson database comes with a ISO 3166 country code to English country "
"name mapping that pytz exposes as a dictionary:"
msgstr ""

#: ../../env/lib/python3.6/site-packages/pytz-2018.5.dist-info/DESCRIPTION.rst:429
msgid "What is UTC"
msgstr ""

#: ../../env/lib/python3.6/site-packages/pytz-2018.5.dist-info/DESCRIPTION.rst:431
msgid ""
"'UTC' is `Coordinated Universal Time`_. It is a successor to, but "
"distinct from, Greenwich Mean Time (GMT) and the various definitions of "
"Universal Time. UTC is now the worldwide standard for regulating clocks "
"and time measurement."
msgstr ""

#: ../../env/lib/python3.6/site-packages/pytz-2018.5.dist-info/DESCRIPTION.rst:436
msgid ""
"All other timezones are defined relative to UTC, and include offsets like"
" UTC+0800 - hours to add or subtract from UTC to derive the local time. "
"No daylight saving time occurs in UTC, making it a useful timezone to "
"perform date arithmetic without worrying about the confusion and "
"ambiguities caused by daylight saving time transitions, your country "
"changing its timezone, or mobile computers that roam through multiple "
"timezones."
msgstr ""

#: ../../env/lib/python3.6/site-packages/pytz-2018.5.dist-info/DESCRIPTION.rst:447
msgid "Helpers"
msgstr ""

#: ../../env/lib/python3.6/site-packages/pytz-2018.5.dist-info/DESCRIPTION.rst:449
msgid "There are two lists of timezones provided."
msgstr ""

#: ../../env/lib/python3.6/site-packages/pytz-2018.5.dist-info/DESCRIPTION.rst:451
msgid ""
"``all_timezones`` is the exhaustive list of the timezone names that can "
"be used."
msgstr ""

#: ../../env/lib/python3.6/site-packages/pytz-2018.5.dist-info/DESCRIPTION.rst:460
msgid ""
"``common_timezones`` is a list of useful, current timezones. It doesn't "
"contain deprecated zones or historical zones, except for a few I've "
"deemed in common usage, such as US/Eastern (open a bug report if you "
"think other timezones are deserving of being included here). It is also a"
" sequence of strings."
msgstr ""

#: ../../env/lib/python3.6/site-packages/pytz-2018.5.dist-info/DESCRIPTION.rst:482
msgid "Both ``common_timezones`` and ``all_timezones`` are alphabetically sorted:"
msgstr ""

#: ../../env/lib/python3.6/site-packages/pytz-2018.5.dist-info/DESCRIPTION.rst:494
msgid "``all_timezones`` and ``common_timezones`` are also available as sets."
msgstr ""

#: ../../env/lib/python3.6/site-packages/pytz-2018.5.dist-info/DESCRIPTION.rst:504
msgid ""
"You can also retrieve lists of timezones used by particular countries "
"using the ``country_timezones()`` function. It requires an ISO-3166 two "
"letter country code."
msgstr ""

#: ../../env/lib/python3.6/site-packages/pytz-2018.5.dist-info/DESCRIPTION.rst:516
msgid "Internationalization - i18n/l10n"
msgstr ""

#: ../../env/lib/python3.6/site-packages/pytz-2018.5.dist-info/DESCRIPTION.rst:518
msgid ""
"Pytz is an interface to the IANA database, which uses ASCII names. The "
"`Unicode  Consortium's Unicode Locales (CLDR) <http://cldr.unicode.org>`_"
" project provides translations. Thomas Khyn's `l18n "
"<https://pypi.org/project/l18n/>`_ package can be used to access these "
"translations from Python."
msgstr ""

#: ../../env/lib/python3.6/site-packages/pytz-2018.5.dist-info/DESCRIPTION.rst:525
msgid "License"
msgstr ""

#: ../../env/lib/python3.6/site-packages/pytz-2018.5.dist-info/DESCRIPTION.rst:527
msgid "MIT license."
msgstr ""

#: ../../env/lib/python3.6/site-packages/pytz-2018.5.dist-info/DESCRIPTION.rst:529
msgid ""
"This code is also available as part of Zope 3 under the Zope Public "
"License,  Version 2.1 (ZPL)."
msgstr ""

#: ../../env/lib/python3.6/site-packages/pytz-2018.5.dist-info/DESCRIPTION.rst:532
msgid ""
"I'm happy to relicense this code if necessary for inclusion in other open"
" source projects."
msgstr ""

#: ../../env/lib/python3.6/site-packages/pytz-2018.5.dist-info/DESCRIPTION.rst:537
msgid "Latest Versions"
msgstr ""

#: ../../env/lib/python3.6/site-packages/pytz-2018.5.dist-info/DESCRIPTION.rst:539
msgid ""
"This package will be updated after releases of the Olson timezone "
"database.  The latest version can be downloaded from the `Python Package "
"Index <https://pypi.org/project/pytz/>`_.  The code that is used to "
"generate this distribution is hosted on launchpad.net and available using"
" git::"
msgstr ""

#: ../../env/lib/python3.6/site-packages/pytz-2018.5.dist-info/DESCRIPTION.rst:547
msgid "A mirror on github is also available at https://github.com/stub42/pytz"
msgstr ""

#: ../../env/lib/python3.6/site-packages/pytz-2018.5.dist-info/DESCRIPTION.rst:549
msgid ""
"Announcements of new releases are made on `Launchpad "
"<https://launchpad.net/pytz>`_, and the `Atom feed "
"<http://feeds.launchpad.net/pytz/announcements.atom>`_ hosted there."
msgstr ""

#: ../../env/lib/python3.6/site-packages/pytz-2018.5.dist-info/DESCRIPTION.rst:556
msgid "Bugs, Feature Requests & Patches"
msgstr ""

#: ../../env/lib/python3.6/site-packages/pytz-2018.5.dist-info/DESCRIPTION.rst:558
msgid ""
"Bugs can be reported using `Launchpad "
"<https://bugs.launchpad.net/pytz>`__."
msgstr ""

#: ../../env/lib/python3.6/site-packages/pytz-2018.5.dist-info/DESCRIPTION.rst:562
msgid "Issues & Limitations"
msgstr ""

#: ../../env/lib/python3.6/site-packages/pytz-2018.5.dist-info/DESCRIPTION.rst:564
msgid ""
"Offsets from UTC are rounded to the nearest whole minute, so timezones "
"such as Europe/Amsterdam pre 1937 will be up to 30 seconds out. This is a"
" limitation of the Python datetime library."
msgstr ""

#: ../../env/lib/python3.6/site-packages/pytz-2018.5.dist-info/DESCRIPTION.rst:568
msgid ""
"If you think a timezone definition is incorrect, I probably can't fix it."
" pytz is a direct translation of the Olson timezone database, and changes"
" to the timezone definitions need to be made to this source. If you find "
"errors they should be reported to the time zone mailing list, linked from"
" http://www.iana.org/time-zones."
msgstr ""

#: ../../env/lib/python3.6/site-packages/pytz-2018.5.dist-info/DESCRIPTION.rst:576
msgid "Further Reading"
msgstr ""

#: ../../env/lib/python3.6/site-packages/pytz-2018.5.dist-info/DESCRIPTION.rst:578
msgid ""
"More info than you want to know about timezones: "
"http://www.twinsun.com/tz/tz-link.htm"
msgstr ""

#: ../../env/lib/python3.6/site-packages/pytz-2018.5.dist-info/DESCRIPTION.rst:583
msgid "Contact"
msgstr ""

