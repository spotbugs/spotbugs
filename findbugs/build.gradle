plugins {
  id "com.github.kt3k.coveralls" version "2.7.1"
}

apply from: "$rootDir/gradle/jacoco.gradle"

sourceSets {
  main {
    java {
      srcDirs = ['src/main/java', 'src/gui']
    }
    resources {
      /*
       * Becuase why put everything in a single folder when you can split it
       * and mix it with other files you don't actually need together
      */
      srcDirs = ['src/xsl', 'etc', 'src/main/java', 'src/gui']
      include '*.xsd'
      include 'bugrank.txt'
      include 'findbugs.xml'
      include 'messages*.xml'
      include '**/*.properties'
      exclude 'doc.properties'
      exclude 'script.properties'
      include '*.xsl'
      include '**/*.db'
      include '**/*.html'
      include '**/*.png'
    }
  }
}

dependencies {
  compile 'org.ow2.asm:asm-debug-all:6.0_ALPHA'
  compile 'net.jcip:jcip-annotations:1.0'
  compile project(':spotbugs-annotations')
  testCompile project(':test-harness')

  // TODO : Some of these can be extracted to actual dependencies
  compile fileTree(dir: 'lib', include: '*.jar')
}

tasks.withType(Jar).all {
  includeEmptyDirs = false
  // FIXME: this is ugly, but is what ant is currently doing... our own jars are included as dependencies :S
  //destinationDir = file("$projectDir/lib")
}

// Manually define what goes into the default jar, since it's not only main sourceset
jar {
  from sourceSets.main.output
  from zipTree("$projectDir/lib/bcel-6.1-20161207.023659-9.jar").matching {
    exclude 'META-INF/**'
  }

  baseName 'spotbugs' // Needed until we rename the directory

  manifest {
    attributes 'Main-Class': 'edu.umd.cs.findbugs.LaunchAppropriateUI',
               'Bundle-Version': project.version,
               'Class-Path': 'dom4j-1.6.1.jar jaxen-1.1.6.jar asm-debug-all-6.0_ALPHA.jar jsr305-3.0.1.jar jFormatString.jar commons-lang-2.6.jar'
  }
}

// Populate bin folder with scripts
task scripts(type:Copy) {
  // Take the properties into account for up-to-date checking
  inputs.file "$projectDir/etc/script.properties"

  def props = new Properties()
  doFirst {
    props.load(new FileInputStream("$projectDir/etc/script.properties"))

    filesNotMatching('**/*.ico') {
      filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: [
        'GET_FBHOME': props.getProperty('script.get.fbhome'),
        'SET_DEFAULT_JAVA': props.getProperty('script.set.default.java'),
        'WRAP_JAVA': props.getProperty('script.wrap.java'),
        'WRAP_JAR': props.getProperty('script.wrap.jar'),
        'DEFINE_ESCAPE_ARG': props.getProperty('script.define.escape_arg')])
      fileMode 0755
    }
  }

  from 'src/scripts/standard'
  from 'src/scripts/windows'
  from('src/scripts/deprecated') {
    into 'deprecated'
  }
  from('src/scripts/experimental') {
    into 'experimental'
  }

  destinationDir file("$buildDir/bin")
  duplicatesStrategy DuplicatesStrategy.INCLUDE
}

apply from: "$rootDir/gradle/checkstyle.gradle"
apply from: "$rootDir/gradle/javadoc.gradle"

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier 'javadoc'
  baseName 'spotbugs' // TODO : This is undeeded once we change the dir / project name
  from javadoc.destinationDir
}

task sourcesJar(type: Jar, dependsOn: classes) {
  classifier = 'sources'
  baseName 'spotbugs' // TODO : This is undeeded once we change the dir / project name
  from sourceSets.main.allSource
}

artifacts {
  archives javadocJar
  archives sourcesJar
}

apply plugin: 'distribution'
distributions {
  main {
    baseName = 'spotbugs' // TODO : This is undeeded once we change the dir / project name
    contents {
      from(scripts) {
        into 'bin'
      }
      from 'README.txt'
      from 'licenses'
      from(configurations.compile) {
        into 'lib'

        // TODO : These exclusions can be removed when we move dependencies from lib to dependency management
        exclude 'AppleJavaExtensions.jar'
        exclude 'hamcrest-all-1.3.jar'
        exclude 'junit.jar'

        include '**/*.jar'
      }
      from([jar]) {
        into 'lib'
        rename "(.*)-${project.version}.jar", '$1.jar'
      }
      from('src/xsl') {
        into 'src/xsl'
        include '**/*.xsl'
      }
    }
  }
}

distTar.compression = Compression.GZIP
tasks['assemble'].dependsOn tasks['assembleDist']

task distSrcZip(type:Exec) {
  commandLine 'git', 'archive', '-o', "${buildDir}/distributions/spotbugs-${project.version}-source.zip",
    '--prefix', "spotbugs-${project.version}/", 'HEAD'
}
tasks['assembleDist'].finalizedBy distSrcZip

test {
  dependsOn ':findbugsTestCases:build'
  maxHeapSize = '1G'
}

task unzipDist(type:Copy, dependsOn:distZip) {
  from zipTree(distZip.outputs.files.singleFile)
  into file("$buildDir/smoketest/")
  // Remove prefix
  eachFile { details ->
    details.path = details.path - "spotbugs-${project.version}"
  }
}

// TODO : actually check the output beyond it not blowing up in pieces?
task smokeTest {
  dependsOn unzipDist
  doLast {
    ant.taskdef(name:'spotbugs', classname:'edu.umd.cs.findbugs.anttask.FindBugsTask', classpath:jar.outputs.files.asPath)
    ant.spotbugs(home:"$buildDir/smoketest/", output:'xml:withMessages',
              jvmargs:'-ea -Xmx1200m',
              excludeFilter:'findbugsExclude.xml',
              projectName:'spotbugs',
              maxRank:'20',
              timeout:'1800000',
              outputFile:"${buildDir}/smoketest/findbugscheckAll.xml") {
      sourcePath(path:'src/main/java:src/gui:src/test/java:src/tools')
      'class'(location:project.tasks['compileJava'].destinationDir)
      auxClasspath(path:project.fileTree(dir:'lib', include:'**/*.jar').asPath)
    }
  }
}

// https://docs.gradle.org/current/userguide/publishing_maven.html
publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java
      artifactId 'spotbugs'

      artifact sourcesJar {
        classifier 'sources'
      }

      artifact javadocJar {
        classifier 'javadoc'
      }
    }
  }
}

coveralls {
  jacocoReportPath = "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
}

// TODO : jsr305.jar (really?)
// TODO : generatemanual (we should decide what to do with the manual)
// TODO : generatepdfmanual
// TODO : bugdesc

// Smoke testing
// TODO : plugincheck_fbcontrib
// TODO : spotbugsTestCases (already analyzed by unit tests... not particularly useful, is it?)

// Integration testing
// TODO : validatesamplehtmloutput (really?)
// TODO : validatesamplexmloutput

// XML validation
// TODO : validate
