sourceSets {
  main {
    java {
      srcDirs = ['src/java', 'src/gui', 'src/antTask']
    }
    resources {
      /*
       * Becuase why put everything in a single folder when you can split it
       * and mix it with other files you don't actually need together
      */
      srcDirs = ['src/xsl', 'etc', 'src/java', 'src/gui']
      include '*.xsd'
      include 'bugrank.txt'
      include 'findbugs.xml'
      include 'messages*.xml'
      include '**/*.properties'
      exclude 'doc.properties'
      exclude 'script.properties'
      include '*.xsl'
      include '**/*.db'
      include '**/*.html'
      include '**/*.png'
    }
  }

  test {
    java {
      srcDirs = ['src/junit']
    }
  }
}

dependencies {
  compile 'org.apache.bcel:bcel:6.0'
  compile 'org.ow2.asm:asm-debug-all:6.0_ALPHA'

  // TODO : Some of these can be extracted to actual dependencies
  compile fileTree(dir: 'lib', include: '*.jar')
}

tasks.withType(Jar).all {
  includeEmptyDirs = false
  // FIXME: this is ugly, but is what ant is currently doing... our own jars are included as dependencies :S
  //destinationDir = file("$projectDir/lib")
}

// Manually define what goes into the default jar, since it's not only main sourceset
jar {
  from sourceSets.main.output

  baseName 'spotbugs' // Needed until we rename the directory

  manifest {
    attributes 'Main-Class': 'edu.umd.cs.findbugs.LaunchAppropriateUI',
               'Class-Path': 'bcel.jar dom4j-1.6.1.jar jaxen-1.1.6.jar asm-debug-all-6.0_ALPHA jsr305.jar jFormatString.jar commons-lang-2.6.jar'
  }
}

// Make the anttask jar as part of the build process
task anttaskJar(type:Jar) {
  from sourceSets.main.output
  include '**/anttask/*'
  baseName 'spotbugs-ant'
}

// Build spotbugs annotations jar
task spotbugsAnnotationsJar(type:Jar) {
  from sourceSets.main.output
  include '**/annotations/*'
  baseName 'spotbugs-annotations'

  manifest {
    attributes 'Bundle-Name': 'SpotbugsInternalAnnotations',
               'Bundle-SymbolicName': 'spotbugsInternalAnnotations',
               'Bundle-Version': project.version,
               'Export-Package': 'edu.umd.cs.findbugs.annotations',
               'Bundle-RequiredExecutionEnvironment': 'J2SE-1.5'
  }
}

// TODO : This jar should probably be dropped. Just use the one above, and add transitive dependencies
// Build ALL annotations jar
task annotationsJar(type:Jar) {
  from(sourceSets.main.output) {
    include '**/annotations/*'
  }
  // TODO : These includes source java files.. exclude them and put them in a separate sources jar?
  from zipTree("$projectDir/lib/jcip-annotations.jar").matching {
    exclude 'META-INF/**'
    exclude '**/*.html'
  }
  from zipTree("$projectDir/lib/jsr305.jar").matching { // TODO : to be dropped
    exclude 'META-INF/**'
    exclude '**/*.html'
  }
  baseName 'annotations'

  manifest {
    attributes 'Bundle-ManifestVersion': 2,
               'Bundle-Name': 'SpotbugsAnnotations',
               'Bundle-SymbolicName': 'spotbugsAnnotations',
               'Bundle-Version': project.version,
               'Export-Package': 'edu.umd.cs.findbugs.annotations, javax.annotation, ' +
                 'javax.annotation.concurrent, javax.annotation.meta, net.jcip.annotations',
               'Bundle-RequiredExecutionEnvironment': 'J2SE-1.5'
  }
}

tasks['jar'].dependsOn 'anttaskJar', 'spotbugsAnnotationsJar', 'annotationsJar'

// Populate bin folder with scripts
task scripts(type:Copy) {
  def props = new Properties()
  doFirst {
    props.load(new FileInputStream("$projectDir/etc/script.properties"))

    filesNotMatching('**/*.ico') {
      filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: [
        'GET_FBHOME': props.getProperty('script.get.fbhome'),
        'SET_DEFAULT_JAVA': props.getProperty('script.set.default.java'),
        'WRAP_JAVA': props.getProperty('script.wrap.java'),
        'WRAP_JAR': props.getProperty('script.wrap.jar'),
        'DEFINE_ESCAPE_ARG': props.getProperty('script.define.escape_arg')])
      fileMode 0755
    }
  }

  from 'src/scripts/standard'
  from 'src/scripts/windows'
  from('src/scripts/deprecated') {
    into 'deprecated'
  }
  from('src/scripts/experimental') {
    into 'experimental'
  }

  destinationDir file('bin')
  duplicatesStrategy DuplicatesStrategy.INCLUDE
}

apply from: "$rootDir/gradle/checkstyle.gradle"

// Setup javadoc tasks
apply from: "$rootDir/gradle/javadoc.gradle"

// annotations javadoc
task annotationJavadoc(type:Javadoc) {
  options.with {
    memberLevel = JavadocMemberLevel.PUBLIC
    docTitle = 'SpotBugs Annotation Documentation'
  }

  classpath = sourceSets.main.compileClasspath
  source sourceSets.main.java.srcDirs
  include 'edu/umd/cs/findbugs/annotations/*'
  destinationDir = file("${project.docsDir}/annotations-javadoc")
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier 'javadoc'
  baseName 'spotbugs' // TODO : This is undeeded once we change the dir / project name
  from javadoc.destinationDir
}

task annotationJavadocJar(type: Jar, dependsOn: annotationJavadoc) {
  classifier 'javadoc'
  baseName 'spotbugs-annotations'
  from annotationJavadoc.destinationDir
}

artifacts {
  archives javadocJar
  archives annotationJavadocJar
}

// TODO : srcJar
// TODO : jsr305.jar (really?)
// TODO : bindist
// TODO : srcdist
// TODO : sign
// TODO : jnlp (needed?)
// TODO : generatemanual
// TODO : generatepdfmanual
// TODO : generatedocs (needed?)
// TODO : bugdesc

// Smoke testing
// TODO : plugincheck_fbcontrib
// TODO : spotbugsTestCases
// TODO : spotbugscheck (really? I believe it does nothing but run and check it doesn't blow up)

// Integration testing
// TODO : validatesamplehtmloutput (really?)
// TODO : validatesamplexmloutput

// XML validation
// TODO : validate
