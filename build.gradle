plugins {
  id "org.sonarqube" version "3.3"
  id "com.diffplug.spotless" version "5.17.1"
  id "org.gradle.crypto.checksum" version "1.2.0"
  id "com.github.spotbugs" version "5.0.0-rc.1"
  id "io.github.gradle-nexus.publish-plugin" version "1.1.0"
}

group = 'com.github.spotbugs'
version = '4.5.1-SNAPSHOT'

apply from: "$rootDir/gradle/java.gradle"
apply from: "$rootDir/gradle/jacoco.gradle"

subprojects {
  apply from: "$rootDir/gradle/java.gradle"
  apply from: "$rootDir/gradle/eclipse.gradle"
  apply from: "$rootDir/gradle/idea.gradle"
  apply from: "$rootDir/gradle/test.gradle"
  if (!project.name.equals("spotbugsTestCases")) {
    apply from: "$rootDir/gradle/spotless.gradle"
  }

  group = 'com.github.spotbugs'
  version = rootProject.version

}

allprojects {
  repositories {
    mavenCentral()
  }
  dependencies {
    implementation platform('org.junit:junit-bom:5.8.2')
  }
}

wrapper {
  distributionType = Wrapper.DistributionType.ALL
}

// https://discuss.gradle.org/t/merge-jacoco-coverage-reports-for-multiproject-setups/12100/6
task jacocoRootReport(type: JacocoReport) {
  description = 'Merge all coverage reports before submit to SonarQube'
  def reportTasks = project.getTasksByName("jacocoTestReport", true).minus(rootProject.jacocoTestReport)
  dependsOn reportTasks

  executionData.setFrom reportTasks.executionData
  sourceDirectories.setFrom reportTasks.sourceDirectories

  // Only enable class directories related to non-test project
  classDirectories.setFrom files(reportTasks.classDirectories).filter {
    !it.toString().contains("-test") && !it.toString().contains("Test") && !it.toString().contains("junit")
  }

  reports {
    // JaCoCo SonarQube plugin needs a XML file to parse
    // https://docs.sonarqube.org/display/PLUG/JaCoCo+Plugin
    xml.required = true
  }
}

import org.gradle.crypto.checksum.Checksum

def createReleaseBody = tasks.register("createReleaseBody")
def createChecksums = tasks.register("createChecksums", Checksum)
def publishTask = tasks.findByName("publish")
if (publishTask == null) {
  publishTask = tasks.findByName("publishToMavenLocal")
}
def outputFile = file("$buildDir/release.md")
def inputFile =  subprojects.collect {
  it.hasProperty('publishing') ? it.publishing.publications.maven.artifacts : []
}.flatten().collect {
  it.file
}

createChecksums.configure {
  files = files(inputFile)
  if (publishTask != null) {
    dependsOn publishTask
  }
}
createReleaseBody.configure {
  inputs.files fileTree("$buildDir/checksums").matching {
    include "*.sha256"
  }
  outputs.file outputFile
  dependsOn createChecksums

  doLast {
    outputFile.delete()
    outputFile << """SpotBugs ${project.version}

### CHANGELOG
- https://github.com/spotbugs/spotbugs/blob/${project.version}/CHANGELOG.md

### CHECKSUM
| file | checksum (sha256) |
| ---- | ----------------- |
"""
    fileTree("$buildDir/checksums").matching {
      include "*.sha256"
    }.sort {
      it.name
    }.forEach {
      def name = it.name.replace(".sha256", "")
      def hash = it as String[]
      outputFile << "| ${ name } | ${hash[0]} |\n"
    }
  }
}

nexusPublishing {
    repositories {
        sonatype()
    }
}

apply from: "$rootDir/gradle/sonar.gradle"
