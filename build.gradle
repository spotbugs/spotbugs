plugins {
  id 'org.sonarqube' version '6.2.0.5505'
  id 'org.gradle.crypto.checksum' version '1.4.0'
  id 'com.github.spotbugs' version '6.2.3'
  id 'io.github.gradle-nexus.publish-plugin' version '2.0.0'
}

group = 'com.github.spotbugs'
version = '4.9.5-SNAPSHOT'

apply from: "$rootDir/gradle/java.gradle"
apply from: "$rootDir/gradle/jacoco.gradle"

subprojects {
  apply plugin: "constraints"
  apply from: "$rootDir/gradle/java.gradle"
  apply from: "$rootDir/gradle/eclipse.gradle"
  apply from: "$rootDir/gradle/idea.gradle"
  apply from: "$rootDir/gradle/test.gradle"
  if (!project.name.equals('spotbugsTestCases')) {
    apply from: "$rootDir/gradle/spotless.gradle"
  }

  group = 'com.github.spotbugs'
  version = rootProject.version
}

allprojects {
  repositories {
    mavenCentral()
  }
  dependencies {
    String junitVersion = '5.13.4'
    implementation platform("org.junit:junit-bom:$junitVersion")
    testImplementation platform("org.junit:junit-bom:$junitVersion")
  }
}

// https://discuss.gradle.org/t/merge-jacoco-coverage-reports-for-multiproject-setups/12100/6
tasks.register('jacocoRootReport', JacocoReport.class) {
  description = 'Merge all coverage reports before submit to SonarQube'
  Set<JacocoReport> reportTasks = project.getTasksByName('jacocoTestReport', true).minus(rootProject.jacocoTestReport)
  dependsOn reportTasks

  executionData.setFrom reportTasks.executionData
  sourceDirectories.setFrom reportTasks.sourceDirectories

  // Only enable class directories related to non-test project
  classDirectories.setFrom files(reportTasks.classDirectories).filter {
    !it.toString().contains('-test') && !it.toString().contains('Test') && !it.toString().contains('junit')
  }

  reports {
    // JaCoCo SonarQube plugin needs a XML file to parse
    // https://docs.sonarqube.org/display/PLUG/JaCoCo+Plugin
    xml.required = true
  }
}

import org.gradle.crypto.checksum.Checksum

TaskProvider<Task> createReleaseBody = tasks.register('createReleaseBody')
TaskProvider<Checksum> createChecksums = tasks.register('createChecksums', Checksum)
TaskProvider<Task> publishTask = tasks.findByName('publish')
if (publishTask == null) {
  publishTask = tasks.findByName('publishToMavenLocal')
}
Provider<RegularFile> outputFile = layout.buildDirectory.file('release.md')
List<File> inputFile = subprojects.collect {
  it.hasProperty('publishing') ? it.publishing.publications.maven.artifacts : []
}.flatten().collect {
  it.file
}

createChecksums.configure {
  files = files(inputFile)
  if (publishTask != null) {
    dependsOn publishTask
  }
  subprojects.each {
    dependsOn("${it.name}:jar")
  }

  dependsOn(':spotbugs:javadocJar')
  dependsOn(':spotbugs:sourcesJar')
  dependsOn(':spotbugs-annotations:javadocJar')
  dependsOn(':spotbugs-annotations:sourcesJar')
  dependsOn(':spotbugs-ant:javadocJar')
  dependsOn(':spotbugs-ant:sourcesJar')
  dependsOn(':test-harness:javadocJar')
  dependsOn(':test-harness:sourcesJar')
  dependsOn(':test-harness-core:javadocJar')
  dependsOn(':test-harness-core:sourcesJar')
  dependsOn(':test-harness-jupiter:javadocJar')
  dependsOn(':test-harness-jupiter:sourcesJar')
  dependsOn(':spotbugs:distZip')
  dependsOn(':spotbugs:distTar')
}
createReleaseBody.configure {
  inputs.files fileTree(layout.buildDirectory.dir('checksums')).matching {
    include '*.sha256'
  }
  outputs.file outputFile
  dependsOn createChecksums

  String version = project.version
  doLast {
    File outputAsFile = outputFile.get().asFile
    outputAsFile.delete()
    outputAsFile << """SpotBugs ${version}

### CHANGELOG
- https://github.com/spotbugs/spotbugs/blob/${version}/CHANGELOG.md

### CHECKSUM
| file | checksum (sha256) |
| ---- | ----------------- |
"""
    fileTree(layout.buildDirectory.dir('checksums')).matching {
      include '*.sha256'
    }.sort { File a, File b -> a.name <=> b.name }.forEach {
      String name = it.name.replace('.sha256', '')
      String[] hash = it.text as String[]
      outputFile.get().asFile << "| ${name} | ${hash[0]} |\n"
    }
  }
}

nexusPublishing {
  repositories {
    sonatype {
      nexusUrl.set(uri('https://ossrh-staging-api.central.sonatype.com/service/local/'))
      snapshotRepositoryUrl.set(uri('https://central.sonatype.com/repository/maven-snapshots/'))
      username.set(findProperty('ossrhUsername') ?: '')
      password.set(findProperty('ossrhPassword') ?: '')
    }
  }
}

apply from: "$rootDir/gradle/sonar.gradle"
