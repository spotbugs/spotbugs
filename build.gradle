plugins {
  id 'org.sonarqube' version '2.7.1'
  id "com.diffplug.gradle.spotless" version "3.27.1"
}

version = '4.0.0-SNAPSHOT'

apply from: "$rootDir/gradle/java.gradle"
apply from: "$rootDir/gradle/jacoco.gradle"

subprojects {
  apply from: "$rootDir/gradle/java.gradle"
  apply from: "$rootDir/gradle/eclipse.gradle"
  apply from: "$rootDir/gradle/idea.gradle"
  apply from: "$rootDir/gradle/test.gradle"
  if (!project.name.equals("spotbugsTestCases")) {
    apply from: "$rootDir/gradle/spotless.gradle"
  }

  group = 'com.github.spotbugs'
  version = rootProject.version

  // Java versions
  project.sourceCompatibility = 1.8
  project.targetCompatibility = 1.8

  repositories {
    jcenter()
  }
}

repositories {
  jcenter()
}

wrapper {
  distributionType = Wrapper.DistributionType.ALL
}

// https://discuss.gradle.org/t/merge-jacoco-coverage-reports-for-multiproject-setups/12100/6
task jacocoRootReport(type: JacocoReport) {
  description = 'Merge all coverage reports before submit to SonarQube'
  def reportTasks = project.getTasksByName("jacocoTestReport", true).minus(rootProject.jacocoTestReport)
  dependsOn reportTasks

  executionData.setFrom reportTasks.executionData
  sourceDirectories.setFrom reportTasks.sourceDirectories

  // Only enable class directories related to non-test project
  classDirectories.setFrom files(reportTasks.classDirectories).filter {
    !it.toString().contains("-test") && !it.toString().contains("Test") && !it.toString().contains("junit")
  }

  reports {
    // JaCoCo SonarQube plugin needs a XML file to parse
    // https://docs.sonarqube.org/display/PLUG/JaCoCo+Plugin
    xml.enabled = true
  }
}

apply from: "$rootDir/gradle/sonar.gradle"
