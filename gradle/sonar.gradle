apply plugin: 'org.sonarqube'

// sonar should analyze project with single target branch only
// In case feature branch should be analyzed, then sonar.branch variable should be specified
def isMaster = 'master'.equals(System.env.TRAVIS_BRANCH)

// for security reasons travis secure variables are defined when build is
// initiated by a pull request from same repository only
// so pull requests from external repositories can not be analysed by sonar
def isSecure = 'true'.equals(System.env.TRAVIS_SECURE_ENV_VARS)

if (!isSecure || !isMaster) {
    rootProject.tasks['sonarqube'].setEnabled(false)
    return
}

def isPush = 'push'.equals(System.env.TRAVIS_EVENT_TYPE);
def isPullRequest = 'pull_request'.equals(System.env.TRAVIS_EVENT_TYPE);

rootProject.tasks['sonarqube'].setEnabled(isPush || isPullRequest)

sonarqube {
    properties {
        property 'sonar.host.url', System.env.SONAR_HOST_URL
        property 'sonar.login', System.env.SONAR_LOGIN
        property 'sonar.projectKey', 'com.github.spotbugs.spotbugs'
        property 'sonar.projectName', 'SpotBugs'
        property 'sonar.projectVersion', rootProject.version
        property 'sonar.organization', 'spotbugs'
    }
}

if (isPullRequest) {
    sonarqube {
        properties {
            property 'sonar.analysis.mode', 'preview'
            property 'sonar.github.oauth', System.env.GITHUB_TOKEN
            property 'sonar.github.pullRequest', System.env.TRAVIS_PULL_REQUEST
            property 'sonar.github.repository', System.env.TRAVIS_REPO_SLUG
        }
    }
}
