apply from: "$rootDir/gradle/maven.gradle"

if (version.endsWith('-SNAPSHOT')) {
  // eclipse doesn't like the `-SNAPSHOT`, so we timestamp uniquely
  version = version - '-SNAPSHOT' + '.' + new Date().format('yyyyMMdd') + '-' + System.currentTimeMillis()
} else if (version.contains('-RC')) {
  // eclipse doesn't like the `-RC`, so we timestamp uniquely
  version = version - '-RC' + '.' + new Date().format('yyyyMMdd') + '-' + System.currentTimeMillis()
}

sourceSets {
  main {
    java {
      srcDirs = ['src']
    }
    resources {
      srcDirs = ['src']
      include '**/*.properties'
      include '**/*.xml'
    }
  }
}

configurations {
  embeddedLibs
  includedLibs
  compile.extendsFrom embeddedLibs
  compile.extendsFrom includedLibs
}

def eclipsePluginId = 'com.github.spotbugs.plugin.eclipse'

def localProps = new Properties()
localProps.load(new FileInputStream("$projectDir/local.properties"))

// TODO : convert these to external dependencies
def requiredLibs = fileTree(dir:'lib', include:[
  'jsr305.jar',
  'jFormatString.jar',
  'commons-lang-2.6.jar',
  'dom4j-1.6.1.jar',
  'jaxen-1.1.6.jar'
])

dependencies {
  includedLibs requiredLibs

  compile fileTree(dir:localProps.getProperty('eclipsePlugin.dir'), include:'**/*.jar',
    exclude:['**/datanucleus-enhancer*.jar', 'edu.umd.cs.findbugs.**/*.jar', 'com.github.spotbugs.**/*.jar'])

  includedLibs project(':spotbugs-annotations')
  includedLibs 'net.jcip:jcip-annotations:1.0'
  includedLibs fileTree(dir: '../findbugs/lib', include: 'bcel-6.1*.jar')
  includedLibs 'org.ow2.asm:asm-debug-all:6.0_ALPHA'

  embeddedLibs(project(':spotbugs')) {
    transitive = false
  }
}

task distSrcZip(type:Exec) {
  commandLine 'git', 'archive', '-o', "${buildDir}/distributions/${eclipsePluginId}_${project.version}-source.zip", 'HEAD'
}

jar {
  includeEmptyDirs = false
  from(configurations.embeddedLibs.collect { zipTree(it) }) {
    exclude 'edu/umd/cs/findbugs/gui/**/*.*'
    exclude 'edu/umd/cs/findbugs/gui2/**/*.*'
    exclude 'edu/umd/cs/findbugs/userAnnotations/ri/**/*.*'
    exclude 'edu/umd/cs/findbugs/sourceViewer/**/*.*'
    exclude 'edu/umd/cs/findbugs/anttask/**/*.*'
    exclude 'edu/umd/cs/findbugs/tools/**/*.*'
    exclude 'edu/umd/cs/findbugs/annotations/**/*.*'
    exclude 'net/jcip/annotations/**/*.*'
    exclude 'META-INF/**.*'
  }
  exclude 'de/tobject/findbugs/tools/**'
  archiveName 'findbugs-plugin.jar' // TODO : Change this
}

def distSpec = copySpec {
  from jar.outputs.files
  from(project.projectDir) {
    include 'RELEASENOTES'
    include 'plugin.xml'
    include '.options'
    include 'plugin*.properties' // match plugin.properties and plugin_ja.properties
    include '*.png'
    include 'about.*'
    include 'doc/*.*'
    include 'plugin/*.*'
    include 'icons/*.*'
  }
  from('../findbugs/') { // FIXME : Ugly... but those plugin are gonna die anyway...
    include 'plugin/**'
  }
  from('../findbugs/optionalPlugin/noUpdateChecks.jar') { // FIXME : ugly, but update checks are gonna die too
    into 'plugin/'
  }
  from(configurations.includedLibs) {
    into 'lib/'
    rename 'annotations-.*', 'annotations.jar'
  }
  from('META-INF/MANIFEST.MF') {
    filter { line ->
      if (line.startsWith('Bundle-Version:')) {
        return "Bundle-Version: ${project.version}"
      }

      line
    }
    into 'META-INF/'
  }
}

task distZip(type:Zip, dependsOn:jar) {
  with distSpec
  into "${eclipsePluginId}_${project.version}"
  archiveName = "${eclipsePluginId}_${project.version}.zip"
}

task pluginJar(type:Zip, dependsOn:jar) { // use Zip task, we already provide a manifest
  with distSpec
  archiveName = "${eclipsePluginId}_${project.version}.jar"
  destinationDir = file("${buildDir}/site/eclipse/plugins/")
}

task pluginCandidateJar(type:Copy, dependsOn:pluginJar) {
  from pluginJar.outputs.files
  into "${buildDir}/site/eclipse-candidate/plugins/"
}

task pluginDailyJar(type:Copy, dependsOn:pluginJar) {
  from pluginJar.outputs.files
  into "${buildDir}/site/eclipse-daily/plugins/"
}

def siteFilterTokens = [
  'PLUGIN_ID': eclipsePluginId,
  'PLUGIN_VERSION':"${project.version}".toString(),
  'FEATURE_ID': eclipsePluginId,
  'FEATURE_VERSION':"${project.version}".toString()
]

task featureJar(type:Zip) {
  archiveName = "${eclipsePluginId}_${project.version}.jar"
  entryCompression = ZipEntryCompression.STORED // no compression, this is a jar with no manifest
  from('plugin_feature.xml') {
    filter(tokens:siteFilterTokens, org.apache.tools.ant.filters.ReplaceTokens)
    rename { 'feature.xml' }
  }
  destinationDir = file("${buildDir}/site/eclipse/features/")
}

task featureCandidateJar(type:Zip) {
  archiveName = "${eclipsePluginId}_${project.version}.jar"
  entryCompression = ZipEntryCompression.STORED // no compression, this is a jar with no manifest
  from('plugin_feature-candidate.xml') {
    filter(tokens:siteFilterTokens, org.apache.tools.ant.filters.ReplaceTokens)
    rename { 'feature.xml' }
  }
  destinationDir = file("${buildDir}/site/eclipse-candidate/features/")
}

task featureDailyJar(type:Zip) {
  archiveName = "${eclipsePluginId}_${project.version}.jar"
  entryCompression = ZipEntryCompression.STORED // no compression, this is a jar with no manifest
  from('plugin_feature-daily.xml') {
    filter(tokens:siteFilterTokens, org.apache.tools.ant.filters.ReplaceTokens)
    rename { 'feature.xml' }
  }
  destinationDir = file("${buildDir}/site/eclipse-daily/features/")
}

task siteXml(type:Copy) {
  filter(tokens:siteFilterTokens, org.apache.tools.ant.filters.ReplaceTokens)
  from 'plugin_site.xml'
  destinationDir = file("${buildDir}/site/eclipse")
  rename { 'site.xml' }
}

task siteCandidateXml(type:Copy) {
  filter(tokens:siteFilterTokens, org.apache.tools.ant.filters.ReplaceTokens)
  from 'plugin_site-candidate.xml'
  destinationDir = file("${buildDir}/site/eclipse-candidate")
  rename { 'site.xml' }
}

task siteDailyXml(type:Copy) {
  filter(tokens:siteFilterTokens, org.apache.tools.ant.filters.ReplaceTokens)
  from 'plugin_site-daily.xml'
  destinationDir = file("${buildDir}/site/eclipse-daily")
  rename { 'site.xml' }
}

task generateP2Metadata(type:Exec) {
  inputs.file 'local.properties'
  dependsOn pluginJar, featureJar, siteXml
  commandLine "${localProps.getProperty('eclipsePlugin.dir')}/../eclipse", '-nosplash',
    '-application', 'org.eclipse.equinox.p2.publisher.UpdateSitePublisher',
    '-metadataRepository', "file:${buildDir}/site/eclipse", // TODO : May not work on Windows
    '-artifactRepository', "file:${buildDir}/site/eclipse", // TODO : May not work on Windows
    '-source', "${buildDir}/site/eclipse"
}

task generateCandidateP2Metadata(type:Exec) {
  inputs.file 'local.properties'
  dependsOn pluginCandidateJar, featureCandidateJar, siteCandidateXml
  commandLine "${localProps.getProperty('eclipsePlugin.dir')}/../eclipse", '-nosplash',
    '-application', 'org.eclipse.equinox.p2.publisher.UpdateSitePublisher',
    '-metadataRepository', "file:${buildDir}/site/eclipse-candidate", // TODO : May not work on Windows
    '-artifactRepository', "file:${buildDir}/site/eclipse-candidate", // TODO : May not work on Windows
    '-source', "${buildDir}/site/eclipse-candidate"
}

task generateP2MetadataDaily(type:Exec) {
  inputs.file 'local.properties'
  dependsOn pluginDailyJar, featureDailyJar, siteDailyXml
  commandLine "${localProps.getProperty('eclipsePlugin.dir')}/../eclipse", '-nosplash',
    '-application', 'org.eclipse.equinox.p2.publisher.UpdateSitePublisher',
    '-metadataRepository', "file:${buildDir}/site/eclipse-daily", // TODO : May not work on Windows
    '-artifactRepository', "file:${buildDir}/site/eclipse-daily", // TODO : May not work on Windows
    '-source', "${buildDir}/site/eclipse-daily"
}

task eclipseSite() {
  dependsOn generateP2Metadata, generateCandidateP2Metadata, generateP2MetadataDaily
}

task eclipseSiteZip(type:Zip, dependsOn:eclipseSite) {
  from("${buildDir}/site")
  archiveName = "${eclipsePluginId}_site_${project.version}.zip"
}

tasks['assemble'].dependsOn eclipseSite

artifacts {
  archives jar

  // deploy site zip to Maven central, to upload it to official update site https://spotbugs.github.io/
  archives eclipseSiteZip
}

uploadArchives {
  repositories {
    mavenDeployer {
      pom.project {
        name 'SpotBugs Eclipse Plugin'
        description "Eclpse Plugin to integrate SpotBugs daily development"
      }
    }
  }
}
