import static groovy.io.FileType.FILES

import java.nio.file.Files;
import java.nio.file.Path;
import org.ajoberstar.grgit.Grgit
import org.gradle.plugins.ide.eclipse.model.Classpath
import org.gradle.plugins.ide.eclipse.model.ClasspathEntry
import org.gradle.plugins.ide.eclipse.model.FileReference
import org.gradle.plugins.ide.eclipse.model.Library

// TODO: deploy not only jar but also sources and javadoc, to pass validation by Sonatype nexus
// apply from: "${rootDir}/gradle/maven.gradle"
plugins {
  id 'org.ajoberstar.grgit' version '5.3.3'
  id 'eclipse-convention'
}

// Force Eclipse use Java 11, otherwise it will get Java 17 (!) from gradle
eclipse {
  jdt {
    sourceCompatibility = 11
    targetCompatibility = 11
    javaRuntimeName = 'JavaSE-11'
  }
}

String readLastCommitHash() {
  // Same as 'git log -1 --pretty=format:"%h"'.execute().getText()
  return Grgit.open(dir: rootDir).head().abbreviatedId
}

String computeVersion(String baseVersion) {
  String now = new Date().format('yyyyMMddHHmm')
  String hash = readLastCommitHash()
  if (baseVersion.endsWith('-SNAPSHOT')) {
    // eclipse doesn't like the `-SNAPSHOT`, so we timestamp uniquely
    return baseVersion - '-SNAPSHOT' + ".${now}-${hash}"
  } else if (baseVersion.contains('-RC')) {
    // eclipse doesn't like the `-RC`, so we timestamp uniquely
    return baseVersion.substring(0, baseVersion.lastIndexOf('-RC')) + ".${now}-${hash}"
  } else if (baseVersion.contains('-beta')) {
    // eclipse doesn't like the `-beta`, so we timestamp uniquely
    return baseVersion.substring(0, baseVersion.lastIndexOf('-beta')) + ".${now}-${hash}"
  } else {
    // A release build version like 3.0.0 without qualifier will always be smaller
    // then nightly build 3.0.0.20171023-1508734123102, but to update from nightlies
    // we must give Eclipse a higher version number.
    // The "r" makes the release version to be always higher then nightly builds
    return baseVersion + ".r${now}-${hash}"
  }
}

version = computeVersion(version)

sourceSets {
  main {
    java {
      srcDirs = ['src']
    }
    resources {
      srcDirs = ['src']
      include '**/*.properties'
      include '**/*.xml'
    }
  }
}

File findEclipseExecutable() {
  if (!file("${projectDir}/local.properties").exists()) {
    return null
  }

  Properties localProps = new Properties()
  localProps.load(Files.newInputStream(Path.of("${projectDir}/local.properties")))
  File eclipseRootDir = new File(localProps.getProperty('eclipseRoot.dir'))
  // Eclipse 4.5+ uses a different directory layout under macOS. Try to detect this first.
  String os = System.getProperty('os.name').toLowerCase(Locale.ROOT)
  File eclipseExecutable
  if (os.contains('mac')) {
    eclipseExecutable = new File(eclipseRootDir, 'Contents/MacOS/eclipse')
    if (!eclipseExecutable.exists()) {
      // Fall back to non-macOS directory layout.
      eclipseExecutable = new File(eclipseRootDir, 'eclipse')
    }
  } else if (os.contains('win')) {
    eclipseExecutable = new File(eclipseRootDir, 'eclipse.exe')
  } else {
    eclipseExecutable = new File(eclipseRootDir, 'eclipse')
  }
  logger.warn('found eclipseExecutable at ' + eclipseExecutable)
  if (!eclipseExecutable.exists()) {
    logger.error('eclipseExecutable at ' + eclipseExecutable + ' does not exist!')
  }
  return eclipseExecutable
}

String eclipsePluginId = 'com.github.spotbugs.plugin.eclipse'
File eclipseExecutable = findEclipseExecutable()

dependencies {
  api (project(':spotbugs')) {
    transitive = true
  }
}

tasks.named('clean', Delete).configure {
  delete 'lib', 'build', 'META-INF/MANIFEST.MF', 'build.properties'
}

// This disables hundreds of javadoc warnings on missing tags etc, see #340
tasks.named('javadoc', Javadoc).configure {
  options.with {
    // This is supposed to enable everything except "missing" but doesn't work with gradle
    // See https://docs.oracle.com/en/java/javase/11/tools/javadoc.html
    addBooleanOption('Xdoclint:all,-missing', true)

    // TODO remove command and warning below if the doclint can be properly configured
    addStringOption('Xmaxwarns', '3')
  }

  doLast {
    logger.warn('Javadoc: too many warnings, only first 3 are shown, see #340!')
  }
}

TaskProvider<Copy> copyLibsForEclipse = tasks.register('copyLibsForEclipse', Copy) {
  from (configurations.runtimeClasspath) {
    include '*.jar'
    exclude 'Saxon*.jar'
  }
  into 'lib'
}

File resolvedBuildDir = project.layout.buildDirectory.asFile.get()

TaskProvider<Exec> distSrcZip = tasks.register('distSrcZip', Exec) {
  String out = "${resolvedBuildDir}/distributions/${eclipsePluginId}_${project.version}-source.zip"
  outputs.file out
  commandLine 'git', 'archive', '-o', out, 'HEAD'
}

TaskProvider<Task> updateManifest = tasks.register('updateManifest') {
  inputs.file "${projectDir}/META-INF/MANIFEST-TEMPLATE.MF"
  outputs.file "${projectDir}/META-INF/MANIFEST.MF"
  outputs.file "${projectDir}/META-INF/MANIFEST-DIST.MF"
  inputs.file "${projectDir}/build-template.properties"
  outputs.file "${projectDir}/build.properties"

  dependsOn ':spotbugs:updateManifest', copyLibsForEclipse
  String version = project.version
  doLast {
    Set<File> libFiles = fileTree(dir: 'lib').files
    Manifest manifestSpec = java.manifest {
      from "${projectDir}/META-INF/MANIFEST-TEMPLATE.MF"
      attributes 'Bundle-SymbolicName': "${eclipsePluginId}; singleton:=true",
                 'Bundle-Version': version,
                 'Bundle-ClassPath': '.,spotbugs-plugin.jar,' + libFiles.collect { File file ->
                      projectDir.toPath().relativize(file.toPath()).toString().replace('\\', '/') }.join(',')
    }

    Manifest distManifestSpec = java.manifest {
      from "${projectDir}/META-INF/MANIFEST-TEMPLATE.MF"
      attributes 'Bundle-SymbolicName': "${eclipsePluginId}; singleton:=true",
                 'Bundle-Version': version,
                 'Bundle-ClassPath': 'spotbugs-plugin.jar,' + libFiles.collect { File file ->
                        projectDir.toPath().relativize(file.toPath()).toString().replace('\\', '/') }.join(',')
    }
    // write manifests
    manifestSpec.writeTo("${projectDir}/META-INF/MANIFEST.MF")
    distManifestSpec.writeTo("${projectDir}/META-INF/MANIFEST-DIST.MF")

    // write build.properties
    File propsTemplate = file("${projectDir}/build-template.properties")
    Properties props = new Properties()
    props.load(propsTemplate.newDataInputStream())
    props.setProperty('bin.includes', props.getProperty('bin.includes') + ',' +
        libFiles.collect { File file -> projectDir.toPath().relativize(file.toPath()).toString().replace('\\', '/') }.join(','))
    props.store(file('build.properties').newWriter(), null)
  }
}

tasks.named('compileJava').configure { dependsOn ':spotbugs:jar' }

// create manifest when importing to eclipse
tasks.named('eclipse').configure { dependsOn copyLibsForEclipse, updateManifest }

class FileRef implements FileReference {
  File file
  FileRef(File file){
    this.file = file
  }
  File getFile(){
    return file
  }
  String getJarURL(){
    return 'jar:' + file
  }
  String getPath(){
    return file.toString().replace('\\', '/')
  }
  boolean isRelativeToPathVariable(){
    return false
  }
}

eclipse.classpath.file {
  whenMerged { Classpath classpath ->
    classpath.entries.removeAll { ClasspathEntry entry ->
      entry.kind == 'lib'
    }
    copyLibsForEclipse
    Set<File> libFiles = fileTree(dir: 'lib').files
    libFiles.forEach { File file ->
      File rel = projectDir.toPath().relativize(Paths.of(file.toString())).toFile()
      ClasspathEntry entry = new Library(new FileRef(rel))
      classpath.entries.add(entry)
    }
  }
}

TaskProvider<Jar> jar = tasks.named('jar', Jar) {
  // Make sure we always update the manifest when building
  dependsOn updateManifest
  includeEmptyDirs = false
  from sourceSets.main.output
  archiveFileName = 'spotbugs-plugin.jar'
}

CopySpec distSpec = copySpec {
  from jar.map { Jar jarTask -> jarTask.outputs.files }
  from(project.projectDir) {
    include 'RELEASENOTES'
    include 'plugin.xml'
    include '.options'
    include 'OSGI-INF/l10n/*.properties'
    include '*.png'
    include 'about.*'
    include 'doc/*.*'
    include 'plugin/*.*'
    include 'icons/*.*'
    include 'lib/'
  }
  // FIXME : Ugly... but those plugin are gonna die anyway...
  from('../spotbugs/') {
    include 'plugin/**'
  }
  from('META-INF/MANIFEST-DIST.MF') {
    filter { String line ->
      if (line.startsWith('Bundle-Version:')) {
        return "Bundle-Version: ${project.version}"
      }
      line
    }
    into 'META-INF/'
    rename {
      'MANIFEST.MF'
    }
  }
}

TaskProvider<Zip> distZip = tasks.register('distZip', Zip) {
  dependsOn jar
  with distSpec
  into "${eclipsePluginId}_${project.version}"
  archiveFileName = "${eclipsePluginId}_${project.version}.zip"
}

TaskProvider<Task> testPluginJar = tasks.register('testPluginJar') {
  String jarFile = "${resolvedBuildDir}/site/eclipse/plugins/${eclipsePluginId}_${project.version}.jar"
  inputs.file jarFile
  doLast {
    File spotbugsJar = zipTree(jarFile)
            .matching { include 'lib/spotbugs.jar' }
            .singleFile
    if (!spotbugsJar.exists()) {
      throw new TaskInstantiationException('Eclipse plugin does not contain spotbugs.jar')
    } else {
      logger.lifecycle('Eclipse plugin contains spotbugs.jar')
    }
  }
}

// use Zip task, we already provide a manifest
TaskProvider<Zip> pluginJar = tasks.register('pluginJar', Zip) {
  with distSpec
  dependsOn jar
  archiveFileName = "${eclipsePluginId}_${project.version}.jar"
  destinationDirectory.set(layout.buildDirectory.dir('site/eclipse/plugins/'))
  finalizedBy testPluginJar
}

TaskProvider<Copy> pluginCandidateJar = tasks.register('pluginCandidateJar', Copy) {
  dependsOn pluginJar
  from pluginJar.map { Zip zipTask -> zipTask.outputs.files }
  into layout.buildDirectory.dir('site/eclipse-candidate/plugins/')
}

TaskProvider<Copy> pluginDailyJar = tasks.register('pluginDailyJar', Copy) {
  dependsOn pluginJar
  from pluginJar.map { Zip zipTask -> zipTask.outputs.files }
  into layout.buildDirectory.dir('site/eclipse-daily/plugins/')
  mustRunAfter(siteHtml)
  mustRunAfter(siteXml)
}

TaskProvider<Copy> pluginStableLatestJar = tasks.register('pluginStableLatestJar', Copy) {
  dependsOn pluginJar
  from pluginJar.map { Zip zipTask -> zipTask.outputs.files }
  into layout.buildDirectory.dir('site/eclipse-stable-latest/plugins/')
  mustRunAfter(siteHtml)
  mustRunAfter(siteXml)
}

Map<String, String> siteFilterTokens = [
  'PLUGIN_ID': eclipsePluginId,
  'PLUGIN_VERSION':project.version.toString(),
  'FEATURE_ID': eclipsePluginId,
  'FEATURE_VERSION':project.version.toString()
]

TaskProvider<Zip> featureJar = tasks.register('featureJar', Zip) {
  archiveFileName = "${eclipsePluginId}_${project.version}.jar"
  entryCompression = ZipEntryCompression.STORED // no compression, this is a jar with no manifest
  from('plugin_feature.xml') {
    filter(tokens:siteFilterTokens, org.apache.tools.ant.filters.ReplaceTokens)
    rename { 'feature.xml' }
  }
  from('feature_p2.inf') {
    filter(tokens:siteFilterTokens, org.apache.tools.ant.filters.ReplaceTokens)
    rename { 'p2.inf' }
  }
  destinationDirectory = layout.buildDirectory.dir('site/eclipse/features/')
}

TaskProvider<Zip> featureCandidateJar = tasks.register('featureCandidateJar', Zip) {
  archiveFileName = "${eclipsePluginId}_${project.version}.jar"
  entryCompression = ZipEntryCompression.STORED // no compression, this is a jar with no manifest
  from('plugin_feature-candidate.xml') {
    filter(tokens:siteFilterTokens, org.apache.tools.ant.filters.ReplaceTokens)
    rename { 'feature.xml' }
  }
  from('feature_p2.inf') {
    filter(tokens:siteFilterTokens, org.apache.tools.ant.filters.ReplaceTokens)
    rename { 'p2.inf' }
  }
  destinationDirectory = layout.buildDirectory.dir('site/eclipse-candidate/features/')
}

TaskProvider<Zip> featureDailyJar = tasks.register('featureDailyJar', Zip) {
  archiveFileName = "${eclipsePluginId}_${project.version}.jar"
  entryCompression = ZipEntryCompression.STORED // no compression, this is a jar with no manifest
  from('plugin_feature-daily.xml') {
    filter(tokens:siteFilterTokens, org.apache.tools.ant.filters.ReplaceTokens)
    rename { 'feature.xml' }
  }
  from('feature_p2.inf') {
    filter(tokens:siteFilterTokens, org.apache.tools.ant.filters.ReplaceTokens)
    rename { 'p2.inf' }
  }
  destinationDirectory = layout.buildDirectory.dir('site/eclipse-daily/features/')
}

TaskProvider<Zip> featureStableLatestJar = tasks.register('featureStableLatestJar', Zip) {
  archiveFileName = "${eclipsePluginId}_${project.version}.jar"
  entryCompression = ZipEntryCompression.STORED // no compression, this is a jar with no manifest
  from('plugin_feature-stable_latest.xml') {
    filter(tokens:siteFilterTokens, org.apache.tools.ant.filters.ReplaceTokens)
    rename { 'feature.xml' }
  }
  from('feature_p2.inf') {
    filter(tokens:siteFilterTokens, org.apache.tools.ant.filters.ReplaceTokens)
    rename { 'p2.inf' }
  }
  destinationDirectory = layout.buildDirectory.dir('site/eclipse-stable-latest/features/')
}

TaskProvider<Copy> siteHtml = tasks.register('siteHtml', Copy) {
  filter(tokens:[
    'URL': 'https://spotbugs.github.io/eclipse/'
  ] + siteFilterTokens, org.apache.tools.ant.filters.ReplaceTokens)
  from 'plugin_site.html'
  into layout.buildDirectory.dir('site/eclipse')
  rename { 'index.html' }
  outputs.upToDateWhen {
    // even if we have generated file, we should rerun this task to overwrite it.
    false
  }
  dependsOn(pluginCandidateJar)
  dependsOn(testPluginJar)
}

TaskProvider<Copy> siteCandidateHtml = tasks.register('siteCandidateHtml', Copy) {
  filter(tokens:[
    'URL': 'https://spotbugs.github.io/eclipse-candidate/'
  ] + siteFilterTokens, org.apache.tools.ant.filters.ReplaceTokens)
  from 'plugin_site.html'
  into layout.buildDirectory.dir('site/eclipse-candidate')
  rename { 'index.html' }
  outputs.upToDateWhen {
    // even if we have generated file, we should rerun this task to overwrite it.
    false
  }
}

TaskProvider<Copy> siteDailyHtml = tasks.register('siteDailyHtml', Copy) {
  filter(tokens:[
    'URL': 'https://spotbugs.github.io/eclipse-latest/'
  ] + siteFilterTokens, org.apache.tools.ant.filters.ReplaceTokens)
  from 'plugin_site.html'
  into layout.buildDirectory.dir('site/eclipse-daily')
  rename { 'index.html' }
  outputs.upToDateWhen {
    // even if we have generated file, we should rerun this task to overwrite it.
    false
  }
}

TaskProvider<Copy> siteStableLatestHtml = tasks.register('siteStableLatestHtml', Copy) {
  filter(tokens:[
    'URL': 'https://spotbugs.github.io/eclipse-stable-latest/'
  ] + siteFilterTokens, org.apache.tools.ant.filters.ReplaceTokens)
  from 'plugin_site.html'
  into layout.buildDirectory.dir('site/eclipse-stable-latest')
  rename { 'index.html' }
  outputs.upToDateWhen {
    // even if we have generated file, we should rerun this task to overwrite it.
    false
  }
}

TaskProvider<Copy> siteXml = tasks.register('siteXml', Copy) {
  filter(tokens:siteFilterTokens, org.apache.tools.ant.filters.ReplaceTokens)
  from 'plugin_site.xml'
  into layout.buildDirectory.dir('site/eclipse')
  rename { 'site.xml' }
  outputs.upToDateWhen {
    // even if we have generated file, we should rerun this task to overwrite it.
    false
  }
  dependsOn(pluginCandidateJar)
  dependsOn(testPluginJar)
}

TaskProvider<Copy> siteCandidateXml = tasks.register('siteCandidateXml', Copy) {
  filter(tokens:siteFilterTokens, org.apache.tools.ant.filters.ReplaceTokens)
  from 'plugin_site-candidate.xml'
  into layout.buildDirectory.dir('site/eclipse-candidate')
  rename { 'site.xml' }
  outputs.upToDateWhen {
    // even if we have generated file, we should rerun this task to overwrite it.
    false
  }
}

TaskProvider<Copy> siteDailyXml = tasks.register('siteDailyXml', Copy) {
  filter(tokens:siteFilterTokens, org.apache.tools.ant.filters.ReplaceTokens)
  from 'plugin_site-daily.xml'
  into layout.buildDirectory.dir('site/eclipse-daily')
  rename { 'site.xml' }
  outputs.upToDateWhen {
    // even if we have generated file, we should rerun this task to overwrite it.
    false
  }
}

TaskProvider<Copy> siteStableLatestXml = tasks.register('siteStableLatestXml', Copy) {
  filter(tokens:siteFilterTokens, org.apache.tools.ant.filters.ReplaceTokens)
  from 'plugin_site-stable_latest.xml'
  into layout.buildDirectory.dir('site/eclipse-stable-latest')
  rename { 'site.xml' }
  outputs.upToDateWhen {
    // even if we have generated file, we should rerun this task to overwrite it.
    false
  }
}

// sign all .jar file under specified dir
ext.signJar = { File dir ->
  String keystorepass = project.hasProperty('keystorepass') ? keystorepass : ''
  if (keystorepass.isEmpty()) {
    logger.lifecycle('to sign eclipse plugins, set "keystorepass" project property')
    return
  } else {
    logger.lifecycle('Signing of Eclipse plugins is disabled now, see https://github.com/spotbugs/spotbugs/issues/3406')
    return;
  }

  dir.traverse(type: FILES, nameFilter: ~/.*\.jar$/) { File jarFile ->
    String relativePath = rootDir.toPath().relativize(jarFile.toPath())
    logger.lifecycle("signing ${relativePath}")
    ant.signjar(
        destDir: jarFile.parentFile,
        jar: jarFile,
        alias: 'eclipse-plugin',
        keystore: "${rootDir}/spotbugs.jks",
        storepass: keystorepass,
        tsaurl: 'http://timestamp.digicert.com',
        verbose: true
    )
  }
}

TaskProvider<Task> confirmEclipse = tasks.register('confirmEclipse') {
  doFirst {
    if (eclipseExecutable == null || !eclipseExecutable.exists()) {
      logger.warn('found eclipseExecutable at 2 ' + eclipseExecutable)
      throw new GradleScriptException('No eclipse found in local', null)
    }
  }
}

TaskProvider<Exec> generateP2Metadata = tasks.register('generateP2Metadata', Exec) {
  doFirst {
    Provider<Directory> eclipseSiteDir = layout.buildDirectory.dir('site/eclipse')
    File artifactsXml = eclipseSiteDir.map { Directory dir -> dir.file('artifacts.xml') }.get().asFile
    File contentXml = eclipseSiteDir.map { Directory dir -> dir.file('content.xml') }.get().asFile
    delete artifactsXml
    delete contentXml
    signJar(eclipseSiteDir.get().asFile)
  }
  inputs.file 'local.properties'
  dependsOn confirmEclipse, pluginJar, featureJar, siteXml, siteHtml
  commandLine eclipseExecutable, '-nosplash',
    '-application', 'org.eclipse.equinox.p2.publisher.UpdateSitePublisher',
    '-metadataRepository', "file:${resolvedBuildDir}/site/eclipse",
    '-artifactRepository', "file:${resolvedBuildDir}/site/eclipse",
    '-source', "${resolvedBuildDir}/site/eclipse",
    '-vm', "${System.getProperty('java.home')}/bin"
}

TaskProvider<Exec> generateCandidateP2Metadata = tasks.register('generateCandidateP2Metadata', Exec) {
  doFirst {
    Provider<Directory> eclipseSiteCandidateDir = layout.buildDirectory.dir('site/eclipse-candidate')
    File artifactsXml = eclipseSiteCandidateDir.map { Directory dir -> dir.file('artifacts.xml') }.get().asFile
    File contentXml = eclipseSiteCandidateDir.map { Directory dir -> dir.file('content.xml') }.get().asFile
    delete artifactsXml
    delete contentXml
    signJar(eclipseSiteCandidateDir.get().asFile)
  }
  inputs.file 'local.properties'
  dependsOn confirmEclipse, pluginCandidateJar, featureCandidateJar, siteCandidateXml, siteCandidateHtml
  commandLine eclipseExecutable, '-nosplash',
    '-application', 'org.eclipse.equinox.p2.publisher.UpdateSitePublisher',
    '-metadataRepository', "file:${resolvedBuildDir}/site/eclipse-candidate",
    '-artifactRepository', "file:${resolvedBuildDir}/site/eclipse-candidate",
    '-source', "${resolvedBuildDir}/site/eclipse-candidate",
    '-vm', "${System.getProperty('java.home')}/bin"
}

TaskProvider<Exec> generateP2MetadataDaily = tasks.register('generateP2MetadataDaily', Exec) {
  doFirst {
    Provider<Directory> eclipseSiteDailyDir = layout.buildDirectory.dir('site/eclipse-daily')
    File artifactsXml = eclipseSiteDailyDir.map { Directory dir -> dir.file('artifacts.xml') }.get().asFile
    File contentXml = eclipseSiteDailyDir.map { Directory dir -> dir.file('content.xml') }.get().asFile
    delete artifactsXml
    delete contentXml
    signJar(eclipseSiteDailyDir.get().asFile)
  }
  inputs.file 'local.properties'
  dependsOn confirmEclipse, pluginDailyJar, featureDailyJar, siteDailyXml, siteDailyHtml
  commandLine eclipseExecutable, '-nosplash',
    '-application', 'org.eclipse.equinox.p2.publisher.UpdateSitePublisher',
    '-metadataRepository', "file:${resolvedBuildDir}/site/eclipse-daily",
    '-artifactRepository', "file:${resolvedBuildDir}/site/eclipse-daily",
    '-source', "${resolvedBuildDir}/site/eclipse-daily",
    '-vm', "${System.getProperty('java.home')}/bin"
}

TaskProvider<Exec> generateP2MetadataStableLatest = tasks.register('generateP2MetadataStableLatest', Exec) {
  doFirst {
    Provider<Directory> eclipseSiteStableLatestDir = layout.buildDirectory.dir('site/eclipse-stable-latest')
    File artifactsXml = eclipseSiteStableLatestDir.map { Directory dir -> dir.file('artifacts.xml') }.get().asFile
    File contentXml = eclipseSiteStableLatestDir.map { Directory dir -> dir.file('content.xml') }.get().asFile
    delete artifactsXml
    delete contentXml
    signJar(eclipseSiteStableLatestDir.get().asFile)
  }
  inputs.file 'local.properties'
  dependsOn confirmEclipse, pluginStableLatestJar, featureStableLatestJar, siteStableLatestXml, siteStableLatestHtml
  commandLine eclipseExecutable, '-nosplash',
    '-application', 'org.eclipse.equinox.p2.publisher.UpdateSitePublisher',
    '-metadataRepository', "file:${resolvedBuildDir}/site/eclipse-stable-latest",
    '-artifactRepository', "file:${resolvedBuildDir}/site/eclipse-stable-latest",
    '-source', "${resolvedBuildDir}/site/eclipse-stable-latest",
    '-vm', "${System.getProperty('java.home')}/bin"
}

TaskProvider<Task> eclipseSite = tasks.register('eclipseSite') {
  dependsOn generateP2Metadata, generateCandidateP2Metadata, generateP2MetadataDaily, generateP2MetadataStableLatest
}

// create zip file to upload to GitHub release page
TaskProvider<Zip> eclipseSiteZip = tasks.register('eclipseSiteZip', Zip) {
  dependsOn eclipseSite
  from layout.buildDirectory.dir('site/eclipse')
  archiveFileName = 'eclipsePlugin.zip'
}

if (eclipseExecutable == null) {
  logger.lifecycle('Create local.properties to build eclipse site')
} else {
  tasks.named('assemble').configure { dependsOn eclipseSiteZip }
}

spotbugs {
  ignoreFailures = true
  release = rootProject.version
}
