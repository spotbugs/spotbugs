<!-- Prerequisites:
  Apache Ant 1.7+
  Apache Ivy 2.4+: http://ant.apache.org/ivy/
  git, unzip

  Main tasks:
  diff -Dprj=<prjname> -Drevision=<rev/tag/branch> (default task) - test given OS project with current and specified FindBugs version and compare the results
  build -Dprj=<prjname> [-Drevision=<rev/tag/branch>] - test given OS project with current or specified FindBugs version

  export -Drevision=<rev/tag/branch> - export given FB revision from Git repository
  buildBaseline -Drevision=<rev/tag/branch> - export given FB revision from Git repository and build spotbugs.jar
  retrieve -Dprj=<prjname> - retrieve given OS project from maven central
  clean - remove temporary files
-->
<project name="findbugsTestCasesOS" default="diff" xmlns:ivy="antlib:org.apache.ivy.ant">
  <property file="local.properties" />
  <property name="findbugs.current.home" value="../findbugs"/>

  <target name="build" depends="retrieve,run"/>

  <target name="initCurrent" unless="revision">
    <property name="findbugs.home" value="${findbugs.current.home}"/>
    <property name="findbugs.filename" value="${prj}"/>
  </target>

  <target name="initBaseline" if="revision" depends="-buildBaseline">
    <property name="findbugs.home" value="${revision.directory}/findbugs"/>
    <property name="findbugs.filename" value="${prj}-fb-${revision}"/>
  </target>

  <target name="init" depends="initCurrent,initBaseline">
    <taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask" classpath="${findbugs.current.home}/lib/findbugs-ant.jar"/>
    <property name="java.executable" value="" />
    <property name="enabledExtraVisitors" value="+CheckExpectedWarnings,+InefficientMemberAccess,+EmptyZipFileEntry"/>
    <property name="maxHeap" value="-Xmx3G"/>
  </target>

  <target name="run" depends="init,-run">
  </target>

  <target name="-run" depends="-requireProject,-uptodateCheck" unless="analysis.uptodate">
    <mkdir dir="projects/${prj}/build"/>
    <echo message="Analyzing project ${prj}"/>
    <findbugs home="${findbugs.home}"  jvmargs="-ea ${maxHeap}"
         jvm="${java.executable}"
         output="xml:withMessages" timestampNow="true" reportLevel="low" chooseVisitors="${enabledExtraVisitors}" outputFile="projects/${prj}/build/${findbugs.filename}.xml">
        <fileset dir="projects/${prj}/jar" includes="*.jar"/>
        <sourcePath>
           <fileset dir="projects/${prj}/source" includes="*.jar"/>
        </sourcePath>
        <auxclasspath>
           <fileset dir="projects/${prj}/dep" includes="*.jar"/>
        </auxclasspath>
    </findbugs>
  </target>

  <target name="diff" depends="-requireProject,-requireRevision,retrieve,init">
    <ant target="-run">
      <property name="prj" value="${prj}"/>
      <property name="findbugs.home" value="${findbugs.current.home}"/>
    <property name="findbugs.filename" value="${prj}"/>
    </ant>
    <ant target="-run">
      <property name="prj" value="${prj}"/>
      <property name="revision" value="${revision}"/>
      <property name="findbugs.home" value="${revision.directory}/findbugs"/>
    <property name="findbugs.filename" value="${prj}-fb-${revision}"/>
    </ant>
    <ant target="compare">
      <property name="prj" value="${prj}"/>
      <property name="revision" value="${revision}"/>
    </ant>
  </target>

  <target name="compare">
    <property name="file1" value="projects/${prj}/build/${prj}-fb-${revision}.xml"/>
    <property name="file2" value="projects/${prj}/build/${prj}.xml"/>
    <taskdef name="computebugs" classname="edu.umd.cs.findbugs.anttask.ComputeBugHistoryTask" classpath="${findbugs.current.home}/lib/findbugs-ant.jar"/>
    <taskdef name="filterbugs" classname="edu.umd.cs.findbugs.anttask.FilterBugsTask" classpath="${findbugs.current.home}/lib/findbugs-ant.jar"/>
    <computebugs home="${findbugs.current.home}" output="projects/${prj}/build/${prj}-new-since-${revision}.xml">
      <datafile name="${file1}"/>
      <datafile name="${file2}"/>
    </computebugs>
    <filterbugs home="${findbugs.current.home}" inputFile="projects/${prj}/build/${prj}-new-since-${revision}.xml" outputFile="projects/${prj}/build/${prj}-new-since-${revision}.xml" first="last"/>
    <computebugs home="${findbugs.current.home}" output="projects/${prj}/build/${prj}-disappeared-since-${revision}.xml">
      <datafile name="${file2}"/>
      <datafile name="${file1}"/>
    </computebugs>
    <filterbugs home="${findbugs.current.home}" inputFile="projects/${prj}/build/${prj}-disappeared-since-${revision}.xml" outputFile="projects/${prj}/build/${prj}-disappeared-since-${revision}.xml" first="last"/>
  </target>

  <!-- property prj must be set
    if -Dretrieve-debug=true is specified then ivy-fixed.xml will be created in the current directory which contains all the dependencies
    usage examples:
    $ ant retrieve -Dprj=commons-lang-2.0
    $ ant retrieve -Dprj=ant-1.7.0
    three folders will be created inside project directory:
    - jar: project jars
    - source: project source
    - dep: project dependencies
  -->
  <target name="retrieve" depends="-requireProject" if="ivyfile.exists">
    <echo message="Retrieving '${prj}'"/>
    <ivy:resolve file="${ivyfile}" transitive="true" conf="default" type="jar,bundle"/>
    <ivy:retrieve pattern="projects/${prj}/dep/[artifact]-[revision].[ext]" type="jar,bundle"/>
    <ant target="-retrieveDebug"/>
    <ivy:resolve file="${ivyfile}" transitive="false" conf="default" type="jar,bundle,source"/>
    <ivy:retrieve pattern="projects/${prj}/dep/[artifact]-[revision].[ext]" type="jar,bundle" overwriteMode="never" setId="ivy-remove-from-deps"/>
    <delete>
      <fileset refid="ivy-remove-from-deps"/>
    </delete>
    <ivy:retrieve pattern="projects/${prj}/jar/[artifact]-[revision].[ext]" type="jar,bundle"/>
    <ivy:retrieve pattern="projects/${prj}/source/[artifact]-[revision].[ext]" type="source"/>
  </target>

  <target name="-retrieveDebug" if="retrieve-debug">
    <ivy:fixdeps tofile="ivy-fixed.xml" />
  </target>

  <!-- export and build some specific revision of findbugs.
    usage examples:
    $ ant buildBaseline -Drevision=3.0.0
    $ ant buildBaseline -Drevision=master
    $ ant buildBaseline -Drevision=d4c94995d235
  -->
  <target name="buildBaseline" depends="-requireRevision,-buildBaseline"/>

  <target name="-buildBaseline" depends="-export" if="revision.directory" unless="revision.target.exists">
    <ant dir="${revision.directory}/findbugs"/>
  </target>

  <target name="-prepareExport" if="revision">
    <property name="revision.directory" value="fb-rev-${revision}"/>
    <available file="${revision.directory}/findbugs/build.xml" property="revision.exists"/>
    <available file="${revision.directory}/findbugs/lib/spotbugs.jar" property="revision.target.exists"/>
  </target>

  <!-- export some specific revision of findbugs.
    usage examples:
    $ ant build-revision -Drevision=3.0.0
    $ ant build-revision -Drevision=master
    $ ant build-revision -Drevision=d4c94995d235
  -->
  <target name="export" depends="-requireRevision,-export"/>

  <target name="-export" depends="-prepareExport" if="revision.directory" unless="revision.exists">
    <mkdir dir="${revision.directory}"/>
    <delete>
        <fileset dir="${revision.directory}" includes="**"/>
    </delete>
    <echo message="Exporting '${revision}' into ${revision.directory}"/>
    <exec executable="git" spawn="false" dir="..">
            <arg value="archive"/>
            <arg value="${revision}"/>
            <arg value="findbugs"/>
            <arg value="-o"/>
            <arg value="findbugsTestCasesOS/${revision.directory}/fb.zip"/>
    </exec>
    <exec executable="unzip" dir="${revision.directory}">
            <arg value="-q"/>
            <arg value="fb.zip"/>
    </exec>
    <delete file="${revision.directory}/fb.zip"/>
    <replace file="${revision.directory}/findbugs/.project" token="&lt;name&gt;findbugs&lt;/name&gt;" value="&lt;name&gt;findbugs-${revision}&lt;/name&gt;"/>
  </target>

  <target name="-requireProject">
    <fail unless="prj" message="please specify -Dprj=&lt;test project&gt; (one of subfolders in projects folder)"/>
    <property name="ivyfile" value="projects/${prj}/ivy.xml"/>
    <available file="projects/${prj}" property="prj.available"/>
    <fail unless="prj.available" message="unable to find projects/${prj}"/>
    <available file="${ivyfile}" property="ivyfile.exists"/>
  </target>

  <target name="-requireRevision">
    <fail unless="revision" message="please specify -Drevision=&lt;rev/tag/branch&gt; (example: -Drevision=3.0.0)"/>
  </target>

  <target name="-uptodateCheck" depends="-emptyCheck" unless="analysis.empty">
    <uptodate property="analysis.uptodate" srcfile="${findbugs.home}/lib/spotbugs.jar" targetfile="projects/${prj}/build/${findbugs.filename}.xml"/>
  </target>

  <target name="-emptyCheck">
    <condition property="analysis.empty">
      <length file="projects/${prj}/build/${findbugs.filename}.xml" when="equal" length="0"/>
    </condition>
  </target>

  <!-- remove prj jars and previously exported findbugs revision code
  -->
  <target name="clean">
    <delete includeemptydirs="true">
        <fileset dir="." includes="fb-rev-*/**"/>
        <fileset dir="projects" includes="*/source/**"/>
        <fileset dir="projects" includes="*/dep/**"/>
        <fileset dir="projects" includes="*/jar/**"/>
    </delete>
  </target>

  <!-- remove previous results
  -->
  <target name="cleanResults">
    <delete includeemptydirs="true">
    	<fileset dir="projects" includes="*/build/**"/>
    </delete>
  </target>
</project>
