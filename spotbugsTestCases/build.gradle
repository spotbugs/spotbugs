sourceSets {
  main {
    java {
      srcDirs = ['src/java', 'src/fakeAnnotations', 'src/fakeLibraries']
    }
  }
}

dependencies {
  // TODO : Some of these can be extracted to actual dependencies
  implementation fileTree(dir: 'lib', include: '*.jar')

  implementation 'com.google.code.gson:gson:2.8.1'
  implementation 'com.google.guava:guava:25.0-jre'
  implementation 'com.google.inject:guice:4.1.0'
  implementation 'com.google.inject.extensions:guice-assistedinject:4.1.0'
  implementation 'com.google.inject.extensions:guice-servlet:4.1.0'
  implementation 'com.google.truth:truth:0.36'
  implementation 'joda-time:joda-time:2.9.9'
  api 'net.jcip:jcip-annotations:1.0'
  implementation 'org.springframework:spring-core:4.3.8.RELEASE'
  compileOnly 'javax.annotation:javax.annotation-api:1.3.2'
  implementation 'org.checkerframework:checker-qual:2.8.1'

  implementation 'junit:junit:4.12'
  implementation 'org.testng:testng:6.11'

  implementation project(':spotbugs')
  api project(':spotbugs-annotations')
}

tasks.withType(JavaCompile).all {
  options.compilerArgs << '-Xlint:none'
  options.encoding = 'UTF-8'
}

// This disables hundreds of javadoc warnings on missing tags etc, see #340
javadoc {
  doFirst {
    // This is supposed to enable everything except "missing" but doesn't work with gradle
    // See http://docs.oracle.com/javase/8/docs/technotes/tools/unix/javadoc.html
    options.addBooleanOption('Xdoclint:all,-missing', true)

    // TODO remove command and warning below if the doclint can be properly configured
    options.addStringOption('Xmaxwarns', '3')
  }
  doLast {
    logger.warn('Javadoc: too many warnings, only first 3 are shown, see #340!')
  }
}

task classesJava8(type:JavaCompile) {
  sourceCompatibility = '1.8'
  targetCompatibility = '1.8'
  destinationDir = file("$buildDir/classes/java/java8")
  classpath = sourceSets.main.compileClasspath
  source = file('src/java8')
}

task classesJava11(type:JavaCompile) {
  sourceCompatibility = '11'
  targetCompatibility = '11'
  destinationDir = file("$buildDir/classes/java/java11")
  classpath = sourceSets.main.compileClasspath
  source = file('src/java11')
}

if (System.getProperty("java.specification.version") == "1.8") {
  // JDK11 removed several deprecated methods like Thread#destroy() and System.runFinalizersOnExit().
  // so code that depends on them should be built only on JDK8.
  tasks['classes'].dependsOn classesJava8
} else {
  tasks['classes'].dependsOn classesJava11
}

sonarqube {
  // this project should not be analyzed with sonarqube
  // as it is test data, not real code
  skipProject true
}
