sourceSets {
  main {
    java {
      srcDirs = ['src/java', 'src/fakeAnnotations', 'src/fakeLibraries']
    }
  }
}

ext {
  guiceVersion = '5.0.1'
}

dependencies {
  // TODO : Some of these can be extracted to actual dependencies
  implementation fileTree(dir: 'lib', include: '*.jar')

  implementation 'com.google.code.gson:gson:2.8.9'
  implementation 'com.google.guava:guava:30.1.1-jre'
  implementation "com.google.inject:guice:${guiceVersion}"
  implementation "com.google.inject.extensions:guice-assistedinject:${guiceVersion}"
  implementation "com.google.inject.extensions:guice-servlet:${guiceVersion}"
  implementation 'com.google.truth:truth:1.1.3'
  implementation 'joda-time:joda-time:2.10.13'
  api 'net.jcip:jcip-annotations:1.0'
  implementation 'org.springframework:spring-core:5.3.13'
  compileOnly 'javax.annotation:javax.annotation-api:1.3.2'
  implementation 'org.checkerframework:checker-qual:3.19.0'

  implementation 'junit:junit:4.13.1'
  implementation 'org.testng:testng:7.4.0'

  implementation project(':spotbugs')
  api project(':spotbugs-annotations')
}

tasks.withType(JavaCompile).configureEach {
  options.compilerArgs << '-Xlint:none'
  options.encoding = 'UTF-8'
  if (it.name == 'classesJava17') {
    options.release = 17
  } else if (it.name == 'classesJava11') {
    options.release = 11
  } else if (it.name != 'compileJava') {
    options.release = 8
  }
}

// This disables hundreds of javadoc warnings on missing tags etc, see #340
tasks.named('javadoc', Javadoc).configure {
  // This is supposed to enable everything except "missing" but doesn't work with gradle
  // See http://docs.oracle.com/javase/8/docs/technotes/tools/unix/javadoc.html
  options.addBooleanOption('Xdoclint:all,-missing', true)

  // TODO remove command and warning below if the doclint can be properly configured
  options.addStringOption('Xmaxwarns', '3')
  doLast {
    logger.warn('Javadoc: too many warnings, only first 3 are shown, see #340!')
  }
}

def jvmVersion = JavaVersion.current()
def classesJava8 = tasks.register('classesJava8', JavaCompile) {
  destinationDirectory.set(file("$buildDir/classes/java/java8"))
  classpath = sourceSets.main.compileClasspath
  source = file('src/java8')
}

def classesJava11 = tasks.register('classesJava11', JavaCompile) {
  destinationDirectory.set(file("$buildDir/classes/java/java11"))
  classpath = sourceSets.main.compileClasspath
  source = file('src/java11')
}

def classesJava17 = tasks.register('classesJava17', JavaCompile) {
  destinationDirectory.set(file("$buildDir/classes/java/java14"))
  classpath = sourceSets.main.compileClasspath
  source = file('src/java14')
}

tasks.named('classes').configure {
  dependsOn classesJava8
  if (jvmVersion.isCompatibleWith(JavaVersion.VERSION_11)) {
    dependsOn classesJava11
  } else {
    println "skip tests for Java 11 features"
  }
  if (jvmVersion.isCompatibleWith(JavaVersion.VERSION_17)) {
    dependsOn classesJava17
  } else {
    println "skip tests for Java 17 features"
  }
}

sonarqube {
  // this project should not be analyzed with sonarqube
  // as it is test data, not real code
  skipProject true
}

spotbugs {
  ignoreFailures = true
}
